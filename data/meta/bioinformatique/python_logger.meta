a:2:{s:7:"current";a:7:{s:4:"date";a:2:{s:7:"created";i:1479716887;s:8:"modified";i:1479716887;}s:7:"creator";s:29:"clement.delestre@bioaster.org";s:4:"user";s:29:"clement.delestre@bioaster.org";s:11:"last_change";a:7:{s:4:"date";i:1479716887;s:2:"ip";s:12:"10.69.10.240";s:4:"type";s:1:"C";s:2:"id";s:29:"bioinformatique:python_logger";s:4:"user";s:29:"clement.delestre@bioaster.org";s:3:"sum";s:7:"créée";s:5:"extra";s:0:"";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:11:"description";a:1:{s:8:"abstract";s:503:"import webbrowser
import sys

class Foo:
	def __str__(self):
		return "foo class"

def printFunctionArgs(function):
	def intern(*args,**kwargs):
		print ('* {} function will be used with following parameters *'.format(function.__name__))
		for arg in args :
			if type(arg).__name__=="instance":
				print('{} which is {}.'.format(arg,arg.__class__.__name__))
			else :
				print('{} which is {}.'.format(arg,type(arg).__name__))
		for kwarg in kwargs :
			if type(kwargs[kwarg]).__name__=="instance"…";}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:4:{s:4:"date";a:1:{s:7:"created";i:1479716887;}s:7:"creator";s:29:"clement.delestre@bioaster.org";s:4:"user";s:29:"clement.delestre@bioaster.org";s:11:"last_change";a:7:{s:4:"date";i:1479716887;s:2:"ip";s:12:"10.69.10.240";s:4:"type";s:1:"C";s:2:"id";s:29:"bioinformatique:python_logger";s:4:"user";s:29:"clement.delestre@bioaster.org";s:3:"sum";s:7:"créée";s:5:"extra";s:0:"";}}}