a:2:{s:7:"current";a:8:{s:4:"date";a:2:{s:7:"created";i:1572342897;s:8:"modified";i:1572342897;}s:7:"creator";s:11:"pengfei liu";s:4:"user";s:4:"pliu";s:11:"last_change";a:8:{s:4:"date";i:1572342897;s:2:"ip";s:14:"159.84.108.117";s:4:"type";s:1:"C";s:2:"id";s:45:"employes:pengfei.liu:java:exception_hierarchy";s:4:"user";s:4:"pliu";s:3:"sum";s:7:"created";s:5:"extra";s:0:"";s:10:"sizechange";i:741;}s:5:"title";s:24:"Java exception hierarchy";s:11:"description";a:2:{s:15:"tableofcontents";a:1:{i:0;a:4:{s:3:"hid";s:24:"java_exception_hierarchy";s:5:"title";s:24:"Java exception hierarchy";s:4:"type";s:2:"ul";s:5:"level";i:1;}}s:8:"abstract";s:503:"Java exception hierarchy

In Java, an exception can be checked or unchecked. They both fit into a class hierarchy. The following diagram shows the Java Exception class hierarchy.

Red-colored are checked exceptions. Any checked exceptions that may be thrown in a method must either be caught or declared in the method's throws clause. Checked exceptions must be caught at compile time. Checked exceptions are so-called because both the Java compiler and the Java virtual machine check to make sure thâ€¦";}s:8:"relation";a:2:{s:5:"media";a:1:{s:58:"employes:pengfei.liu:java:exception-hierarchy-diagram.jpeg";b:1;}s:10:"firstimage";s:58:"employes:pengfei.liu:java:exception-hierarchy-diagram.jpeg";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}}s:10:"persistent";a:4:{s:4:"date";a:1:{s:7:"created";i:1572342897;}s:7:"creator";s:11:"pengfei liu";s:4:"user";s:4:"pliu";s:11:"last_change";a:8:{s:4:"date";i:1572342897;s:2:"ip";s:14:"159.84.108.117";s:4:"type";s:1:"C";s:2:"id";s:45:"employes:pengfei.liu:java:exception_hierarchy";s:4:"user";s:4:"pliu";s:3:"sum";s:7:"created";s:5:"extra";s:0:"";s:10:"sizechange";i:741;}}}