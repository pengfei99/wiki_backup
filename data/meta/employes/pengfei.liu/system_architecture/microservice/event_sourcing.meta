a:2:{s:7:"current";a:8:{s:4:"date";a:2:{s:7:"created";i:1561554995;s:8:"modified";i:1561554995;}s:7:"creator";s:11:"pengfei liu";s:4:"user";s:4:"pliu";s:11:"last_change";a:8:{s:4:"date";i:1561554995;s:2:"ip";s:13:"46.218.31.186";s:4:"type";s:1:"C";s:2:"id";s:68:"employes:pengfei.liu:system_architecture:microservice:event_sourcing";s:4:"user";s:4:"pliu";s:3:"sum";s:7:"created";s:5:"extra";s:0:"";s:10:"sizechange";i:553;}s:5:"title";s:14:"Event sourcing";s:11:"description";a:2:{s:15:"tableofcontents";a:2:{i:0;a:4:{s:3:"hid";s:14:"event_sourcing";s:5:"title";s:14:"Event sourcing";s:4:"type";s:2:"ul";s:5:"level";i:1;}i:1;a:4:{s:3:"hid";s:7:"context";s:5:"title";s:7:"Context";s:4:"type";s:2:"ul";s:5:"level";i:2;}}s:8:"abstract";s:503:"Event sourcing

Context

A service typically needs to atomically update the database and publish messages/events. For example, perhaps it uses the Saga pattern. In order to be reliable, each step of a saga must atomically update the database and publish messages/events. Alternatively, it might use the Domain event pattern, perhaps to implement CQRS. In either case, it is not viable to use a distributed transaction that spans the database and the message broker to atomically update the database aâ€¦";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:4:{s:4:"date";a:1:{s:7:"created";i:1561554995;}s:7:"creator";s:11:"pengfei liu";s:4:"user";s:4:"pliu";s:11:"last_change";a:8:{s:4:"date";i:1561554995;s:2:"ip";s:13:"46.218.31.186";s:4:"type";s:1:"C";s:2:"id";s:68:"employes:pengfei.liu:system_architecture:microservice:event_sourcing";s:4:"user";s:4:"pliu";s:3:"sum";s:7:"created";s:5:"extra";s:0:"";s:10:"sizechange";i:553;}}}