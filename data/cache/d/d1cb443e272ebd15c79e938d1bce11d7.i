a:216:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Kafka的生产集群部署";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:43;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"1 方案背景";i:1;i:2;i:2;i:43;}i:2;i:43;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:43;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:285:"假设每天集群需要承载10亿数据。一天24小时，晚上12点到凌晨8点几乎没多少数据。 使用二八法则估计，也就是80%的数据（8亿）会在16个小时涌入，而且8亿的80%的数据（6.4亿）会在这16个小时的20%时间（3小时）涌入。";}i:2;i:72;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:357;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:357;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:"QPS计算公式：640000000 ÷ (3x60x60) = 60000，也就是说高峰期的时候Kafka集群要扛住每秒6万的并发。";}i:2;i:359;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:482;}i:12;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:482;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:390:"磁盘空间计算，每天10亿数据，每条50kb，也就是46T的数据。保存2个副本（在上一篇中也提到过其实两个副本会比较好，因为follower需要去leader那里同步数据，同步数据的过程需要耗费网络，而且需要磁盘空间，但是这个需要根据实际情况考虑），46 * 2 = 92T，保留最近3天的数据。故需要 92 * 3 = 276T";}i:2;i:484;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:874;}i:15;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:876;}i:16;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"2 QPS方面";i:1;i:2;i:2;i:876;}i:2;i:876;}i:17;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:876;}i:18;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:876;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:"部署Kafka，Hadoop，MySQL···等核心分布式系统，一般建议直接采用物理机，抛弃使用一些低配置的虚拟机的想法。";}i:2;i:900;}i:20;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1048;}i:21;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1048;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:342:"高并发这个东西，不可能是说，你需要支撑6万QPS，你的集群就刚好把这6万并发卡的死死的。某一天出一些活动让数据量疯狂上涨，那整个集群就会垮掉。但是，假如说你只要支撑6w QPS，单台物理机本身就能扛住4~5万的并发。所以这时2台物理机绝对绝对够了。";}i:2;i:1050;}i:23;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1392;}i:24;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1392;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:457:"通常是建议，预算充足，尽量是让高峰QPS控制在集群能承载的总QPS的30%左右（也就是集群的处理能力是高峰期的3~4倍这个样子），所以我们搭建的kafka集群能承载的总QPS为20万~30万才是安全的。所以大体上来说，需要5~7台物理机来部署，基本上就很安全了，每台物理机要求吞吐量在每秒4~5万条数据就可以了，物理机的配置和性能也不需要特别高。";}i:2;i:1394;}i:26;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1851;}i:27;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1853;}i:28;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"3 磁盘方面";i:1;i:2;i:2;i:1853;}i:2;i:1853;}i:29;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1853;}i:30;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1881;}i:31;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"3.1 磁盘数量";i:1;i:3;i:2;i:1881;}i:2;i:1881;}i:32;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1881;}i:33;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1881;}i:34;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:"需要5台物理机的情况，需要存储276T的数据，平均下来差不多一台56T的数据。这个具体看磁盘数和盘的大小";}i:2;i:1909;}i:35;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2049;}i:36;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2051;}i:37;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"3.2 SAS还是SSD";i:1;i:3;i:2;i:2051;}i:2;i:2051;}i:38;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2051;}i:39;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2051;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:609:"现在我们需要考虑一个问题：是需要SSD固态硬盘，还是普通机械硬盘？
SSD固态硬盘，比机械硬盘要快，那么到底是快在哪里呢？其实SSD的快主要是快在磁盘随机读写，就要对磁盘上的随机位置来读写的时候，SSD比机械硬盘要快。比如说MySQL这种就应该使用SSD了（MySQL需要随机读写）。比如说我们在规划和部署线上系统的MySQL集群的时候，一般来说必须用SSD，性能可以提高很多，这样MySQL可以承载的并发请求量也会高很多，而且SQL语句执行的性能也会提高很多。";}i:2;i:2079;}i:41;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2688;}i:42;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2688;}i:43;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2690;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:193:"因为写磁盘的时候kafka是顺序写的。机械硬盘顺序写的性能机会跟内存读写的性能是差不多的，所以对于Kafka集群来说其实使用机械硬盘就可以了。";}i:2;i:2692;}i:45;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2885;}i:46;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2887;}i:47;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2887;}i:48;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:"如果是需要自己创业或者是在公司成本不足的情况下，经费是能够缩减就尽量缩减的。";}i:2;i:2889;}i:49;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3003;}i:50;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3005;}i:51;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"4 内存角度";i:1;i:2;i:2;i:3005;}i:2;i:3005;}i:52;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3005;}i:53;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3005;}i:54;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:295:"JVM非常怕出现full gc的情况。kafka自身的jvm是用不了过多堆内存的，因为kafka设计就是规避掉用jvm对象来保存数据，避免频繁full gc导致的问题，所以一般kafka自身的jvm堆内存，分配个10G左右就够了，剩下的内存全部留给os cache。";}i:2;i:3033;}i:55;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3328;}i:56;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3328;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:"那服务器需要多少内存呢。我们估算一下，大概有100个topic，所以要保证有100个topic的";}i:2;i:3330;}i:58;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3442;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"leader partition的数据在操作系统的内存里";}i:2;i:3444;}i:60;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3496;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:316:"。100个topic，一个topic有5个partition。那么总共会有500个partition。每个partition的大小是1G（在上一篇中的日志分段存储中规定了.log文件不能超过1个G），我们有2个副本，也就是说要把100个topic的leader partition数据都驻留在内存里需要1000G的内存。";}i:2;i:3498;}i:62;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3814;}i:63;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3814;}i:64;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:584:"我们现在有5台服务器，所以平均下来每天服务器需要200G的内存，但是其实partition的数据我们没必要所有的都要驻留在内存里面，只需要25%的数据在内存就行，200G * 0.25 = 50G就可以了（因为在集群中的生产者和消费者几乎也算是实时的，基本不会出现消息积压太多的情况）。所以一共需要60G（附带上刚刚的10G Kafka服务）的内存，故我们可以挑选64G内存的服务器也行，大不了partition的数据再少一点在内存，当然如果能够提供128G内存那就更好。";}i:2;i:3817;}i:65;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4401;}i:66;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4404;}i:67;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"5 CPU core";i:1;i:2;i:2;i:4404;}i:2;i:4404;}i:68;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:4404;}i:69;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4404;}i:70;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:856:"CPU规划，主要是看你的这个进程里会有多少个线程，线程主要是依托多核CPU来执行的，如果你的线程特别多，但是CPU核很少，就会导致你的CPU负载很高，会导致整体工作线程执行的效率不太高，上一篇的Kafka的网络设计中讲过Kafka的Broker的模型。acceptor线程负责去接入客户端的连接请求，但是他接入了之后其实就会把连接分配给多个processor，默认是3个，但是一般生产环境建议大家还是多加几个，整体可以提升kafka的吞吐量比如说你可以增加到6个，或者是9个。另外就是负责处理请求的线程，是一个线程池，默认是8个线程，在生产集群里，建议大家可以把这块的线程数量稍微多加个2倍~3倍，其实都正常，比如说搞个16个工作线程，24个工作线程。";}i:2;i:4428;}i:71;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5284;}i:72;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5284;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:570:"后台会有很多的其他的一些线程，比如说定期清理7天前数据的线程，Controller负责感知和管控整个集群的线程，副本同步拉取数据的线程，这样算下来每个broker起码会有上百个线程。根据经验4个cpu core，一般来说几十个线程，在高峰期CPU几乎都快打满了。8个cpu core，也就能够比较宽裕的支撑几十个线程繁忙的工作。所以Kafka的服务器一般是建议16核，基本上可以hold住一两百线程的工作。当然如果可以给到32 cpu core那就最好不过了。";}i:2;i:5288;}i:74;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5858;}i:75;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5860;}i:76;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"6 网卡";i:1;i:2;i:2;i:5860;}i:2;i:5860;}i:77;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5860;}i:78;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5860;}i:79;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:388:"现在的网基本就是千兆网卡（1GB / s），还有万兆网卡（10GB / s）。kafka集群之间，broker和broker之间是会做数据同步的，因为leader要同步数据到follower上去，他们是在不同的broker机器上的，broker机器之间会进行频繁的数据同步，传输大量的数据。那每秒两台broker机器之间大概会传输多大的数据量？";}i:2;i:5881;}i:80;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6269;}i:81;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6269;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:307:"高峰期每秒大概会涌入6万条数据，约每天处理10000个请求，每个请求50kb，故每秒约进来488M数据，我们还有副本同步数据，故高峰期的时候需要488M * 2 = 976M/s的网络带宽，所以在高峰期的时候，使用千兆带宽，网络还是非常有压力的。";}i:2;i:6272;}i:83;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6579;}i:84;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6581;}i:85;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"7 Choosing file system";i:1;i:2;i:2;i:6581;}i:2;i:6581;}i:86;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:6581;}i:87;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6581;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:173:"There are many different filesystems available, but the most common choices for local filesystems are either EXT4 (fourth extended file system) or Extents File System (XFS).";}i:2;i:6617;}i:89;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6790;}i:90;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6790;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:442:"XFS outperforms EXT4 for most workloads with minimal tuning required. EXT4 can perform well, but it requires using tuning parameters that are considered less safe. For example, by setting the commit interval to a longer time than the default of five to force less frequent flushes. EXT4 also introduced delayed allocation of blocks, which brings with it a greater chance of data loss and filesystem corruption in the case of a system failure.";}i:2;i:6792;}i:92;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7234;}i:93;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7234;}i:94;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:249:"XFS also has better performance for Kafka’s workload without requiring tuning beyond the automatic tuning performed by the filesystem. It is also more efficient when batching disk writes, all of which combine to give better overall
I/O throughput.";}i:2;i:7237;}i:95;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7486;}i:96;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7486;}i:97;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"Regardless of which filesystem is chosen, it is advisable to set the ";}i:2;i:7488;}i:98;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7557;}i:99;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"noatime mount option for the mount point";}i:2;i:7559;}i:100;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7599;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:". File metadata contains three timestamps:";}i:2;i:7601;}i:102;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7643;}i:103;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:7643;}i:104;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7643;}i:105;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7643;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" creation time (ctime): ";}i:2;i:7648;}i:107;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7672;}i:108;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7672;}i:109;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7672;}i:110;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7672;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" last modified time (mtime):";}i:2;i:7676;}i:112;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7704;}i:113;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7704;}i:114;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7704;}i:115;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7704;}i:116;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:" last access time (atime): It's updated every time a file is read. This generates a large number of disk writes.";}i:2;i:7708;}i:117;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7820;}i:118;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7820;}i:119;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:7820;}i:120;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7820;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:7823;}i:122;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7827;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"atime is not used by Kafka at all";}i:2;i:7829;}i:124;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7862;}i:125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:", so disabling it is safe to do. Setting noatime on the mount will prevent these timestamp updates from happening, but ";}i:2;i:7864;}i:126;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7983;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"will not affect the proper handling of the ctime and mtime attributes";}i:2;i:7985;}i:128;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8054;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:8056;}i:130;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8057;}i:131;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8059;}i:132;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"8. JVM setup";i:1;i:2;i:2;i:8059;}i:2;i:8059;}i:133;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:8059;}i:134;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8059;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:411:"As we use JDK 8 for running Kafka. The best GC to collect garbage is G1. The Garbage First (or G1) garbage collector is designed to automatically adjust to different workloads and provide consistent pause times for garbage collection over the lifetime of the application. It also handles large heap sizes with ease by segmenting the heap into smaller zones and not collecting over the entire heap in each pause.";}i:2;i:8084;}i:136;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8495;}i:137;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8495;}i:138;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:"There are two configuration options for G1 used to adjust its performance:";}i:2;i:8497;}i:139;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8571;}i:140;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:8571;}i:141;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8571;}i:142;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8571;}i:143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8575;}i:144;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8576;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"MaxGCPauseMillis";}i:2;i:8578;}i:146;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8594;}i:147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:330:": This option specifies the preferred pause time for each garbage-collection cycle. This value defaults to 200 milliseconds. This means that G1 will attempt to schedule the frequency of GC cycles, as well as the number of zones that are collected in each cycle, such that each cycle will take approximately 200ms(can be exceeded).";}i:2;i:8596;}i:148;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8926;}i:149;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8926;}i:150;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8926;}i:151;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8926;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8930;}i:153;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8931;}i:154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"InitiatingHeapOccupancyPercent";}i:2;i:8933;}i:155;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8963;}i:156;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:296:": This option specifies the percentage of the total heap that may be in use before G1 will start a collection cycle. The default value is 45. This means that G1 will not start a collection cycle until after 45% of the heap is in use. This includes both the new (Eden) and old zone usage in total.";}i:2;i:8965;}i:157;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9261;}i:158;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9261;}i:159;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:9261;}i:160;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9261;}i:161;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:9264;}i:162;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"The GC tuning options have been tested for a server with 64 ";}i:2;i:9266;}i:163;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"GB";}i:2;i:9326;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:220:" of memory. Running Kafka in a 5GB heap, MaxGCPauseMillis = 20 ms(less application pause time than default), and InitiatingHeapOccupancyPercent = 35(garbage collection to run slightly earlier than with the default value)";}i:2;i:9328;}i:165;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:9548;}i:166;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:" can do the job. If you want to give more heap to make it more stable, you can go up to 10GB.";}i:2;i:9550;}i:167;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9643;}i:168;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9643;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"By default, Kafka uses ";}i:2;i:9645;}i:170;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CMS";}i:2;i:9668;}i:171;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:" as default GC, not G1. To modify it, you need to set the following parameter.";}i:2;i:9671;}i:172;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9749;}i:173;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:406:"
# set java home
export JAVA_HOME=/usr/java/jdk1.8.0_51

# set environment var KAFKA_JVM_PERFORMANCE_OPTS, this can be changed with different version of Kafka
export KAFKA_JVM_PERFORMANCE_OPTS="-server -XX:+UseG1GC
-XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35
-XX:+DisableExplicitGC -Djava.awt.headless=true"

# 
bin/kafka-server-start.sh -daemon /usr/local/kafka/config/server.properties
";i:1;N;i:2;N;}i:2;i:9756;}i:174;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10172;}i:175;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"9 Data Center layout";i:1;i:2;i:2;i:10172;}i:2;i:10172;}i:176;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:10172;}i:177;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10172;}i:178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:157:"If you deploy the Kafka Cluster in a data center which has multiple physical racks, or multiple availability zones (if running in a cloud service like AWS). ";}i:2;i:10206;}i:179;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:10363;}i:180;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:"It is recommended to have each Kafka broker in a cluster installed in a different rack";}i:2;i:10365;}i:181;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:10451;}i:182;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:511:", or at the very least not share single points of failure for infrastructure services such as
power and network. This typically means at least deploying the servers that will run brokers with dual power connections (to two different circuits) and dual network switches (with a bonded interface on the servers themselves to failover seamlessly). Even with dual connections, there is a benefit to having brokers in completely separate racks. You can maintain your physical racks without stoping the Kafka cluster.";}i:2;i:10453;}i:183;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10964;}i:184;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10966;}i:185;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"综上描述";i:1;i:2;i:2;i:10966;}i:2;i:10966;}i:186;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:10966;}i:187;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:10991;}i:188;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10991;}i:189;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10991;}i:190;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:" 10亿数据，60k message(50kb)/sec 的吞吐量，276T的数据(7 day retention)，5台物理机";}i:2;i:10995;}i:191;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11093;}i:192;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11093;}i:193;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11093;}i:194;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11093;}i:195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" 硬盘：11（SAS） * 7T，7200转";}i:2;i:11097;}i:196;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11133;}i:197;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11133;}i:198;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11133;}i:199;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11133;}i:200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:" 内存：64GB/128GB，JVM分配10G，剩余的给os cache";}i:2;i:11137;}i:201;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11195;}i:202;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11195;}i:203;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11195;}i:204;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11195;}i:205;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" CPU：16核/32核";}i:2;i:11199;}i:206;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11217;}i:207;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11217;}i:208;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11217;}i:209;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11217;}i:210;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" 网络：千兆网卡，万兆更好";}i:2;i:11221;}i:211;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11258;}i:212;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11258;}i:213;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:11258;}i:214;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11260;}i:215;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:11260;}}