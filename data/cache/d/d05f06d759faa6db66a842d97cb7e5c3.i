a:292:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"Machine learning Introduction";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:46;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"what is Machine learning?";i:1;i:2;i:2;i:46;}i:2;i:46;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:46;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:46;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:179:"The first definition given by by Arthur Samuel in 1959: “Machine Learning is the field of study that gives computers the ability to learn without being explicitly programmed.”";}i:2;i:86;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:265;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:265;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:316:"And more recently, in 1997, Tom Mitchell gave a “well-posed” definition that has proven more useful to engineering types: “A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.”";}i:2;i:267;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:583;}i:12;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:583;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:191:"“A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.” ";}i:2;i:585;}i:14;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:776;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:" Tom Mitchell, Carnegie Mellon University";}i:2;i:778;}i:16;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:819;}i:17;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:822;}i:18;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:46:"Examples of machine learning problems include,";i:1;i:2;i:2;i:822;}i:2;i:822;}i:19;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:822;}i:20;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:883;}i:21;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:883;}i:22;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:883;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" “Is this cancer?”, ";}i:2;i:887;}i:24;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:911;}i:25;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:911;}i:26;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:911;}i:27;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:911;}i:28;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" “What is the market value of this house?”, ";}i:2;i:915;}i:29;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:963;}i:30;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:963;}i:31;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:963;}i:32;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:963;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" “Which of these people are good friends with each other?”, ";}i:2;i:967;}i:34;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1031;}i:35;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1031;}i:36;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1031;}i:37;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1031;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:" “Will this rocket engine explode on take off?”, ";}i:2;i:1035;}i:39;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1088;}i:40;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1088;}i:41;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1088;}i:42;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1088;}i:43;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:" “Will this person like this movie?”, ";}i:2;i:1092;}i:44;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1134;}i:45;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1134;}i:46;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1134;}i:47;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1134;}i:48;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:" “How do you fly this thing?”. ";}i:2;i:1138;}i:49;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1173;}i:50;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1173;}i:51;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1173;}i:52;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1173;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:"All of these problems are excellent targets for an ML project, and in fact ML has been applied to each of them with great success.";}i:2;i:1175;}i:54;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1305;}i:55;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1307;}i:56;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:32:"Different machine learning types";i:1;i:2;i:2;i:1307;}i:2;i:1307;}i:57;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1307;}i:58;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1307;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:115:"Among the different types of ML tasks, a crucial distinction is drawn between supervised and unsupervised learning:";}i:2;i:1354;}i:60;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1470;}i:61;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1470;}i:62;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1470;}i:63;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1470;}i:64;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:194:" Supervised machine learning: The program is “trained” on a pre-defined set of “training examples”, which then facilitate its ability to reach an accurate conclusion when given new data.";}i:2;i:1474;}i:65;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1668;}i:66;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1668;}i:67;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1668;}i:68;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1668;}i:69;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:118:" Unsupervised machine learning: The program is given a bunch of data and must find patterns and relationships therein.";}i:2;i:1672;}i:70;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1790;}i:71;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1790;}i:72;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1790;}i:73;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1790;}i:74;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"There are other more complex types of ML,";}i:2;i:1792;}i:75;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1833;}i:76;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1833;}i:77;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1833;}i:78;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1833;}i:79;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" Reinforcement learning from ";}i:2;i:1838;}i:80;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1867;}i:81;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1867;}i:82;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1867;}i:83;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1867;}i:84;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" Deep learning";}i:2;i:1871;}i:85;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1885;}i:86;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1885;}i:87;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1885;}i:88;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1887;}i:89;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"Different machine learning algo";i:1;i:2;i:2;i:1887;}i:2;i:1887;}i:90;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1887;}i:91;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1887;}i:92;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"The common used algorithm in ML";}i:2;i:1932;}i:93;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1963;}i:94;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1963;}i:95;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1963;}i:96;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1963;}i:97;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" Linear regression";}i:2;i:1968;}i:98;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1986;}i:99;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1986;}i:100;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1986;}i:101;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1986;}i:102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" Logistic regression";}i:2;i:1990;}i:103;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2010;}i:104;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2010;}i:105;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2010;}i:106;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2010;}i:107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" Decision Tree";}i:2;i:2014;}i:108;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2028;}i:109;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2028;}i:110;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2028;}i:111;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2028;}i:112;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" Support Vector machine (SVM)";}i:2;i:2032;}i:113;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2061;}i:114;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2061;}i:115;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2061;}i:116;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2061;}i:117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" Naive Bayes classifiers";}i:2;i:2065;}i:118;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2089;}i:119;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2089;}i:120;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2089;}i:121;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2089;}i:122;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" K-NearestNeighbor (KNN)";}i:2;i:2093;}i:123;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2117;}i:124;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2117;}i:125;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2117;}i:126;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2117;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" K-means clustering";}i:2;i:2121;}i:128;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2140;}i:129;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2140;}i:130;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2140;}i:131;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2140;}i:132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" Random decision forests";}i:2;i:2144;}i:133;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2168;}i:134;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2168;}i:135;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2168;}i:136;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2168;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" Dimension reduction (Two branch: Feature selection and Feature extraction)";}i:2;i:2172;}i:138;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2247;}i:139;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2247;}i:140;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2247;}i:141;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2247;}i:142;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" Gradient Boost ";}i:2;i:2251;}i:143;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2267;}i:144;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2267;}i:145;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2267;}i:146;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2267;}i:147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Adaboost";}i:2;i:2271;}i:148;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2280;}i:149;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2280;}i:150;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:2280;}i:151;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2284;}i:152;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"Supervised Machine Learning";i:1;i:2;i:2;i:2284;}i:2;i:2284;}i:153;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:2284;}i:154;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2284;}i:155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:437:"In the majority of supervised learning applications, the ultimate goal is to develop a finely tuned predictor function h(x) (sometimes called the “hypothesis”). “Learning” consists of using sophisticated mathematical algorithms to optimize this function so that, given input data x about a certain domain (say, square footage of a house), it will accurately predict some interesting value h(x) (say, market price for said house).";}i:2;i:2327;}i:156;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2764;}i:157;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2764;}i:158;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:432:"In practice, x almost always represents multiple data points. So, for example, a housing price predictor might take not only square-footage (x1) but also number of bedrooms (x2), number of bathrooms (x3), number of floors (x4), year built (x5), zip code (x6), and so forth. Determining which inputs to use is an important part of ML design. However, for the sake of explanation, it is easiest to assume a single input value is used.";}i:2;i:2766;}i:159;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3198;}i:160;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3198;}i:161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:"So let’s say our simple predictor has this form:";}i:2;i:3200;}i:162;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3250;}i:163;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3250;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:"h of x equals theta 0 plus theta 1 times x : h(x)=T0+T1x";}i:2;i:3252;}i:165;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3308;}i:166;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3308;}i:167;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:160:"where theta 0 (T0) and theta 1 (T1) are constants. Our goal is to find the perfect values of theta 0 and theta 1 to make our predictor work as well as possible.";}i:2;i:3310;}i:168;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3470;}i:169;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3470;}i:170;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:708:"Optimizing the predictor h(x) is done using training examples. For each training example, we have an input value x_train, for which a corresponding output, y, is known in advance. 
For each example, we find the difference between the known, correct value y, and our predicted value h(x_train). With enough training examples, these differences give us a useful way to measure the “wrongness” of h(x). 
We can then tweak h(x) by tweaking the values of theta 0 and theta 1 to make it “less wrong”. This process is repeated over and over until the system has converged on the best values for theta 0 and theta 1. In this way, 
the predictor becomes trained, and is ready to do some real-world predicting.";}i:2;i:3473;}i:171;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4181;}i:172;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4181;}i:173;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"Machine Learning Regression: A Note on Complexity";}i:2;i:4184;}i:174;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4233;}i:175;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4233;}i:176;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:253:"The above example is technically a simple problem of univariate linear regression, which in reality can be solved by deriving a simple normal equation and skipping this “tuning” process altogether. However, consider a predictor that looks like this:";}i:2;i:4235;}i:177;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4488;}i:178;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4488;}i:179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"Four dimensional equation example";}i:2;i:4490;}i:180;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4523;}i:181;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4523;}i:182;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:446:"This function takes input in four dimensions and has a variety of polynomial terms. Deriving a normal equation for this function is a significant challenge. Many modern machine learning problems take thousands or even millions of dimensions of data to build predictions using hundreds of coefficients. Predicting how an organism’s genome will be expressed, or what the climate will be like in fifty years, are examples of such complex problems.";}i:2;i:4525;}i:183;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4971;}i:184;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4971;}i:185;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:524:"Many modern ML problems take thousands or even millions of dimensions of data to build predictions using hundreds of coefficients.
Fortunately, the iterative approach taken by ML systems is much more resilient in the face of such complexity. Instead of using brute force, a machine learning system “feels its way” to the answer. For big problems, this works much better. While this doesn’t mean that ML can solve all arbitrarily complex problems (it can’t), it does make for an incredibly flexible and powerful tool.";}i:2;i:4973;}i:186;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5497;}i:187;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5501;}i:188;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:54:"Two major subcategories of supervised Machine learning";i:1;i:3;i:2;i:5501;}i:2;i:5501;}i:189;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5501;}i:190;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5501;}i:191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"Under supervised ML, two major subcategories are:";}i:2;i:5569;}i:192;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5618;}i:193;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5618;}i:194;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:196:"- Regression machine learning systems: Systems where the value being predicted falls somewhere on a continuous spectrum. These systems help us with questions of “How much?” or “How many?”.";}i:2;i:5620;}i:195;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5816;}i:196;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5816;}i:197;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:191:"- Classification machine learning systems: Systems where we seek a yes-or-no prediction, such as “Is this tumer cancerous?”, “Does this cookie meet our quality standards?”, and so on.";}i:2;i:5818;}i:198;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6009;}i:199;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6011;}i:200;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:54:"Classification problems in supervised Machine learning";i:1;i:4;i:2;i:6011;}i:2;i:6011;}i:201;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:6011;}i:202;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6011;}i:203;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:829:"In classification, a regression predictor is not very useful. What we usually want is a predictor that makes a guess somewhere between 0 and 1. In a cookie quality classifier, a prediction of 1 would represent a very confident guess that the cookie is perfect and utterly mouthwatering. A prediction of 0 represents high confidence that the cookie is an embarrassment to the cookie industry. Values falling within this range represent less confidence, so we might design our system such that prediction of 0.6 means “Man, that’s a tough call, but I’m gonna go with yes, you can sell that cookie,” while a value exactly in the middle, at 0.5, might represent complete uncertainty. This isn’t always how confidence is distributed in a classifier but it’s a very common design and works for purposes of our illustration.";}i:2;i:6075;}i:204;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6904;}i:205;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6904;}i:206;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:"It turns out there’s a nice function that captures this behavior well. It’s called the sigmoid function, g(z), and it looks something like this:";}i:2;i:6906;}i:207;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7054;}i:208;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7054;}i:209;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"h of x equals g of z.";}i:2;i:7056;}i:210;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7077;}i:211;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7079;}i:212;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"Classification work flow";i:1;i:5;i:2;i:7079;}i:2;i:7079;}i:213;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:7079;}i:214;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7079;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Identify feature data ";}i:2;i:7111;}i:216;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:7133;}i:217;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" prepare training data ";}i:2;i:7135;}i:218;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:7158;}i:219;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" train the classifier ";}i:2;i:7160;}i:220;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:7182;}i:221;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" test the accuracy of the classifier ";}i:2;i:7184;}i:222;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:7221;}i:223;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:" if bad accuracy, add new feature or remove bad feature data and repeat the process. ";}i:2;i:7223;}i:224;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7308;}i:225;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7311;}i:226;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:42:"features selection Classification problems";i:1;i:5;i:2;i:7311;}i:2;i:7311;}i:227;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:7311;}i:228;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7311;}i:229;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:207:"- informative : The feature data must help classifier to separate different class. Like skin color of appel and orange can be usefull feature. But color of strawberry and cherry are not usefull feature data.";}i:2;i:7363;}i:230;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7570;}i:231;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7570;}i:232;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:225:"- independent : Each feature data must be independent. For example, if we have weight of orange and appel in kg and g both as feature data. The classifier may take weight more than it is. This can make classifier inaccurate. ";}i:2;i:7572;}i:233;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7797;}i:234;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7797;}i:235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:263:"- simple : Simple feature data can make classifier more accurate. for example, the distance of two city is  the feature data to determine how long a mail will arrive. If you replace distance by gps location. It will be harder for classifier to determine how long.";}i:2;i:7799;}i:236;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8062;}i:237;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8064;}i:238;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:50:"Regression problems in supervised machine learning";i:1;i:4;i:2;i:8064;}i:2;i:8064;}i:239;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:8064;}i:240;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8126;}i:241;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"Most common used algo in sml:";i:1;i:3;i:2;i:8126;}i:2;i:8126;}i:242;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:8126;}i:243;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:8166;}i:244;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8166;}i:245;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8166;}i:246;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" Linear regression";}i:2;i:8170;}i:247;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8188;}i:248;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8188;}i:249;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8188;}i:250;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8188;}i:251;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" Logistic regression";}i:2;i:8192;}i:252;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8212;}i:253;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8212;}i:254;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8212;}i:255;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8212;}i:256;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" Decision Tree";}i:2;i:8216;}i:257;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8230;}i:258;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8230;}i:259;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8230;}i:260;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8230;}i:261;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" Support Vector machine (SVM)";}i:2;i:8234;}i:262;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8263;}i:263;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8263;}i:264;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8263;}i:265;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8263;}i:266;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" KNN";}i:2;i:8267;}i:267;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8271;}i:268;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8271;}i:269;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8271;}i:270;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8271;}i:271;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" Random forest";}i:2;i:8275;}i:272;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8289;}i:273;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8289;}i:274;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:8289;}i:275;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8292;}i:276;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"Unsupervised Machine Learning";i:1;i:2;i:2;i:8292;}i:2;i:8292;}i:277;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:8292;}i:278;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8292;}i:279;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:324:"Unsupervised machine learning is typically tasked with finding relationships within data. There are no training examples used in this process. Instead, the system is given a set data and tasked with finding patterns and correlations therein. A good example is identifying close-knit groups of friends in social network data.";}i:2;i:8336;}i:280;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8660;}i:281;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8660;}i:282;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:423:"The Machine Learning algorithms used to do this are very different from those used for supervised learning, and the topic merits its own post. However, for something to chew on in the meantime, take a look at clustering algorithms such as k-means, and also look into dimensionality reduction systems such as principle component analysis. Our prior post on big data discusses a number of these topics in more detail as well.";}i:2;i:8662;}i:283;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9085;}i:284;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9087;}i:285;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Deep learning";i:1;i:2;i:2;i:9087;}i:2;i:9087;}i:286;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:9087;}i:287;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9114;}i:288;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Reinforced learning";i:1;i:2;i:2;i:9114;}i:2;i:9114;}i:289;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:9114;}i:290;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9147;}i:291;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:9147;}}