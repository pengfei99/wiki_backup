a:395:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"Lesson04: Spark Core and RDD";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"The foundation of Spark Core are:";}i:2;i:45;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:78;}i:6;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:78;}i:7;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:78;}i:8;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:78;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:" The distributed computing infrastructure";}i:2;i:82;}i:10;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:123;}i:11;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:123;}i:12;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:123;}i:13;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:123;}i:14;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" The RDD programming abstraction.";}i:2;i:127;}i:15;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:160;}i:16;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:160;}i:17;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:160;}i:18;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:163;}i:19;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"4.1 Introduction of RDD";i:1;i:2;i:2;i:163;}i:2;i:163;}i:20;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:163;}i:21;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:163;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:116:"RDDs represent both the idea of how a large dataset is represented in Spark and the abstraction for working with it.";}i:2;i:200;}i:23;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:316;}i:24;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:316;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"RDDs are:";}i:2;i:318;}i:26;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:327;}i:27;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:327;}i:28;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:327;}i:29;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:327;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" immutable, ";}i:2;i:331;}i:31;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:343;}i:32;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:343;}i:33;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:343;}i:34;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:343;}i:35;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" fault-tolerant,";}i:2;i:347;}i:36;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:363;}i:37;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:363;}i:38;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:363;}i:39;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:363;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" parallel data structures";}i:2;i:367;}i:41;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:392;}i:42;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:392;}i:43;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:392;}i:44;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:392;}i:45;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" in-memory storage and computation";}i:2;i:396;}i:46;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:430;}i:47;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:430;}i:48;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:430;}i:49;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:430;}i:50;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" Data Partitioning and Placement";}i:2;i:434;}i:51;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:467;}i:52;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:467;}i:53;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:467;}i:54;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:467;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" rich set of operators.  ";}i:2;i:471;}i:56;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:496;}i:57;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:496;}i:58;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:496;}i:59;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:498;}i:60;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"4.1.1 Immutable";i:1;i:3;i:2;i:498;}i:2;i:498;}i:61;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:498;}i:62;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:498;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:406:"RDDs are designed to be immutable, which means you can’t specifically modify a particular row in the dataset represented by that RDD. The RDD operations that manipulate the rows in the RDD will return a new RDD. The source RDD is unchanged. The immutability of RDDs essentially requires an RDD to carry its lineage information that Spark leverages to efficiently provide the fault tolerance capability.";}i:2;i:525;}i:64;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:931;}i:65;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:933;}i:66;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"4.1.2 Fault Tolerant";i:1;i:3;i:2;i:933;}i:2;i:933;}i:67;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:933;}i:68;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:933;}i:69;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:425:"The ability to process multiple datasets in parallel usually requires a cluster of machines to host and execute the computational logic. If one or more of those machines dies or becomes extremely slow because of unexpected circumstances, Spark automatically takes care of handling the failure on behalf of its users by rebuilding the failed portion using the lineage information, which will be discussed later in this Lesson.";}i:2;i:965;}i:70;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1390;}i:71;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1393;}i:72;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:30:"4.1.3 Parallel Data Structures";i:1;i:3;i:2;i:1393;}i:2;i:1393;}i:73;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1393;}i:74;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1393;}i:75;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:584:"Imagine the use case where someone gives you a large log file that is 1TB size and you are asked to find out how many log statements contain the word exception in it. A slow solution would be to iterate through that logfile from the beginning to the end and execute the logic of determining whether a particular log statement contains the word exception. A faster solution would be to divide that 1TB file into several chunks and execute the aforementioned logic on each chunk in a parallelized manner to speed up the overall processing time. Each chunk contains a collection of rows.";}i:2;i:1435;}i:76;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2019;}i:77;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2019;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:291:"The collection of rows is essentially the data structure that holds a set of rows and provides the ability to iterate through each row. Each chunk contains a collection of rows, and all the chunks are being processed in parallel. This is where the phrase parallel data structures comes from.";}i:2;i:2021;}i:79;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2312;}i:80;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2314;}i:81;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"4.1.4 In-Memory Computing";i:1;i:3;i:2;i:2314;}i:2;i:2314;}i:82;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2314;}i:83;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2314;}i:84;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2351;}i:85;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"RDDs are stored in Memory, not in a disk.";}i:2;i:2353;}i:86;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2394;}i:87;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2396;}i:88;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2396;}i:89;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:528:"Machine learning algorithms are iterative in nature, meaning they need to go through many iterations to arrive at an optimal state. This is where distributed in-memory computation can help in reducing the completion time from days to hours. Another use case that can hugely benefit from distributed in-memory computation is interactive data mining, where multiple ad hoc queries are performed on the same subset of data. If that subset of data is persisted in memory, those queries will take seconds and not minutes to complete.";}i:2;i:2399;}i:90;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2927;}i:91;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2929;}i:92;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"4.1.5 Data Partitioning and Placement";i:1;i:3;i:2;i:2929;}i:2;i:2929;}i:93;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2929;}i:94;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2929;}i:95;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:243:"The information about how the rows in a dataset are partitioned into chunks and about their physical location is considered to be the dataset metadata. This information helps Spark perform optimizations while executing the computational logic.";}i:2;i:2979;}i:96;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3222;}i:97;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3222;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:355:"For example, while joining two datasets, the data partition information is useful to determine whether it is necessary to move the rows from various chunks of the two datasets to the same location to perform the join. Moving data across machines is an expensive operation, and therefore minimizing it would dramatically reduce the overall
processing time.";}i:2;i:3224;}i:99;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3579;}i:100;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3579;}i:101;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3581;}i:102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:134:"Data placement information helps to reinforce the data locality concept, which means bringing the computation to where the data lives.";}i:2;i:3583;}i:103;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3717;}i:104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:274:" Knowing where the chunks are located on a cluster, Spark can use those machines to host and execute the computational logic on those chunks, and therefore the time to read the rows from those chunks would be much less than reading them from a different node on the cluster.";}i:2;i:3719;}i:105;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3993;}i:106;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3995;}i:107;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"4.1.6 Rich Set of Operations";i:1;i:3;i:2;i:3995;}i:2;i:3995;}i:108;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3995;}i:109;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3995;}i:110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:"RDDs provide a rich set of commonly needed data processing operations. They include the ability to perform";}i:2;i:4036;}i:111;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4142;}i:112;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:4142;}i:113;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4142;}i:114;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4142;}i:115;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" data transformation";}i:2;i:4147;}i:116;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4167;}i:117;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4167;}i:118;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4167;}i:119;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4167;}i:120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" filtering";}i:2;i:4171;}i:121;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4181;}i:122;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4181;}i:123;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4181;}i:124;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4181;}i:125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" grouping";}i:2;i:4185;}i:126;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4194;}i:127;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4194;}i:128;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4194;}i:129;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4194;}i:130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" joining";}i:2;i:4198;}i:131;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4206;}i:132;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4206;}i:133;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4206;}i:134;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4206;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" aggregation";}i:2;i:4210;}i:136;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4222;}i:137;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4222;}i:138;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4222;}i:139;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4222;}i:140;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" sorting";}i:2;i:4226;}i:141;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4234;}i:142;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4234;}i:143;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4234;}i:144;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4234;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" counting";}i:2;i:4238;}i:146;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4247;}i:147;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4247;}i:148;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:4247;}i:149;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4247;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:"These operations operate at the coarse-grained level, meaning the same operation is applied to many rows, not to any specific row.";}i:2;i:4249;}i:151;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4379;}i:152;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4379;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:"In summary, an RDD is represented as an abstraction and is defined by the following five pieces of information:";}i:2;i:4381;}i:154;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4492;}i:155;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:4492;}i:156;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4492;}i:157;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4492;}i:158;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" A set of partitions, which are the chunks that make up the entire dataset";}i:2;i:4496;}i:159;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4570;}i:160;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4570;}i:161;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4570;}i:162;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4570;}i:163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" A set of dependencies on parent RDDs";}i:2;i:4574;}i:164;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4611;}i:165;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4611;}i:166;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4611;}i:167;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4611;}i:168;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:" A function for computing all the rows in the data set";}i:2;i:4615;}i:169;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4669;}i:170;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4669;}i:171;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4669;}i:172;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4669;}i:173;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" Metadata about the partitioning scheme (optional)";}i:2;i:4673;}i:174;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4723;}i:175;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4723;}i:176;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4723;}i:177;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4723;}i:178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:" Where the data lives on the cluster (optional); if the data lives on HDFS, then it would be where the block locations are located";}i:2;i:4727;}i:179;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4857;}i:180;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4857;}i:181;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:4857;}i:182;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4857;}i:183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"The Spark runtime uses these ";}i:2;i:4859;}i:184;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4888;}i:185;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:"five pieces of information to schedule and execute the user data processing logic";}i:2;i:4890;}i:186;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4971;}i:187;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:" that is expressed via the RDD operations.";}i:2;i:4973;}i:188;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5015;}i:189;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5015;}i:190;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:5017;}i:191;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:5021;}i:192;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"first three pieces of information make up the lineage information";}i:2;i:5023;}i:193;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:5088;}i:194;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:", which Spark uses for two purposes:";}i:2;i:5090;}i:195;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5126;}i:196;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:5126;}i:197;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5126;}i:198;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5126;}i:199;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" Determining the order of execution of RDDs";}i:2;i:5133;}i:200;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5176;}i:201;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5176;}i:202;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:5176;}i:203;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5176;}i:204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" For failure recovery purposes.";}i:2;i:5180;}i:205;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5211;}i:206;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5211;}i:207;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:5211;}i:208;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5213;}i:209;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"4.2 RDD operations";i:1;i:2;i:2;i:5213;}i:2;i:5213;}i:210;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5213;}i:211;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5213;}i:212;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:357:"Each row in an RDD is represented as a Java object, and the structure of this Java object is opaque/unknown to Spark. The user of RDD has complete control over how to manipulate this Java object. This flexibility comes with a lot of responsibilities, meaning some of the commonly needed operations such as the computing average will have to be hand-crafted.";}i:2;i:5245;}i:213;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5602;}i:214;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5602;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"The RDD operations are classified into two types:";}i:2;i:5604;}i:216;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5653;}i:217;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:5653;}i:218;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5653;}i:219;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5653;}i:220;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" transformations";}i:2;i:5658;}i:221;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5674;}i:222;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5674;}i:223;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5674;}i:224;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5674;}i:225;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" actions.";}i:2;i:5678;}i:226;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5687;}i:227;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5687;}i:228;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:5687;}i:229;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:3;i:2;i:5689;}i:2;i:5688;}i:230;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:5688;}i:231;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5688;}i:232;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5688;}i:233;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"Type";}i:2;i:5690;}i:234;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:5694;}i:235;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5694;}i:236;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" Evaluation ";}i:2;i:5695;}i:237;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:5707;}i:238;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5707;}i:239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"Returned Value";}i:2;i:5708;}i:240;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:5722;}i:241;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5723;}i:242;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:5723;}i:243;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5723;}i:244;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5723;}i:245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"transformation ";}i:2;i:5725;}i:246;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5740;}i:247;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5740;}i:248;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" lazy ";}i:2;i:5741;}i:249;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5747;}i:250;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5747;}i:251;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" another RDD ";}i:2;i:5748;}i:252;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5761;}i:253;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5762;}i:254;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5762;}i:255;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5762;}i:256;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"action ";}i:2;i:5764;}i:257;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5771;}i:258;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5771;}i:259;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"eager ";}i:2;i:5772;}i:260;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5778;}i:261;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5778;}i:262;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"some other result or write the result to disk";}i:2;i:5779;}i:263;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5824;}i:264;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5825;}i:265;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:5825;}i:2;i:5825;}i:266;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5825;}i:267;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:5828;}i:268;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:"Transformation operations are lazily evaluated, meaning Spark will delay the evaluations of the invoked operations until an action is taken";}i:2;i:5830;}i:269;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:5969;}i:270;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:342:". In other words, the transformation operations merely record the specified transformation logic and will apply them at a later point. On the other hand, invoking an action operation will trigger the evaluation of all the transformations that preceded it, and it will either return some result to the driver or write data to a storage system.";}i:2;i:5971;}i:271;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6313;}i:272;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6315;}i:273;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"4.2.1 RDD creation";i:1;i:3;i:2;i:6315;}i:2;i:6315;}i:274;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6315;}i:275;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6315;}i:276;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:391:"Since RDD is an abstract class, you cannot create an instance of the RDD class directly. The SparkContext class provides factory methods to create instances of concrete implementation classes. An RDD can also be created from another RDD by applying a transformation to it. As discussed earlier, RDDs are immutable. Any operation that modifies an RDD returns a new RDD with the modified data.";}i:2;i:6344;}i:277;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6735;}i:278;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6735;}i:279;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"There are three main ways to create an RDD:";}i:2;i:6737;}i:280;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6780;}i:281;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:6780;}i:282;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6780;}i:283;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6780;}i:284;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" RDDs creation with in memory collection of objects";}i:2;i:6784;}i:285;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6835;}i:286;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6835;}i:287;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6835;}i:288;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6835;}i:289;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" RDDs creation with files";}i:2;i:6839;}i:290;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6864;}i:291;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6864;}i:292;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6864;}i:293;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6864;}i:294;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" RDDs creation with RDD transformation operations";}i:2;i:6868;}i:295;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6917;}i:296;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6917;}i:297;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:6917;}i:298;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6917;}i:299;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:434:"Spark driver will submit a new job to the executor when it encounters action. Spark's RDD is by default recomputed each time you run an action on them. If you would like to reuse an RDD in multiple actions, you can ask the spark to persist it using RDD.persist(). After computing it the first time Spark will store the RDD contents in memory (partitioned across the machines in your cluster). Persisting RDDs on disk is also possible.";}i:2;i:6919;}i:300;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7353;}i:301;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7353;}i:302;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:268:"The behavior of not persisting by default may again seem unusual, but it makes a lot of sense for big datasets: if you will not reuse the RDD, there’s no reason to waste storage space when Spark could instead stream through the data once and just compute the result.";}i:2;i:7355;}i:303;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7623;}i:304;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7623;}i:305;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"For more details and code example, plz visit ";}i:2;i:7625;}i:306;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:125:"https://github.com/pengfei99/Spark/blob/master/LearningSpark/src/main/java/org/pengfei/Lesson01_RDD/Lesson01_RDD_Basics.scala";i:1;N;}i:2;i:7670;}i:307;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:7795;}i:308;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7796;}i:309;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7796;}i:310;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"4.2.2 RDD Transformation";i:1;i:3;i:2;i:7796;}i:2;i:7796;}i:311;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7796;}i:312;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7796;}i:313;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:162:"Spark Transformation is a function that takes RDD as input and produces one or more RDD as output. Each time it creates new RDD when we apply any transformation. ";}i:2;i:7832;}i:314;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7994;}i:315;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7994;}i:316;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7996;}i:317;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"RDDs transformation are all lazy in spark.";}i:2;i:7998;}i:318;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8040;}i:319;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" They get execute when we call an action";}i:2;i:8042;}i:320;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8082;}i:321;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8082;}i:322;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"Applying transformation built an ";}i:2;i:8084;}i:323;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8117;}i:324;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"RDD lineage";}i:2;i:8119;}i:325;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8130;}i:326;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:", with the entire parent RDDs of the final RDD(s). RDD lineage, also known as ";}i:2;i:8132;}i:327;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8210;}i:328;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"RDD operator graph or RDD dependency graph";}i:2;i:8212;}i:329;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8254;}i:330;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:220:". It is a logical execution plan(i.e. it is Directed Acyclic Graph (DAG) of the entire parent RDDs of the final result RDD). After the transformation, the resultant RDD is always different from its parent RDD. It can be:";}i:2;i:8256;}i:331;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8476;}i:332;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:8476;}i:333;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8476;}i:334;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8476;}i:335;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" smaller (e.g. filter, count, distinct, sample)";}i:2;i:8481;}i:336;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8528;}i:337;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8528;}i:338;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8528;}i:339;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8528;}i:340;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" bigger (e.g. flatMap(), union(), Cartesian())";}i:2;i:8532;}i:341;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8578;}i:342;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8578;}i:343;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8578;}i:344;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8578;}i:345;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" same size (e.g. map).";}i:2;i:8582;}i:346;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8604;}i:347;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8604;}i:348;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:8604;}i:349;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8604;}i:350;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"There are two types of transformations:";}i:2;i:8606;}i:351;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8646;}i:352;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:8646;}i:353;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8646;}i:354;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8646;}i:355;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8650;}i:356;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8651;}i:357;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"Narrow transformation";}i:2;i:8653;}i:358;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8674;}i:359;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:218:": In Narrow transformation, all the elements that are required to compute the records in single partition live in the single partition of the parent RDD. A limited subset of partition is used to calculate the result.  ";}i:2;i:8676;}i:360;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8894;}i:361;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:"map(), flatMap(), mapPartition(), filter(), sample(), union() are the narrow transformations.";}i:2;i:8896;}i:362;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8989;}i:363;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8991;}i:364;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8991;}i:365;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8991;}i:366;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8991;}i:367;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8995;}i:368;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8996;}i:369;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Wide transformation";}i:2;i:8998;}i:370;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:9017;}i:371;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:208:": In wide transformation, all the elements that are required to compute the records in the single partition may live in many partitions of parent RDD. The partition may live in many partitions of parent RDD. ";}i:2;i:9019;}i:372;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:9227;}i:373;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:132:"intersection(), distinct(), groupbyKey(), reducebyKey(), join(), cartesian(), repartition(), coalesce() are the wide transformations";}i:2;i:9229;}i:374;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:9361;}i:375;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:" .";}i:2;i:9363;}i:376;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9365;}i:377;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9365;}i:378;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:9365;}i:379;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9365;}i:380;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:9367;}i:381;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:"In another word, narrow transformation does not require shuffle, wide transformation require shuffle(create new stage).";}i:2;i:9369;}i:382;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:9488;}i:383;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9490;}i:384;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9490;}i:385;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:68:":employes:pengfei.liu:big_data:spark:spark-narrow-transformation.jpg";i:1;s:0:"";i:2;N;i:3;s:3:"600";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:9492;}i:386;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9569;}i:387;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9569;}i:388;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:66:":employes:pengfei.liu:big_data:spark:spark-wide-transformation.jpg";i:1;s:0:"";i:2;N;i:3;s:3:"600";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:9571;}i:389;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9646;}i:390;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9649;}i:391;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"4.2.3 RDD Action";i:1;i:3;i:2;i:9649;}i:2;i:9649;}i:392;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:9649;}i:393;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9679;}i:394;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:9679;}}