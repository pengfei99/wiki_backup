a:521:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:40:"Zookeeper Installation and configuration";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:57;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Prerequisites";i:1;i:2;i:2;i:57;}i:2;i:57;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:57;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:57;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:"Before you begin this installation and configuration guide, youâ€™ll need the following:";}i:2;i:84;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:173;}i:9;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:173;}i:10;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:173;}i:11;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:173;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:235:" The standalone installation needs one server with a minimum of 4GB of RAM, including a non-root user with sudo privileges and a firewall. You need two additional servers, set up by following the same steps, for the multi-node cluster.";}i:2;i:177;}i:13;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:412;}i:14;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:412;}i:15;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:412;}i:16;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:412;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:" OpenJDK 8 installed on your server, as ZooKeeper requires Java to run. To do this.";}i:2;i:416;}i:18;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:499;}i:19;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:499;}i:20;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:499;}i:21;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:499;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:361:" Because ZooKeeper keeps data in memory to achieve high throughput and low latency, production systems work best with 8GB of RAM. Lower amounts of RAM may lead to JVM swapping, which could cause ZooKeeper server latency. High ZooKeeper server latency could result in issues like client session timeouts that would have an adverse impact on system functionality.";}i:2;i:503;}i:23;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:864;}i:24;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:864;}i:25;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:864;}i:26;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:864;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:"Suppose, we have three servers in the cluster to illustrate this tutorial.";}i:2;i:866;}i:28;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:940;}i:29;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:940;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"hadoop-nn.pengfei.org";}i:2;i:942;}i:31;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:963;}i:32;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:963;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"hadoop-dn1.pengfei.org";}i:2;i:965;}i:34;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:987;}i:35;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:987;}i:36;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"hadoop-dn2.pengfei.org";}i:2;i:989;}i:37;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1011;}i:38;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1013;}i:39;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:37:"Step 1. Creating a User for ZooKeeper";i:1;i:2;i:2;i:1013;}i:2;i:1013;}i:40;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1013;}i:41;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:698:"
# create a user for zookeeper with a home directory (-m)
sudo useradd zk -m

# Set bash as the default shell for the zk user:
sudo usermod --shell /bin/bash zk

# set a password for this user:
sudo passwd zk

# add user to the wheel(centos default sudo group) group(if you use other distribution, you need to change to the default sudoer group name), so it can run commands in a privileged mode:
usermod -aG sudo zk

# if you don't want zk has ssh access, go to /etc/ssh/sshd_config, and add following line
DenyUsers zk

# switch to the zk user. The -l flag invokes a login shell after switching users. A login shell resets environment variables and provides a clean start for the user.
su -l zk

";i:1;N;i:2;N;}i:2;i:1070;}i:42;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1779;}i:43;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:47:"Step 2. Creating a Data Directory for ZooKeeper";i:1;i:2;i:2;i:1779;}i:2;i:1779;}i:44;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1779;}i:45;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1779;}i:46;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:352:"ZooKeeper persists all configuration and state data to disk so it can survive a reboot. In this step, you will create a data directory that ZooKeeper will use to read and write data. You can create the data directory on the local filesystem or on a remote storage drive. This tutorial will focus on creating the data directory on your local filesystem.";}i:2;i:1841;}i:47;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2193;}i:48;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:123:"
# create a directory 
sudo mkir -p /data/zookeeper

# grant zk the ownership to the directory
chown zk:zk /data/zookeeper
";i:1;N;i:2;N;}i:2;i:2200;}i:49;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2333;}i:50;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"Step3 Download zookeeper";i:1;i:2;i:2;i:2333;}i:2;i:2333;}i:51;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:2333;}i:52;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2333;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"You can find the download page 
 ";}i:2;i:2371;}i:54;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:51:"https://zookeeper.apache.org/releases.html#download";i:1;N;}i:2;i:2404;}i:55;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2455;}i:56;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:380:"
# download the latest stable
wget https://miroir.univ-lorraine.fr/apache/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz

# extract the tar ball
tar -xzvf apache-zookeeper-3.6.1-bin.tar.gz

# change the ownership
sudo chown zk:zk -R  zookeeper-3.4.13

# Create a symbolic link using the ln command.
sudo ln -s zookeeper-3.4.13 zookeeper
sudo chown -h zk:zk zookeeper
";i:1;N;i:2;N;}i:2;i:2462;}i:57;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2852;}i:58;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:51:"Step 4. Configuring a single node in stanalone mode";i:1;i:2;i:2;i:2852;}i:2;i:2852;}i:59;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:2852;}i:60;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2852;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:363:"The configuration file will live in the /opt/zookeeper/zookeeper/conf directory. This directory contains a sample configuration file that comes with the ZooKeeper distribution. This sample file, named zoo_sample.cfg, contains the most common configuration parameter definitions and sample values for these parameters. Some of the common parameters are as follows:";}i:2;i:2917;}i:62;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3281;}i:63;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:3281;}i:64;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3281;}i:65;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3281;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:3285;}i:67;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3286;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"dataDir";}i:2;i:3288;}i:69;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3295;}i:70;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:": is the directory used by Zookeeper to store data. ";}i:2;i:3297;}i:71;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3349;}i:72;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3349;}i:73;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3349;}i:74;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3349;}i:75;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:3353;}i:76;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3354;}i:77;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"tickTime";}i:2;i:3356;}i:78;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3364;}i:79;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:175:": sets the length of a tick in milliseconds. A tick is a time unit used by ZooKeeper to measure the length between heartbeats. Minimum session timeouts are twice the tickTime.";}i:2;i:3366;}i:80;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3541;}i:81;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3541;}i:82;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3541;}i:83;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3541;}i:84;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:3545;}i:85;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3546;}i:86;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"clientPort";}i:2;i:3548;}i:87;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3558;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:": The port used to listen for client connections.";}i:2;i:3560;}i:89;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3609;}i:90;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3609;}i:91;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3609;}i:92;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3609;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:3613;}i:94;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3614;}i:95;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"maxClientCnxns";}i:2;i:3616;}i:96;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3630;}i:97;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:": limits the maximum number of client connections.";}i:2;i:3632;}i:98;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3682;}i:99;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3682;}i:100;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:3682;}i:101;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3682;}i:102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:"Create the zoo.cfg file or copy the sample cfg file, then add the following lines";}i:2;i:3685;}i:103;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3766;}i:104;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:73:"
tickTime=2000
dataDir=/data/zookeeper
clientPort=2181
maxClientCnxns=60
";i:1;N;i:2;N;}i:2;i:3773;}i:105;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3773;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:314:"A tickTime of 2000 milliseconds is the suggested interval between heartbeats. A shorter interval could lead to system overhead with limited benefits. Conventionally, ZooKeeper uses port 2181 to listen for client connections. In most situations, 60 allowed client connections are plenty for development and testing.";}i:2;i:3856;}i:107;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4170;}i:108;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4172;}i:109;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:65:"Step 5 Starting ZooKeeper and Testing the Standalone Installation";i:1;i:2;i:2;i:4172;}i:2;i:4172;}i:110;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:4172;}i:111;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:539:"
#start the zookeeper service daemon
sh /opt/zookeeper/zookeeper/bin/zkServer.sh start

#check the daemon status
sh /opt/zookeeper/zookeeper/bin/zkServer.sh status

#for a follower, the output is like this
ZooKeeper JMX enabled by default
Using config: /opt/zookeeper/zookeeper-3.4.10/bin/../conf/zoo.cfg
Mode: follower

#for a leader, the output is like this
ZooKeeper JMX enabled by default
Using config: /opt/zookeeper/zookeeper-3.4.10/bin/../conf/zoo.cfg
Mode: leader

#stop the daemon
sh /opt/zookeeper/zookeeper/bin/zkServer.sh stop
";i:1;N;i:2;N;}i:2;i:4256;}i:112;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4256;}i:113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:"Now we are all set for the zookeeper service, in order to stop or start the zookeeper daemon, you need to execute the shell command on all nodes.";}i:2;i:4805;}i:114;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4950;}i:115;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4950;}i:116;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:"A CLI is available to connect to the server and issue commands. To start it use the command below";}i:2;i:4952;}i:117;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5049;}i:118;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:128:"
# this starts a zookeeper client connect to a zookeeper server
sh /opt/zookeeper/zookeeper/bin/zkCli.sh -server 127.0.0.1:2181
";i:1;N;i:2;N;}i:2;i:5056;}i:119;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5195;}i:120;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:46:"Step 6. Creating and Using a Systemd Unit File";i:1;i:2;i:2;i:5195;}i:2;i:5195;}i:121;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5195;}i:122;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5195;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:223:"The systemd, system and service manager, is an init system used to bootstrap the user space and to manage system processes after boot. You can create a daemon for starting and checking the status of ZooKeeper using systemd.";}i:2;i:5254;}i:124;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5477;}i:125;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5477;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"To know more about systems, ";}i:2;i:5479;}i:127;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:111:"https://www.digitalocean.com/community/tutorials/systemd-essentials-working-with-services-units-and-the-journal";i:1;N;}i:2;i:5507;}i:128;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5618;}i:129;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5618;}i:130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"Use your editor to create a .service file named ";}i:2;i:5620;}i:131;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:5668;}i:132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"zk.service";}i:2;i:5670;}i:133;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:5680;}i:134;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" at ";}i:2;i:5682;}i:135;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:5686;}i:136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"/etc/systemd/system/";}i:2;i:5688;}i:137;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:5708;}i:138;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:5710;}i:139;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5711;}i:140;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:565:"
[Unit]
Description=Zookeeper Daemon
Documentation=http://zookeeper.apache.org
Requires=network.target
After=network.target

[Service]    
Type=forking
WorkingDirectory=/opt/zookeeper/zookeeper
User=zk
Group=zk
ExecStart=/opt/zookeeper/zookeeper/bin/zkServer.sh start /opt/zookeeper/zookeeper/conf/zoo.cfg
ExecStop=/opt/zookeeper/zookeeper/bin/zkServer.sh stop /opt/zookeeper/zookeeper/conf/zoo.cfg
ExecReload=/opt/zookeeper/zookeeper/bin/zkServer.sh restart /opt/zookeeper/zookeeper/conf/zoo.cfg
TimeoutSec=30
Restart=on-failure

[Install]
WantedBy=default.target
";i:1;N;i:2;N;}i:2;i:5718;}i:141;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5718;}i:142;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:207:"The Service section in the unit file configuration specifies the working directory, the user under which the service would run, and the executable commands to start, stop, and restart the ZooKeeper service. ";}i:2;i:6293;}i:143;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6500;}i:144;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6500;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:"Now that your systemd configuration is in place, you can start the service:";}i:2;i:6502;}i:146;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6577;}i:147;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:278:"
sudo systemctl start zk

# enable the service to start on boot.
sudo systemctl enable zk

# Check the status of the ZooKeeper service 
sudo systemctl status zk

# Stop the ZooKeeper service using systemctl
sudo systemctl stop zk

# restart the daemon
sudo systemctl restart zk
";i:1;N;i:2;N;}i:2;i:6584;}i:148;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6871;}i:149;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:50:"Step 7. Multi node Zookeeper cluster Configuration";i:1;i:2;i:2;i:6871;}i:2;i:6871;}i:150;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:6871;}i:151;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6871;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:376:"Nodes in the ZooKeeper cluster that work together as an application form a quorum. Quorum refers to the minimum number of nodes that need to agree on a transaction before itâ€™s committed. A quorum needs an odd number of nodes so that it can establish a majority. An even number of nodes may result in a tie, which would mean the nodes would not reach a majority or consensus.";}i:2;i:6935;}i:153;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7311;}i:154;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7311;}i:155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:"Suppose we have zookeeper installed under /opt/zookeeper/zookeeper on three servers. ";}i:2;i:7314;}i:156;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7399;}i:157;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:300:"
vim /opt/zookeeper/zookeeper-3.4.10/conf/zoo.cfg

#put the following config

tickTime=2000
dataDir=/data/zookeeper
clientPort=2181
maxClientCnxns=60
initLimit=10
syncLimit=5
server.1=hadoop-nn.pengfei.org:2888:3888
server.2=hadoop-dn1.pengfei.org:2888:3888
server.3=hadoop-dn2.pengfei.org:2888:3888
";i:1;N;i:2;N;}i:2;i:7406;}i:158;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:7716;}i:159;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7716;}i:160;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7716;}i:161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:7720;}i:162;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7721;}i:163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"initLimit";}i:2;i:7723;}i:164;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7732;}i:165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:251:": It specifies the time that the initial synchronization phase can take. This is the time within which each of the nodes in the quorum needs to connect to the leader. When you are processing large amounts of data just increase this value as required. ";}i:2;i:7734;}i:166;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7985;}i:167;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7985;}i:168;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7985;}i:169;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7985;}i:170;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:7989;}i:171;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7990;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"syncLimit";}i:2;i:7992;}i:173;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8001;}i:174;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:191:": It specifies the time that can pass between sending a request and receiving an acknowledgment. It is used to fix the allowable amount of time a server can be out of sync with the leader.   ";}i:2;i:8003;}i:175;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8194;}i:176;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8194;}i:177;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8194;}i:178;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8194;}i:179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" The properties ";}i:2;i:8198;}i:180;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8214;}i:181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"server.1";}i:2;i:8216;}i:182;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8224;}i:183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:8226;}i:184;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8228;}i:185;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"server.2";}i:2;i:8230;}i:186;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8238;}i:187;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:8240;}i:188;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8245;}i:189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"server.3";}i:2;i:8247;}i:190;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8255;}i:191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:307:" specify the servers that form the Zookeeper cluster. Then you specify the hostname of each of the servers followed by the port numbers 2888 and 3888. These ports are used for peer to peer communication. The first (2888) followers use to connect to the leader, and the second (3888) is for leader election. ";}i:2;i:8257;}i:192;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8564;}i:193;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8564;}i:194;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:8564;}i:195;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8564;}i:196;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:280:"To make each server aware of the other servers in the ensemble you use a myid file that is placed in the data directory of each server. This file contains only a unique value between 1 and 255 which corresponds to the value specified in zoo.cfg file. For example for server.1 the ";}i:2;i:8566;}i:197;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8846;}i:198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"myid";}i:2;i:8848;}i:199;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8852;}i:200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" file only contains the value 1.";}i:2;i:8854;}i:201;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8886;}i:202;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8886;}i:203;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"In our example, the ";}i:2;i:8888;}i:204;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8908;}i:205;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"myid";}i:2;i:8910;}i:206;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8914;}i:207;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" file should be under ";}i:2;i:8916;}i:208;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8938;}i:209;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"/data/zookeeper";}i:2;i:8940;}i:210;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8955;}i:211;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8957;}i:212;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8960;}i:213;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:54:"Step 8 Running and Testing the Multi-Node Installation";i:1;i:2;i:2;i:8960;}i:2;i:8960;}i:214;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:8960;}i:215;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8960;}i:216;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:"With each node configured to work as a cluster, you are ready to start a quorum. In this step, you will start the quorum on each node and then test your cluster by creating sample data in ZooKeeper.";}i:2;i:9028;}i:217;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9226;}i:218;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9226;}i:219;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:138:"To start a quorum node, first change to the /opt/zookeeper/zookeeper directory on each node and start the node with the following command:";}i:2;i:9228;}i:220;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9366;}i:221;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:174:"
java -cp zookeeper-3.4.13.jar:lib/log4j-1.2.17.jar:lib/slf4j-log4j12-1.7.25.jar:lib/slf4j-api-1.7.25.jar:conf org.apache.zookeeper.server.quorum.QuorumPeerMain conf/zoo.cfg
";i:1;N;i:2;N;}i:2;i:9373;}i:222;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9373;}i:223;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:233:"As nodes start up, you will intermittently see some connection errors followed by a stage where they join the quorum and elect a leader among themselves. After a few seconds of initialization, you can start testing your installation.";}i:2;i:9557;}i:224;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9790;}i:225;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9790;}i:226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:"Now connect to a zk node with your client and create a znode and delete it.";}i:2;i:9792;}i:227;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9867;}i:228;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9869;}i:229;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:30:"Advance zookeepr configuration";i:1;i:1;i:2;i:9869;}i:2;i:9869;}i:230;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:9869;}i:231;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9915;}i:232;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"1 Storage configuration";i:1;i:2;i:2;i:9915;}i:2;i:9915;}i:233;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:9915;}i:234;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:9951;}i:235;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9951;}i:236;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9951;}i:237;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9955;}i:238;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:9956;}i:239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"dataLogDir";}i:2;i:9958;}i:240;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:9968;}i:241;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" : This is the directory where the ZooKeeper transaction logs are stored. ";}i:2;i:9970;}i:242;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:10044;}i:243;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:"The server flushes the transaction logs using sync writes. Hence, it's very important that a dedicated transaction log device be used";}i:2;i:10046;}i:244;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:10179;}i:245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:226:" so that transaction logging by the ZooKeeper server is not impacted by I/O activities from other processes in the system. Having a dedicated log device improves the overall throughput and assigns stable latencies to requests.";}i:2;i:10181;}i:246;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10407;}i:247;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10407;}i:248;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10407;}i:249;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10407;}i:250;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:10411;}i:251;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:10412;}i:252;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"preAllocSize";}i:2;i:10414;}i:253;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:10426;}i:254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:" : The zookeeper.preAllocSize Java system property is set to preallocate the block size to the transactions log files. The default block size is 64 ";}i:2;i:10428;}i:255;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"MB";}i:2;i:10576;}i:256;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:". Preallocating the transaction log minimizes the disk seeks. If snapshots are taken frequently, the transaction logs might not grow to 64 ";}i:2;i:10578;}i:257;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"MB";}i:2;i:10717;}i:258;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:". In such cases, we can tune this parameter to optimize the storage usage.";}i:2;i:10719;}i:259;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10793;}i:260;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10793;}i:261;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10793;}i:262;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10793;}i:263;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:10797;}i:264;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:10798;}i:265;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"snapCount";}i:2;i:10800;}i:266;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:10809;}i:267;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:439:" : The zookeeper.snapCount Java system property gives us the number of transactions between two consecutive snapshots. After snapCount transactions are written to a logfile, a new snapshot is started, and a new transaction logfile is created. Snapshot is a performance-sensitive operation, and hence, having a smaller value for snapCount might negatively affect ZooKeeper's performance. The default value of snapCount parameter is 100,000.";}i:2;i:10811;}i:268;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11250;}i:269;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11250;}i:270;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11250;}i:271;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11250;}i:272;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11254;}i:273;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:11255;}i:274;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"traceFile";}i:2;i:11257;}i:275;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:11266;}i:276;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:244:" : The requestTraceFile Java system property sets this option to enable the logging of requests to a trace file named traceFile.year.month.day. This option is useful for debugging, but it impacts the overall performance of the ZooKeeper server.";}i:2;i:11268;}i:277;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11512;}i:278;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11512;}i:279;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11512;}i:280;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11512;}i:281;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11516;}i:282;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:11517;}i:283;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"fsync.warningthresholdms";}i:2;i:11519;}i:284;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:11543;}i:285;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:321:" : This is the time measured in milliseconds; it defines a threshold for the maximum amount of time permitted to flush all outstanding writes to the transactional log, write-ahead log (WAL). It issues a warning message to the debug log whenever the sync operation takes longer than this value. The default value is 1,000.";}i:2;i:11545;}i:286;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11866;}i:287;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11866;}i:288;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11866;}i:289;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11866;}i:290;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11870;}i:291;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:11871;}i:292;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"autopurge.snapRetainCount";}i:2;i:11873;}i:293;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:11898;}i:294;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:165:" : This refers to the number of snapshots and corresponding transaction logs to retain in directories, dataDir, and dataLogDir, respectively. The default value is 3.";}i:2;i:11900;}i:295;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12065;}i:296;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12065;}i:297;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12065;}i:298;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12065;}i:299;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:12069;}i:300;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:12070;}i:301;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"autopurge.purgeInterval";}i:2;i:12072;}i:302;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:12095;}i:303;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:453:": This refers to the time interval in hours to purge old snapshots and transaction logs. The default value is 0 , which means auto purging is disabled by default. We can set this option to a positive integer(1 and above) to enable the auto purging. If it is disabled (set to 0), the default, purging doesn't happen automatically. Manual purging can be done by running the zkCleanup.sh script available in the bin directory of the ZooKeeper distribution.";}i:2;i:12097;}i:304;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12550;}i:305;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12550;}i:306;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12550;}i:307;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12550;}i:308;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:12554;}i:309;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:12555;}i:310;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"syncEnabled";}i:2;i:12557;}i:311;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:12568;}i:312;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:177:" : This configuration option is newly introduced in 3.4.6 and later versions of ZooKeeper. It is set using the Java system property zookeeper.observer.syncEnabled to enable the ";}i:2;i:12570;}i:313;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:12747;}i:314;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"observers";}i:2;i:12748;}i:315;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:12757;}i:316;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" to log transaction and write snapshots to disk, by default, like the ";}i:2;i:12758;}i:317;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:12828;}i:318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"followers";}i:2;i:12829;}i:319;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:12838;}i:320;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:223:". Recall that observers do not participate in the voting process unlike followers, but commit proposals from the leader. Enabling this option reduces the recovery time of the observers on restart. The default value is true ";}i:2;i:12839;}i:321;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:13062;}i:322;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:13062;}i:323;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:13062;}i:324;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:13064;}i:325;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"2. Client server network configuration";i:1;i:2;i:2;i:13064;}i:2;i:13064;}i:326;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:13064;}i:327;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:13115;}i:328;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:13115;}i:329;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:13115;}i:330;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:13119;}i:331;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:13120;}i:332;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"globalOutstandingLimit";}i:2;i:13122;}i:333;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:13144;}i:334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:582:": This parameter defines the maximum number of outstanding requests in ZooKeeper. In real life, clients might submit requests faster than ZooKeeper can process them. This happens if there are a large number of clients. This parameter enables ZooKeeper to do flow control by throttling clients. This is done to prevent ZooKeeper from running out of memory due to the queued requests. ZooKeeper servers will start throttling client requests once the globalOutstandingLimit has been reached. The default limit is 1000 requests. (Java system property: zookeeper.globalOutstandingLimit )";}i:2;i:13146;}i:335;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:13728;}i:336;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:13728;}i:337;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:13728;}i:338;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:13728;}i:339;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:13732;}i:340;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:13733;}i:341;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"maxClientCnxns";}i:2;i:13735;}i:342;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:13749;}i:343;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:481:": This is the maximum number of concurrent socket connections between a single client and the ZooKeeper server. The client is identified by its IP address. Setting up a TCP connection is a resource-intensive operation, and this parameter is used to prevent the overloading of the server. It is also used to prevent certain classes of DoS attacks, including file descriptor exhaustion. The default value is 60. Setting this to 0 entirely removes the limit on concurrent connections.";}i:2;i:13751;}i:344;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14232;}i:345;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14232;}i:346;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14232;}i:347;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14232;}i:348;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:14236;}i:349;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:14237;}i:350;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"clientPortAddress";}i:2;i:14239;}i:351;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:14256;}i:352;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:151:": This is the IP address that listens for client connections. By default, ZooKeeper server binds to all the interfaces for accepting client connection.";}i:2;i:14258;}i:353;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14409;}i:354;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14409;}i:355;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14409;}i:356;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14409;}i:357;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:14413;}i:358;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:14414;}i:359;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"minSessionTimeout";}i:2;i:14416;}i:360;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:14433;}i:361;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:366:": This is the minimum session timeout in milliseconds that the server will allow the client to negotiate. The default value is twice the tickTime parameter. If this timeout is set to a very low value, it might result in false positives due to incorrect detection of client failures. Setting this timeout to a higher value will delay the detection of client failures.";}i:2;i:14435;}i:362;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14801;}i:363;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14801;}i:364;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14801;}i:365;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14801;}i:366;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:14805;}i:367;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:14806;}i:368;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"maxSessionTimeout";}i:2;i:14808;}i:369;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:14825;}i:370;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:": This is the maximum session timeout in milliseconds that the server will allow the client to negotiate. By default, it is 20 times the tickTime parameter.";}i:2;i:14827;}i:371;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14983;}i:372;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14983;}i:373;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:14983;}i:374;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14985;}i:375;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:35:"3. Configuring a ZooKeeper ensemble";i:1;i:2;i:2;i:14985;}i:2;i:14985;}i:376;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:14985;}i:377;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14985;}i:378;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:294:"A ZooKeeper ensemble or cluster of replicated ZooKeeper servers should be configured optimally to avoid scenarios such as split-brain. A split-brain scenario might happen due to network portioning where two different servers of the same ensemble might pose as leaders and cause inconsistencies.";}i:2;i:15034;}i:379;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15329;}i:380;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:15329;}i:381;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:15329;}i:382;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:15329;}i:383;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:15333;}i:384;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:15334;}i:385;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"electionAlg";}i:2;i:15336;}i:386;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:15347;}i:387;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:392:": This option is used to choose a leader in a ZooKeeper ensemble. A value of 0 corresponds to the original UDP-based version, 1 corresponds to the non-authenticated UDP-based version of fast leader election, 2 corresponds to the authenticated UDP-based version of fast leader election, and 3 corresponds to the TCP-based version of fast leader election. Currently, algorithm 3 is the default.";}i:2;i:15349;}i:388;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:15741;}i:389;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:151:" The implementations of leader election 0, 1, and 2 are now deprecated, and fast leader election is the only one used. Available options are as follows";}i:2;i:15743;}i:390;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:15894;}i:391;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:15896;}i:392;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:15896;}i:393;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:15896;}i:394;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:15896;}i:395;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:15900;}i:396;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:15901;}i:397;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"initLimit";}i:2;i:15903;}i:398;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:15912;}i:399;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:268:": This refers to the amount of time, measured in ticks, to allow followers to connect with the leader. initLimit should be set depending on the network speed (and hops) between the leader and follower and based on the amount of data to be transferred between the two. ";}i:2;i:15914;}i:400;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:16182;}i:401;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:187:"If the amount of data stored by ZooKeeper is huge due to a large number of znodes and the amount of data stored in them, or if the network bandwidth is low, initLimit should be increased.";}i:2;i:16184;}i:402;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:16371;}i:403;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:16373;}i:404;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:16373;}i:405;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:16373;}i:406;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:16373;}i:407;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:16377;}i:408;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:16378;}i:409;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"syncLimit";}i:2;i:16380;}i:410;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:16389;}i:411;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:383:": This is the amount of time measured in ticks to allow followers to sync with a leader. If the followers fall too far behind the leader due to server load or network problems, they are dropped. However, the amount of data stored by ZooKeeper has no effect on the synchronization time between the leader and the follower. Instead, syncLimit depends on network latency and throughput.";}i:2;i:16391;}i:412;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:16774;}i:413;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:16774;}i:414;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:16774;}i:415;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:16774;}i:416;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:16778;}i:417;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:16779;}i:418;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"leaderServes";}i:2;i:16781;}i:419;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:16793;}i:420;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:352:": By default, the server in an ensemble that runs in the leader mode also accepts client connections. However, in a loaded and busy ensemble with an update-heavy workload, we can configure the leader server to not accept client connections. This can aid in coordinating write updates at a faster rate and, hence, can lead to increased write throughput.";}i:2;i:16795;}i:421;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:17147;}i:422;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:17147;}i:423;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:17147;}i:424;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:17147;}i:425;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:17151;}i:426;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:17152;}i:427;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"cnxTimeout";}i:2;i:17154;}i:428;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:17164;}i:429;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:222:": This refers to the timeout value for opening connections for leader election notifications. This parameter is only applicable with the leader election algorithm 3 â€“ fast leader election. The default value is 5 seconds.";}i:2;i:17166;}i:430;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:17388;}i:431;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:17388;}i:432;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:17388;}i:433;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:17388;}i:434;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:17392;}i:435;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:17393;}i:436;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:"server. x =[hostname]:port1[:port2]";}i:2;i:17395;}i:437;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:17430;}i:438;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:239:" : This parameter is used to define servers in the ZooKeeper ensemble. When the ZooKeeper server process starts up, it determines its identity by looking for the myid file in the data directory. The myid file contains the server number in ";}i:2;i:17432;}i:439;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:5:"ASCII";}i:2;i:17671;}i:440;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:"; this should be the same as x in server.x of the configuration parameter. The port1 is used to send transaction updates, the port2 is for leader election. ";}i:2;i:17676;}i:441;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:17832;}i:442;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:"It is very important that all servers use the same server.x configuration.";}i:2;i:17834;}i:443;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:17908;}i:444;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:159:" Also, the list of servers that make up ZooKeeper servers that are used by the clients must match the list of ZooKeeper servers that each ZooKeeper server has.";}i:2;i:17910;}i:445;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:18069;}i:446;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:18069;}i:447;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:18069;}i:448;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:18072;}i:449;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"4. Configuring a quorum";i:1;i:2;i:2;i:18072;}i:2;i:18072;}i:450;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:18072;}i:451;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18072;}i:452;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:444:"ZooKeeper allows for the flexible configuration of quorums within the ensemble. We can form hierarchical quorums by classifying the ZooKeeper servers into groups. This is particularly useful for forming a ZooKeeper ensemble that spans multiple data centers. An ensemble across data centers helps in ensuring the high availability of the service during disaster scenarios. The following options are useful for forming such groups in an ensemble:";}i:2;i:18109;}i:453;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18554;}i:454;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:18554;}i:455;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:18554;}i:456;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:18554;}i:457;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:231:" group.x=nnnnn[:nnnnn] : This enables a hierarchical quorum construction. x is a group identifier and nnnnn corresponds to server identifiers. Groups must be disjoint, and the union of all the groups must be the ZooKeeper ensemble.";}i:2;i:18558;}i:458;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:18789;}i:459;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:18789;}i:460;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:18789;}i:461;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:18789;}i:462;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:372:" weight.x=nnnnn : This is used to assign a weight to servers in a group when forming quorums. It corresponds to the weight of a server when voting for leader election and for the atomic broadcast protocol Zookeeper Atomic Broadcast (ZAB). By default, the weight of a server is 1. Assigning more weight to a server allows it to form a quorum with other servers more easily.";}i:2;i:18793;}i:463;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:19165;}i:464;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:19165;}i:465;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:19165;}i:466;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:19167;}i:467;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"5. Quota and authorization";i:1;i:2;i:2;i:19167;}i:2;i:19167;}i:468;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:19167;}i:469;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:19207;}i:470;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"5.1 Quota";i:1;i:3;i:2;i:19207;}i:2;i:19207;}i:471;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:19207;}i:472;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19207;}i:473;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:277:"ZooKeeper has configurable quotas associated with its data model. It's possible to set the quota limit on the znodes and the data amount of data stored. If a subtree in the ZooKeeper namespace crosses the quota associated with it, ZooKeeper prints warning messages in the log. ";}i:2;i:19228;}i:474;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:19505;}i:475;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:"However, the operation is never cancelled if the quota
assigned is exceeded.";}i:2;i:19507;}i:476;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:19583;}i:477;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19585;}i:478;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19585;}i:479;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:280:"ZooKeeper quotas are stored in the ZooKeeper tree in the /zookeeper/quota path. It is possible to set, list, and delete quotas from the ZooKeeper client APIs and through the ZooKeeper Java shell. The following screenshot shows the results of using the set, list, and del commands:";}i:2;i:19587;}i:480;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19867;}i:481;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:950:"
# create a znode, ephemeral can't have child znode
create /quota_example

# set a quota of two child
setquota -n 2 /quota_example

# create child, note, the third child is not denied, only a warning messages in the log
create /quota_example/ch1
create /quota_example/ch2
create /quota_example/ch3

# check the quota
[zk: 127.0.0.1:2181(CONNECTED) 6] listquota /quota_example
absolute path is /zookeeper/quota/quota_example/zookeeper_limits
Output quota for /quota_example count=2,bytes=-1
Output stat for /quota_example count=4,bytes=0

# delete quota
[zk: 127.0.0.1:2181(CONNECTED) 7] delquota /quota_example
[zk: 127.0.0.1:2181(CONNECTED) 8] listquota /quota_example
absolute path is /zookeeper/quota/quota_example/zookeeper_limits
quota for /quota_example does not exist.


# the warning message in the log file looks like this
2020-06-08 15:52:23,422 [myid:] - WARN  [SyncThread:0:DataTree@412] - Quota exceeded: /quota_example count=3 limit=2

";i:1;N;i:2;N;}i:2;i:19874;}i:482;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:20834;}i:483;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"5.2 Authorization";i:1;i:3;i:2;i:20834;}i:2;i:20834;}i:484;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:20834;}i:485;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20834;}i:486;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:"ZooKeeper also provides configurable options to control authentication and authorization by the service.";}i:2;i:20863;}i:487;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20967;}i:488;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20967;}i:489;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"A ";}i:2;i:20969;}i:490;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:20971;}i:491;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:"zookeeper.DigestAuthenticationProvider.superDigest";}i:2;i:20973;}i:492;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:21023;}i:493;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:" parameter enables a ZooKeeper ensemble administrator to access the znode hierarchy as a superuser. The ZooKeeper service doesn't do any ";}i:2;i:21025;}i:494;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"ACL";}i:2;i:21162;}i:495;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" checking for a user who is authenticated as a superuser. This feature is disabled by default.";}i:2;i:21165;}i:496;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21259;}i:497;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21259;}i:498;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:"To generate a super digest for the superuser, the Java system property called ";}i:2;i:21261;}i:499;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:21339;}i:500;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:"org.apache.zookeeper.server.auth.DigestAuthenticationProvider";}i:2;i:21341;}i:501;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:21402;}i:502;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" can be used by calling with the parameter ";}i:2;i:21404;}i:503;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:21447;}i:504;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"super:<password>";}i:2;i:21449;}i:505;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:21465;}i:506;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:". Once the superDigest is generated, we need to provide ";}i:2;i:21467;}i:507;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:21523;}i:508;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"super:<data>";}i:2;i:21525;}i:509;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:21537;}i:510;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" as a system property while starting
the ZooKeeper servers.";}i:2;i:21539;}i:511;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21598;}i:512;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21598;}i:513;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:"A ZooKeeper client needs to pass a scheme of digest and authentication data of ";}i:2;i:21600;}i:514;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:21679;}i:515;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"super:<password>";}i:2;i:21681;}i:516;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:21697;}i:517;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:" to authenticate with the ZooKeeper server. While using the ZooKeeper shell, we can use the addauth command.";}i:2;i:21699;}i:518;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21807;}i:519;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:21807;}i:520;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:21807;}}