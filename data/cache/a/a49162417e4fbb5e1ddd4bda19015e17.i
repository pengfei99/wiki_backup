a:865:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"Lesson06 SQL Advanced Objects";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:"In lesson 06, we will talk about the advance SQL objects such as : ";}i:2;i:47;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:115;}i:6;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:115;}i:7;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:115;}i:8;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:115;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" Views/Materialized Views";}i:2;i:119;}i:10;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:144;}i:11;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:144;}i:12;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:144;}i:13;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:144;}i:14;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:" Indexes (Index organized data and different algorithms for generating indexes such as B-tree, hash, etc.)";}i:2;i:148;}i:15;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:254;}i:16;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:254;}i:17;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:254;}i:18;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:254;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Triggers";}i:2;i:258;}i:20;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:267;}i:21;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:267;}i:22;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:267;}i:23;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:267;}i:24;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" Prepared Statement";}i:2;i:271;}i:25;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:290;}i:26;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:290;}i:27;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:290;}i:28;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:290;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" Partitioning";}i:2;i:294;}i:30;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:307;}i:31;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:307;}i:32;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:307;}i:33;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:309;}i:34;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"6.1 Views";i:1;i:2;i:2;i:309;}i:2;i:309;}i:35;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:309;}i:36;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:309;}i:37;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"A view:";}i:2;i:332;}i:38;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:339;}i:39;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:339;}i:40;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:339;}i:41;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:339;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:" is a named stored query that provides another way to present data in the database tables";}i:2;i:343;}i:43;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:432;}i:44;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:432;}i:45;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:432;}i:46;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:432;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:" can be accessed as a virtual table";}i:2;i:436;}i:48;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:471;}i:49;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:471;}i:50;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:471;}i:51;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:471;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:" does not store data physically, so no more space [except for one type] is used";}i:2;i:475;}i:53;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:554;}i:54;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:554;}i:55;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:554;}i:56;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:554;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:" allows the user to more easily find relevant information in large datasets.";}i:2;i:558;}i:58;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:634;}i:59;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:634;}i:60;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:634;}i:61;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:634;}i:62;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" allows showing certain data points while hiding others.";}i:2;i:638;}i:63;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:694;}i:64;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:694;}i:65;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:694;}i:66;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:694;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:" returns a virtual table containing just the information you want to see";}i:2;i:698;}i:68;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:770;}i:69;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:770;}i:70;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:770;}i:71;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:770;}i:72;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:"A view is defined based on one or more tables, which are known as base tables.";}i:2;i:772;}i:73;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:850;}i:74;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:850;}i:75;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"A view can be very useful in some cases such as:";}i:2;i:852;}i:76;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:900;}i:77;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:900;}i:78;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:900;}i:79;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:900;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:146:" A view helps simplify the complexity of a query because you can query a view, which is based on a complex query, using a simple SELECT statement.";}i:2;i:904;}i:81;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1050;}i:82;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1050;}i:83;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1050;}i:84;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1050;}i:85;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:" Like a table, you can grant permission to users through a view that contains specific data that the users are authorized to see.";}i:2;i:1054;}i:86;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1183;}i:87;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1183;}i:88;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1183;}i:89;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1183;}i:90;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:" A view provides a consistent layer even if the columns of underlying table changes.";}i:2;i:1187;}i:91;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1271;}i:92;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1271;}i:93;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1271;}i:94;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1271;}i:95;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:"There are two types of Views in SQL: Simple View and Complexe view";}i:2;i:1275;}i:96;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1341;}i:97;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1343;}i:98;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Simple View";i:1;i:3;i:2;i:1343;}i:2;i:1343;}i:99;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1343;}i:100;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1343;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:"The Simple View contains only one single base table or is created from only one table. It has the following properties:";}i:2;i:1366;}i:102;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1485;}i:103;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1485;}i:104;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1485;}i:105;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1485;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:" Disallows the use of group functions like MAX(), COUNT(), etc.";}i:2;i:1489;}i:107;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1552;}i:108;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1552;}i:109;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1552;}i:110;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1552;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" Does not contain groups of data.";}i:2;i:1556;}i:112;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1589;}i:113;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1589;}i:114;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1589;}i:115;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1589;}i:116;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" DML operations could be performed through a simple view.";}i:2;i:1593;}i:117;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1650;}i:118;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1650;}i:119;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1650;}i:120;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1650;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:" INSERT, DELETE and UPDATE are directly possible on a simple view.";}i:2;i:1654;}i:122;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1720;}i:123;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1720;}i:124;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1720;}i:125;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1720;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:" Does not contain group by, distinct, pseudo column like rownum, columns defined by expressions.";}i:2;i:1724;}i:127;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1820;}i:128;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1820;}i:129;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1820;}i:130;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1820;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" Does not include NOT NULL columns from base tables.";}i:2;i:1824;}i:132;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1876;}i:133;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1876;}i:134;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1876;}i:135;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1878;}i:136;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Complex View";i:1;i:3;i:2;i:1878;}i:2;i:1878;}i:137;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1878;}i:138;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1878;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:125:"The complex view contains more than one base tables or is created from more than one tables. It has the following properties:";}i:2;i:1902;}i:140;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2027;}i:141;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2027;}i:142;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2027;}i:143;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2027;}i:144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" Allows the use of use group functions such as MAX(), COUNT(), etc.";}i:2;i:2031;}i:145;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2098;}i:146;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2098;}i:147;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2098;}i:148;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2098;}i:149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" Can contain groups of data.";}i:2;i:2102;}i:150;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2130;}i:151;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2130;}i:152;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2130;}i:153;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2130;}i:154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" DML operations could not always be performed through a complex view.";}i:2;i:2134;}i:155;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2203;}i:156;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2203;}i:157;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2203;}i:158;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2203;}i:159;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:" We cannot apply INSERT, DELETE and UPDATE on complex view directly.";}i:2;i:2207;}i:160;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2275;}i:161;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2275;}i:162;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2275;}i:163;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2275;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" It can contain group by, distinct, pseudo column like rownum, columns defined by expressions.";}i:2;i:2279;}i:165;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2373;}i:166;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2373;}i:167;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2373;}i:168;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2373;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" NOT NULL columns that are not selected by simple view can be included in the complex view.";}i:2;i:2377;}i:170;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2468;}i:171;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2468;}i:172;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:2468;}i:173;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2470;}i:174;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"Updating a view";i:1;i:3;i:2;i:2470;}i:2;i:2470;}i:175;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2470;}i:176;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2470;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:163:"Simple views are automatically updateable: the system will allow INSERT, UPDATE and DELETE statements to be used on the view in the same way as on a regular table.";}i:2;i:2497;}i:178;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2660;}i:179;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2660;}i:180;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:172:"If the view is automatically updatable the system will convert any data modification statement on the view into the corresponding statement on the underlying base relation.";}i:2;i:2662;}i:181;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2834;}i:182;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2834;}i:183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:181:"An updatable view may contain a mix of updatable and non-updatable columns. A column is updatable if it is a simple reference to an updatable column of the underlying base relation.";}i:2;i:2836;}i:184;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3017;}i:185;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3017;}i:186;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:336:"A more complex view that does not satisfy all these conditions is read-only by default: the system will not allow an insert, update, or delete on the view. You can get the effect of an updatable view by creating INSTEAD OF TRIGGERS on the view, which convert attempted inserts, etc. on the view into appropriate actions on other tables.";}i:2;i:3019;}i:187;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3355;}i:188;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3357;}i:189;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"Views with check option";i:1;i:3;i:2;i:3357;}i:2;i:3357;}i:190;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3357;}i:191;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3357;}i:192;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:492:"If an automatically updatable view contains a WHERE condition, the condition restricts which rows of the base relation are available to be modified by UPDATE and DELETE statements on the view. However, an UPDATE is allowed to change a row so that it no longer satisfies the WHERE condition, and thus is no longer visible through the view.
Similarly, an INSERT command can potentially insert base-relation rows that do not satisfy the WHERE condition and thus are not visible through the view.";}i:2;i:3392;}i:193;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3884;}i:194;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3884;}i:195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"We may grant permission to the users to update a limited set of rows of the base table.";}i:2;i:3886;}i:196;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3973;}i:197;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3975;}i:198;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"Standard syntax";i:1;i:3;i:2;i:3975;}i:2;i:3975;}i:199;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3975;}i:200;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:679:"
# Create views
CREATE [ OR REPLACE ] [TEMPORARY] VIEW name [ ( column_name [, ...] ) ]
AS query
[ WITH [ CASCADED | LOCAL ] CHECK OPTION ]

# If we choose CASCADED(Default Value), all new rows are checked against the conditions of the view and all underlying base views.
# If we choose LOCAL, new rows are only checked against the conditions defined directly in the view itself. Any conditions defined on underlying base views are not checked.

# Modify views' column type
ALTER VIEW [ IF EXISTS ] name ALTER [ COLUMN ] … …
# Modify view's column name
ALTER VIEW [ IF EXISTS ] name RENAME TO new_name

# Drop view
DROP VIEW [ IF EXISTS ] name [, ...] [ CASCADE | RESTRICT ]
";i:1;N;i:2;N;}i:2;i:4007;}i:201;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4696;}i:202;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"6.2 Materialized Views";i:1;i:2;i:2;i:4696;}i:2;i:4696;}i:203;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:4696;}i:204;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4696;}i:205;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:"Materialized views store data physically and refresh the data periodically from the base tables. Materialized views have many advantages:";}i:2;i:4732;}i:206;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4869;}i:207;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:4869;}i:208;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4869;}i:209;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4869;}i:210;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" faster access to data from a remote server,";}i:2;i:4873;}i:211;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4917;}i:212;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4917;}i:213;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4917;}i:214;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4917;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:" cache the result of a complex expensive query in data warehouses or business intelligence applications.";}i:2;i:4921;}i:216;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5025;}i:217;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5025;}i:218;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:5025;}i:219;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5027;}i:220;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"Standard syntaxe";i:1;i:3;i:2;i:5027;}i:2;i:5027;}i:221;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5027;}i:222;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:657:"
# Create a materialized view
CREATE MATERIALIZED VIEW [ IF NOT EXISTS ] name AS query
WITH [NO] DATA;
# With no data means to create an empty view

# Drop materialized view
DROP MATERIALIZED VIEW [ IF EXISTS ] name [, ...] [ CASCADE | RESTRICT ]

# refresh the view  
REFRESH MATERIALIZED VIEW [CONCURRENTLY] name; 
# If you add CONCURRENTLY, Temporary updated version of the materialized view is created, PostgreSQL compares two versions, and performs INSERT and UPDATE only on the differences. You can query against the materialized view while it is being updated. During this process, PostgreSQL locks the entire table You cannot query data against it.
";i:1;N;i:2;N;}i:2;i:5060;}i:223;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5727;}i:224;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"6.3 Indexes";i:1;i:2;i:2;i:5727;}i:2;i:5727;}i:225;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5727;}i:226;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5727;}i:227;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:303:"Indexes are a common way to enhance database performance. An index allows the database server to find and retrieve specific rows much faster than it could do without an index. However, indexes add write and storage overheads to the database system, therefore, using them appropriately is very important.";}i:2;i:5752;}i:228;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6055;}i:229;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6055;}i:230;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:185:"An index is a separated data structure that speeds up the data retrieval on a table at the cost of additional writes and storage to maintain it. PostgreSQL provides several index types:";}i:2;i:6057;}i:231;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6242;}i:232;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:6242;}i:233;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6242;}i:234;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6242;}i:235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" B-tree, ";}i:2;i:6246;}i:236;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6255;}i:237;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6255;}i:238;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6255;}i:239;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6255;}i:240;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" Hash, ";}i:2;i:6259;}i:241;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6266;}i:242;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6266;}i:243;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6266;}i:244;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6266;}i:245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" GiST, ";}i:2;i:6270;}i:246;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6277;}i:247;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6277;}i:248;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6277;}i:249;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6277;}i:250;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" SP-GiST, ";}i:2;i:6281;}i:251;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6291;}i:252;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6291;}i:253;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6291;}i:254;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6291;}i:255;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" GIN and BRIN.";}i:2;i:6295;}i:256;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6309;}i:257;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6309;}i:258;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:6309;}i:259;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6309;}i:260;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:"Each index type uses a different algorithm that is best suited to different types of queries.";}i:2;i:6310;}i:261;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6403;}i:262;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6405;}i:263;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"6.3.1 B-tree indexes";i:1;i:3;i:2;i:6405;}i:2;i:6405;}i:264;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6405;}i:265;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6405;}i:266;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:267:"B-tree indexes use the self-balancing tree data structure to keep data sorted and allows searches, sequential access, insertions, and deletions in logarithmic time. The B-tree is a generalization of a binary search tree in that a node can have more than two children.";}i:2;i:6437;}i:267;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6704;}i:268;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6704;}i:269;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:296:"In SQL Server, indexes are organized as B-trees. Each page in an index B-tree is called an index node. The top node of the B-tree is called the root node. The bottom nodes in the index are called the leaf nodes. In a clustered index, the leaf nodes contain the data pages of the underlying table.";}i:2;i:6706;}i:270;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7002;}i:271;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7002;}i:272;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:176:"Note that, in a B-tree structure, Child nodes to the left of value “X” have values smaller than X; child nodes to the right of the value “X” have values greater than X.";}i:2;i:7004;}i:273;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7180;}i:274;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7180;}i:275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:239:"Adding and removing values from a B-tree usually does not create new nodes: the number of values in each node can vary. Of course, that means we’ll have some empty space, so a B-tree will require more disk space than a denser tree would.";}i:2;i:7182;}i:276;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7421;}i:277;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7421;}i:278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:459:"After adding a value, the B-tree has to maintain both the order of value and the balance of the tree. First, we’ll find the leaf node where the values should be added. If there is enough space in the leaf node, we’ll simply add the value; the structure and the tree depth won’t change. We would split the parent node in the same manner if an overflow happens there. In extreme cases, we’d have to split the root node and the tree depth would increase.";}i:2;i:7423;}i:279;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7882;}i:280;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7882;}i:281;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:"To delete a value from the B-Tree, we’ll locate that value and remove it. If that deletion causes underflow (the number of values stored in a node is too low) we’ll have to merge nodes together.";}i:2;i:7884;}i:282;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8082;}i:283;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8084;}i:284;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"6.3.2 Hash Indexes";i:1;i:3;i:2;i:8084;}i:2;i:8084;}i:285;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:8084;}i:286;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8084;}i:287;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:312:"A hash index consists of a collection of buckets organized in an array. A hash function maps index keys to corresponding buckets in the hash index. The following figure shows three index keys that are mapped to three different buckets in the hash index. For illustration purposes, the hash function name is f(x).";}i:2;i:8114;}i:288;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8426;}i:289;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8426;}i:290;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:66:":employes:pengfei.liu:data_science:data_base:theory:hash_index.png";i:1;s:0:"";i:2;N;i:3;s:3:"400";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:8428;}i:291;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8503;}i:292;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8503;}i:293;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:256:"When we want to search for a value, we’ll use the hash function to calculate the address where our data could be stored. We’ll look for the data in the bucket. If we find it, we’re done. If we don’t find our value, it means it’s not in the index.";}i:2;i:8505;}i:294;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8761;}i:295;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8761;}i:296;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:500:"Adding new values works similarly: we’ll use the hash function to calculate the address where we’ll store our data. If that address is already occupied, we’ll add new buckets and re-compute the hash function. Once again, we’ll use the whole key as an input for our function. The result is the actual address (in disk memory) where we can find the desired data. Updating or deleting values consists of first searching for a value and then applying the desired operation on that memory address.";}i:2;i:8763;}i:297;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9263;}i:298;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9263;}i:299;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:207:"Hash table indexes are very fast when testing for equality (= or <>). This is because we’re using the whole key and not just its parts. Individual parts can’t help us when we want to find range (< or >).";}i:2;i:9265;}i:300;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9472;}i:301;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9474;}i:302;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"6.3.3 Other index types";i:1;i:3;i:2;i:9474;}i:2;i:9474;}i:303;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:9474;}i:304;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9474;}i:305;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"1. ";}i:2;i:9509;}i:306;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:9512;}i:307;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"GiST indexes";}i:2;i:9514;}i:308;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:9526;}i:309;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:238:" are not a single kind of index, but rather an infrastructure within which many different indexing strategies can be implemented. GiST indexes are also capable of optimizing “nearest-neighbor” searches, such as the following sql query";}i:2;i:9528;}i:310;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9772;}i:311;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:140:"
SELECT * FROM places ORDER BY location <-> point '(101,456)' LIMIT 10;
# This will return the ten places closest to a given target point. 
";i:1;N;i:2;N;}i:2;i:9772;}i:312;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9772;}i:313;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:9922;}i:314;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:9926;}i:315;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"GiST indexes";}i:2;i:9928;}i:316;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:9940;}i:317;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" are often used in geometric data types and full-text search.";}i:2;i:9942;}i:318;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10003;}i:319;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10003;}i:320;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"2. ";}i:2;i:10006;}i:321;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:10009;}i:322;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"SP-GiST indexes";}i:2;i:10011;}i:323;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:10026;}i:324;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:222:", like GiST indexes, offer an infrastructure that supports various kinds of searches. SP-GiST permits implementation of a wide range of different non-balanced data structures, such as quadtrees, k-d trees, and radix trees.";}i:2;i:10028;}i:325;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10250;}i:326;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10250;}i:327;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:10252;}i:328;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:10256;}i:329;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"SP-GiST indexes";}i:2;i:10258;}i:330;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:10273;}i:331;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:" are often used in multimedia, phone routing, and IP routing";}i:2;i:10275;}i:332;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10335;}i:333;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10335;}i:334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"3. ";}i:2;i:10337;}i:335;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:10340;}i:336;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"GIN indexes";}i:2;i:10342;}i:337;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:10353;}i:338;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:350:" are “inverted indexes” which are appropriate for data values that contain multiple component values, such as arrays. An inverted index contains a separate entry for each component value, and can efficiently handle queries that test for the presence of specific component values. It's often used in indexing hstore, array, jsonb, and range types.";}i:2;i:10355;}i:339;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10705;}i:340;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10705;}i:341;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"4. ";}i:2;i:10707;}i:342;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:10710;}i:343;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"BRIN indexes";}i:2;i:10712;}i:344;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:10724;}i:345;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:472:" (a shorthand for Block Range INdexes) store summaries about the values stored in consecutive physical block ranges of a table. For data types that have a linear sort order, the indexed data corresponds to the minimum and maximum values of the values in the column for each block range. Brin indexes allow the use of an index on a very large table that would previously be
impractical using B-tree, It's often used in indexing created date column of the sales order table.";}i:2;i:10726;}i:346;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11198;}i:347;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11200;}i:348;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"6.3.4 Standard syntax";i:1;i:3;i:2;i:11200;}i:2;i:11200;}i:349;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:11200;}i:350;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11233;}i:351;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Create index";i:1;i:4;i:2;i:11233;}i:2;i:11233;}i:352;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:11233;}i:353;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11233;}i:354;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:"The CREATE INDEX statement is used to create indexes in tables. Indexes are used to retrieve data from the database very fast. The users cannot see the indexes, they are just used to speed up searches/queries.";}i:2;i:11255;}i:355;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11464;}i:356;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:634:"
CREATE [UNIQUE] INDEX index_name
ON table_name 
[USING method]
(
column1 [ASC | DESC] [NULL {FIRST | LAST }] , 
column2, 
...
);

# If we create a unique index on a table, duplicate values are not allowed. If not unique, duplicate values are allowed 
# In using method statement, we specify which type of index we want to use (e.g. B-tree, hash, etc.). PostgreSQL uses B-tree by default.
# The ASC and DESC specify the sort order. ASC is the default.
# NULLS FIRST or NULLS LAST specifies nulls sort before or after non-nulls. NULLS FIRST is the default when DESC is specified. NULLS LAST is the default when DESC is not specified.

";i:1;N;i:2;N;}i:2;i:11471;}i:357;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11471;}i:358;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"Note that, CREATE INDEX Locks out writes but not reads.";}i:2;i:12115;}i:359;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12170;}i:360;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12172;}i:361;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Drop index";i:1;i:4;i:2;i:12172;}i:2;i:12172;}i:362;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:12172;}i:363;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:77:"
DROP INDEX [ CONCURRENTLY]
[ IF EXISTS ] index_name
[ CASCADE | RESTRICT ];
";i:1;N;i:2;N;}i:2;i:12197;}i:364;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12197;}i:365;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:12284;}i:366;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"CONCURRENTLY";}i:2;i:12286;}i:367;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:12298;}i:368;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:296:" means when you execute the DROP INDEX statement, PostgreSQL acquires an
exclusive lock on the table and blocks other accesses until the index removal completes. To force the command waits until the conflicting transaction completes before removing the index, you can use the CONCURRENTLY option.";}i:2;i:12300;}i:369;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12596;}i:370;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12596;}i:371;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:12598;}i:372;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"CASCADE";}i:2;i:12600;}i:373;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:12607;}i:374;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:" means if the index has dependent objects, use the CASCADE option to automatically
drop these objects and all objects that depend on those objects.";}i:2;i:12609;}i:375;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12756;}i:376;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12756;}i:377;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:12758;}i:378;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"RESTRICT";}i:2;i:12760;}i:379;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:12768;}i:380;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:126:" option instructs PostgreSQL to refuse to drop the index if any objects depend on it. The DROP INDEX uses RESTRICT by default.";}i:2;i:12770;}i:381;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12896;}i:382;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12896;}i:383;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:"Note that,  DROP INDEX Exclusive lock on the table (locks both writes and reads of the table)";}i:2;i:12898;}i:384;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12991;}i:385;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12993;}i:386;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Refresh index";i:1;i:4;i:2;i:12993;}i:2;i:12993;}i:387;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:12993;}i:388;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12993;}i:389;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:134:"In practice, an index can become corrupted and no longer contains valid data. To recover the index, you can use the REINDEX statement:";}i:2;i:13016;}i:390;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13156;}i:391;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:334:"
REINDEX [ ( VERBOSE ) ] { INDEX | TABLE | SCHEMA | DATABASE | SYSTEM } name;

# To recreate a single index, you specify the index name after REINDEX INDEX clause as follows:
REINDEX INDEX index_name;
# To recreate all index of a table
REINDEX TABLE table_name;
# To recreate all indexes of a database
REINDEX DATABASE database_name;
";i:1;N;i:2;N;}i:2;i:13156;}i:392;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13156;}i:393;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:118:"Note that, REINDEX Locks writes but not reads of the table. REINDEX Locks reads & write that attempt to use the index.";}i:2;i:13500;}i:394;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13618;}i:395;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:13621;}i:396;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:36:"6.3.5 Cluster data based on an index";i:1;i:3;i:2;i:13621;}i:2;i:13621;}i:397;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:13621;}i:398;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13621;}i:399;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:"To better access data, we can cluster data based on an index. ";}i:2;i:13669;}i:400;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:13731;}i:401;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"CLUSTER";}i:2;i:13733;}i:402;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:13740;}i:403;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:153:"  clause instructs PostgreSQL to cluster a table based on an index. The index must already have been defined on the table. The sql query looks like this:";}i:2;i:13742;}i:404;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13901;}i:405;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:51:"
CLUSTER [VERBOSE] table_name [ USING index_name ]
";i:1;N;i:2;N;}i:2;i:13901;}i:406;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13901;}i:407;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:"In oracle db, we need to use Index-Organized Table. In Mysql, we need to use clustered indexes which is only available in InnoDB.";}i:2;i:13962;}i:408;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14091;}i:409;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14091;}i:410;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:192:"When a table is clustered, it is physically reordered based on the index information.
Clustering is a one-time operation: when the table is subsequently updated, the changes are not clustered.";}i:2;i:14093;}i:411;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14285;}i:412;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14285;}i:413;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:"Note : When a table is being clustered, an ACCESS EXCLUSIVE lock is acquired on it (both reads and writes).";}i:2;i:14287;}i:414;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14394;}i:415;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14396;}i:416;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"6.4 Triggers";i:1;i:2;i:2;i:14396;}i:2;i:14396;}i:417;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:14396;}i:418;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14396;}i:419;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:220:"A trigger is a function invoked automatically whenever an event associated with a TABLE occurs.
For example, if you want to keep a history of data without requiring the application to have logic to check for every event.";}i:2;i:14422;}i:420;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14642;}i:421;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14642;}i:422;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:"You can also use triggers to maintain complex data integrity rules which you cannot implement elsewhere except at the database level.";}i:2;i:14644;}i:423;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14777;}i:424;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14777;}i:425;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:14779;}i:426;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Advantages";}i:2;i:14781;}i:427;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:14791;}i:428;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" of using SQL triggers:";}i:2;i:14793;}i:429;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14816;}i:430;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:14816;}i:431;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14816;}i:432;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14816;}i:433;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:" SQL triggers provide an alternative way to check the integrity of data.";}i:2;i:14820;}i:434;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14892;}i:435;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14892;}i:436;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14892;}i:437;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14892;}i:438;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" SQL triggers can catch errors in business logic in the database layer.";}i:2;i:14896;}i:439;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14967;}i:440;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14967;}i:441;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14967;}i:442;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14967;}i:443;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:246:" SQL triggers provide an alternative way to run scheduled tasks. By using SQL triggers, you don’t have to wait to run the scheduled tasks because the triggers are invoked automatically before or after a change is made to the data in the tables.";}i:2;i:14971;}i:444;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:15217;}i:445;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:15217;}i:446;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:15217;}i:447;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:15217;}i:448;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" SQL triggers are very useful to audit the changes of data in tables.";}i:2;i:15221;}i:449;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:15290;}i:450;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:15290;}i:451;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:15290;}i:452;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15290;}i:453;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:15292;}i:454;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Disadvantages";}i:2;i:15294;}i:455;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:15307;}i:456;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" of using SQL triggers";}i:2;i:15309;}i:457;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15331;}i:458;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:15331;}i:459;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:15331;}i:460;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:15331;}i:461;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:342:" SQL triggers only can provide an extended validation and they cannot replace all the validations. Some simple validations have to be done in the application layer. For example, you can validate user’s inputs in the client side by using JavaScript or on the server side using server-side scripting languages such as JSP, PHP, ASP.NET, Perl.";}i:2;i:15335;}i:462;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:15677;}i:463;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:15677;}i:464;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:15677;}i:465;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:15677;}i:466;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:155:" SQL triggers are invoked and executed invisible from the client applications, therefore, it is difficult to figure out what happens in the database layer.";}i:2;i:15681;}i:467;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:15836;}i:468;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:15836;}i:469;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:15836;}i:470;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:15836;}i:471;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:" SQL triggers may increase the overhead of the database server.";}i:2;i:15840;}i:472;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:15903;}i:473;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:15903;}i:474;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:15903;}i:475;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15903;}i:476;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"To create a new trigger :";}i:2;i:15905;}i:477;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15930;}i:478;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:15930;}i:479;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:15930;}i:480;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:15930;}i:481;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" define a trigger function using CREATE FUNCTION statement.";}i:2;i:15934;}i:482;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:15993;}i:483;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:15993;}i:484;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:15993;}i:485;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:15993;}i:486;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" bind this trigger function to a table using CREATE TRIGGER statement.";}i:2;i:15997;}i:487;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:16067;}i:488;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:16067;}i:489;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:16067;}i:490;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:16069;}i:491;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"6.4.1 Trigger Events";i:1;i:3;i:2;i:16069;}i:2;i:16069;}i:492;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:16069;}i:493;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16069;}i:494;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:"A trigger can be defined to be invoked either before or after the data is changed by:";}i:2;i:16102;}i:495;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16187;}i:496;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:16187;}i:497;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:16187;}i:498;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:16187;}i:499;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" Insert";}i:2;i:16191;}i:500;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:16198;}i:501;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:16198;}i:502;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:16198;}i:503;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:16198;}i:504;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" Update";}i:2;i:16202;}i:505;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:16209;}i:506;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:16209;}i:507;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:16209;}i:508;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:16209;}i:509;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" Delete";}i:2;i:16213;}i:510;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:16220;}i:511;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:16220;}i:512;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:16220;}i:513;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:16220;}i:514;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Truncate";}i:2;i:16224;}i:515;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:16233;}i:516;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:16233;}i:517;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:16233;}i:518;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16233;}i:519;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:170:"In MySQL, only insert, update, delete can trigger a trigger. the Truncate statement removes all data of a table but does not invoke the trigger associated with the table.";}i:2;i:16235;}i:520;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16405;}i:521;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16405;}i:522;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:344:"Based on how you define your trigger, it can work on the row level, or the statement level. This could change the performance of your triggers. For example, we have a sql query which updates 20 rows in a table. If the trigger is at the row level, it will be invoked 20 times. If the trigger is at the statement level, it will be invoked 1 time.";}i:2;i:16407;}i:523;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16751;}i:524;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16751;}i:525;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:"Trigger before events, can skip rows, modify values, etc. Trigger after events, all changes are available.";}i:2;i:16753;}i:526;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16859;}i:527;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:16861;}i:528;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"6.4.2 Standard syntax";i:1;i:3;i:2;i:16861;}i:2;i:16861;}i:529;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:16861;}i:530;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:415:"
# Creating a trigger
CREATE TRIGGER trigger_name {BEFORE | AFTER | INSTEAD OF} {event [OR ...]}
ON table_name
[FOR [EACH] {ROW | STATEMENT}]
EXECUTE PROCEDURE trigger_function

# Modifying a trigger
ALTER TRIGGER trigger_name ON table_name RENAME TO new_name

# Disabling a trigger
ALTER TABLE table_name DISABLE TRIGGER trigger_name | ALL

# Removing a trigger
DROP TRIGGER [IF EXISTS] trigger_name ON table_name
";i:1;N;i:2;N;}i:2;i:16899;}i:531;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:17324;}i:532;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"6.4.3 Trigger on Views";i:1;i:3;i:2;i:17324;}i:2;i:17324;}i:533;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:17324;}i:534;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17324;}i:535;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"On views, ";}i:2;i:17358;}i:536;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:17368;}i:537;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"INSTEAD OF triggers";}i:2;i:17370;}i:538;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:17389;}i:539;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:" can be defined to replace INSERT, UPDATE or DELETE. ";}i:2;i:17391;}i:540;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:17444;}i:541;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"INSTEAD OF triggers";}i:2;i:17446;}i:542;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:17465;}i:543;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:" can only be defined on views, and only at the row level. ";}i:2;i:17467;}i:544;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:17525;}i:545;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"INSTEAD OF triggers";}i:2;i:17527;}i:546;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:17546;}i:547;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:274:" is fired once for each row that needs to be modified in the view. It is the responsibility of the trigger's function to perform the necessary modifications to the view's underlying base table(s) and, where appropriate, return the modified row as it will appear in the view.";}i:2;i:17548;}i:548;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17822;}i:549;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:17826;}i:550;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Examples";i:1;i:4;i:2;i:17826;}i:2;i:17826;}i:551;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:17826;}i:552;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17826;}i:553;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:"Suppose that dept and emp are tables that list departments and employees:";}i:2;i:17844;}i:554;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17917;}i:555;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:319:"
CREATE TABLE dept (
   deptno INTEGER PRIMARY KEY,
   deptname CHAR(20),
   manager_num INT
);
CREATE TABLE emp (
   empno INTEGER PRIMARY KEY,
   empname CHAR(20),
   deptno INTEGER REFERENCES dept(deptno),
   startdate DATE
);
ALTER TABLE dept ADD CONSTRAINT(FOREIGN KEY (manager_num)
      REFERENCES emp(empno));

";i:1;N;i:2;N;}i:2;i:17924;}i:556;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17924;}i:557;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:136:"The next statement defines manager_info, a view of columns in the dept and emp tables that includes all the managers of each department:";}i:2;i:18253;}i:558;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18389;}i:559;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:136:"
CREATE VIEW manager_info AS
   SELECT d.deptno, d.deptname, e.empno, e.empname
      FROM emp e, dept d WHERE e.empno = d.manager_num;
";i:1;N;i:2;N;}i:2;i:18396;}i:560;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18396;}i:561;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:181:"The following CREATE TRIGGER statement creates manager_info_insert, an INSTEAD OF trigger that is designed to insert rows into the dept and emp tables through the manager_info view:";}i:2;i:18542;}i:562;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18723;}i:563;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:449:"
CREATE TRIGGER manager_info_insert
   INSTEAD OF INSERT ON manager_info    --defines trigger event
      REFERENCING NEW AS n              --new manager data
   FOR EACH ROW                         --defines trigger action
      (EXECUTE PROCEDURE instab(n.deptno, n.empno));

CREATE PROCEDURE instab (dno INT, eno INT)
   INSERT INTO dept(deptno, manager_num) VALUES(dno, eno);
   INSERT INTO emp (empno, deptno) VALUES (eno, dno);
END PROCEDURE;
";i:1;N;i:2;N;}i:2;i:18730;}i:564;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18730;}i:565;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:"After the tables, view, trigger, and SPL routine have been created, the database server treats the following INSERT statement as a triggering event:";}i:2;i:19189;}i:566;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19337;}i:567;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:60:"
INSERT INTO manager_info(deptno, empno) VALUES (08, 4232);
";i:1;N;i:2;N;}i:2;i:19344;}i:568;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19344;}i:569;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:274:"This triggering INSERT statement is not executed, but this event causes the trigger action to be executed instead, invoking the instab( ) SPL routine. The INSERT statements in the SPL routine insert new values into both the emp and dept base tables of the manager_info view.";}i:2;i:19414;}i:570;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19688;}i:571;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:19691;}i:572;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"6.5 Prepared Statements";i:1;i:2;i:2;i:19691;}i:2;i:19691;}i:573;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:19691;}i:574;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19691;}i:575;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:178:"A PREPARED STATEMENT is a server-side object that can be used to optimize performance. When creating a prepared statement, parameters are referred by position, using $1, $2, etc.";}i:2;i:19728;}i:576;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19906;}i:577;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:142:"
PREPARE seniorPerCountry (text, bigint) AS
SELECT country, count(*),avg(age)
FROM customers WHERE country = $1 and age > $2
GROUP BY country
";i:1;N;i:2;N;}i:2;i:19913;}i:578;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19913;}i:579;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:"When a statement is PREPARED, it is parsed, analyzed, and rewritten according to the compilation phase:";}i:2;i:20065;}i:580;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20168;}i:581;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:20168;}i:582;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20168;}i:583;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20168;}i:584;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:" Parsing/Normalization Phase: Syntax check, Semantic check, Check existence of tables and columns in the query.";}i:2;i:20172;}i:585;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20283;}i:586;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20283;}i:587;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20283;}i:588;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20283;}i:589;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:" Compilation Phase: Convert query into Machine understandable format";}i:2;i:20287;}i:590;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20355;}i:591;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20355;}i:592;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20355;}i:593;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20355;}i:594;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:" Query Optimization Phase: Checking possible ways to execute Query, Choosing the best-optimized way to execute the query";}i:2;i:20359;}i:595;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20479;}i:596;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20479;}i:597;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20479;}i:598;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20479;}i:599;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" Cache Phase: Stored the best-optimized way.";}i:2;i:20483;}i:600;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20527;}i:601;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20527;}i:602;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:20527;}i:603;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20527;}i:604;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"When an ";}i:2;i:20529;}i:605;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:20537;}i:606;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"EXECUTE";}i:2;i:20539;}i:607;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:20546;}i:608;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" command is subsequently issued, the prepared statement is planned and executed.";}i:2;i:20548;}i:609;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20634;}i:610;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:82:"
EXECUTE seniorPerCountry('France',60);
EXECUTE seniorPerCountry('Australia',75);
";i:1;N;i:2;N;}i:2;i:20634;}i:611;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20634;}i:612;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"The execution phase:";}i:2;i:20726;}i:613;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20746;}i:614;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:20746;}i:615;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20746;}i:616;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20746;}i:617;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" Search cache: Find the stored the best-optimized way in the cache.";}i:2;i:20750;}i:618;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20817;}i:619;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20817;}i:620;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20817;}i:621;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20817;}i:622;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:" Placeholder replacement: Initialize the execution plan with specific parameter values.";}i:2;i:20821;}i:623;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20908;}i:624;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20908;}i:625;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20908;}i:626;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20908;}i:627;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" Execution Phase: Run the statement. ";}i:2;i:20912;}i:628;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20949;}i:629;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20949;}i:630;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:20949;}i:631;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20949;}i:632;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:"This division of labor avoids repetitive parse analysis work while allowing the execution plan to depend on the specific parameter values supplied.";}i:2;i:20951;}i:633;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21098;}i:634;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21098;}i:635;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:"Prepared statements only last for the duration of the ";}i:2;i:21100;}i:636;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:21154;}i:637;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"current database session";}i:2;i:21156;}i:638;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:21180;}i:639;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:252:". This also means that a single prepared statement cannot be used by multiple simultaneous database clients; however, each client can create its own prepared statement to use. Prepared statements can be manually cleaned up using the DEALLOCATE command.";}i:2;i:21182;}i:640;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21434;}i:641;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:39:"
DEALLOCATE [ PREPARE ] { name | ALL }
";i:1;N;i:2;N;}i:2;i:21441;}i:642;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:21490;}i:643;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"6.6 Partitioning";i:1;i:2;i:2;i:21490;}i:2;i:21490;}i:644;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:21490;}i:645;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21490;}i:646;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:21520;}i:647;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:597:"As time goes by, the velocity and volume of the data increase more and more and queries become slower and slower as whole tables need to be scanned.“ But what happens in cases there is no need for a full scan? Imagine the compilation of monthly business intelligence reports. The only data
that are actually needed are those that were produced during the last month. Before creating any partitions you should try to exhaust all other alternative options including table indexing and revision of queries. The exact point at which a table will benefit from partitioning depends on the application.";}i:2;i:21521;}i:648;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22118;}i:649;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22118;}i:650;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"Partitioning can provide several benefits:";}i:2;i:22121;}i:651;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22163;}i:652;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:22163;}i:653;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:22163;}i:654;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:22163;}i:655;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:359:" Query performance can be improved dramatically in certain situations, particularly when most of the heavily accessed rows of the table are in a single partition or a small number of partitions. The partitioning substitutes for leading columns of indexes, reducing index size and making it more likely that the heavily-used parts of the indexes fit in memory.";}i:2;i:22167;}i:656;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:22526;}i:657;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:22526;}i:658;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:22526;}i:659;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:22526;}i:660;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:242:" When queries or updates access a large percentage of a single partition, performance can be improved by taking advantage of sequential scan of that partition instead of using an index and random access reads scattered across the whole table.";}i:2;i:22530;}i:661;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:22772;}i:662;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:22772;}i:663;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:22772;}i:664;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:22772;}i:665;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:214:" Bulk loads and deletes can be accomplished by adding or removing partitions if that requirement is planned into the partitioning design. ALTER TABLE and DROP TABLE are both far faster than a bulk DELETE operation.";}i:2;i:22776;}i:666;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:22990;}i:667;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:22990;}i:668;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:22990;}i:669;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:22990;}i:670;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" Seldom-used data can be migrated to cheaper and slower storage media.";}i:2;i:22994;}i:671;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:23064;}i:672;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:23064;}i:673;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:23064;}i:674;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:23066;}i:675;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:36:"6.6.1 Should A Table Be Partitioned?";i:1;i:3;i:2;i:23066;}i:2;i:23066;}i:676;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:23066;}i:677;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23066;}i:678;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:160:"Partitioning can drastically improve performance on a table when done right, but if done wrong or when not needed, it can make performance worse, even unusable.";}i:2;i:23114;}i:679;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23274;}i:680;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23274;}i:681;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:23276;}i:682;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"How big is your target table?";}i:2;i:23278;}i:683;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:23307;}i:684;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:395:"
There is no real hardline rule for how big a table must be before partitioning is an option, but based on database access trends, database users and administrators will start to see the performance on a specific table start to degrade as it gets bigger. In general, partitioning should only be considered when someone says “I can’t do X because the table is too big.” For some hosts, 200 ";}i:2;i:23309;}i:685;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"GB";}i:2;i:23704;}i:686;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:" could be the right time to partition, for others, it may be time to partition when it hits 1TB.";}i:2;i:23706;}i:687;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23802;}i:688;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23802;}i:689;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:361:"If the table is determined to be “too big”, it’s time to look at the access patterns. Either by knowing the applications that access the database, or by monitoring logs and generating query reports with something like pgBadger, we can see how a table is accessed, and depending on how it’s accessed, we can have options for a good partitioning strategy.";}i:2;i:23804;}i:690;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24165;}i:691;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24165;}i:692;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:"To learn more about pgBadger and how to use it, please check out this link (";}i:2;i:24167;}i:693;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:62:"https://severalnines.com/blog/postgresql-log-analysis-pgbadger";i:1;N;}i:2;i:24243;}i:694;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:").";}i:2;i:24305;}i:695;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24307;}i:696;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:24309;}i:697;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:34:"6.6.2 Different partitioning types";i:1;i:3;i:2;i:24309;}i:2;i:24309;}i:698;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:24309;}i:699;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24309;}i:700;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:"Postgresql offers built-in support for the following forms of partitioning:";}i:2;i:24355;}i:701;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24430;}i:702;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:24430;}i:703;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:24430;}i:704;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:24430;}i:705;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:" List Partitioning - The table is partitioned by explicitly listing which key values appear in each partition.";}i:2;i:24434;}i:706;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:24544;}i:707;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:24544;}i:708;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:24544;}i:709;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:24544;}i:710;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:186:" Range Partitioning - The table is partitioned into “ranges” defined by a key column or set of columns, with no overlap between the ranges of values assigned to different partitions.";}i:2;i:24548;}i:711;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:24734;}i:712;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:24734;}i:713;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:24734;}i:714;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:24734;}i:715;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:256:" Hash Partitioning - The table is partitioned by specifying a modulus and a remainder for each partition. Each partition will hold the rows for which the hash value of the partition key divided by the specified modulus will produce the specified remainder.";}i:2;i:24738;}i:716;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:24994;}i:717;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:24994;}i:718;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:24994;}i:719;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:24996;}i:720;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"6.6.3 List Partitioning";i:1;i:3;i:2;i:24996;}i:2;i:24996;}i:721;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:24996;}i:722;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24996;}i:723;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:202:"We can partition a table(divide a table into sub-tables) by using arbitary value in a list. For example we want to partition sales table by using location(e.g. city list). 
Sales:  
* East Region Sales:";}i:2;i:25031;}i:724;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25233;}i:725;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:25233;}i:726;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25233;}i:727;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25233;}i:728;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" New York";}i:2;i:25237;}i:729;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25246;}i:730;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25246;}i:731;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25246;}i:732;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25246;}i:733;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Virginia";}i:2;i:25250;}i:734;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25259;}i:735;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25259;}i:736;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25259;}i:737;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25259;}i:738;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" Florida";}i:2;i:25263;}i:739;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25271;}i:740;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25271;}i:741;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:25271;}i:742;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25271;}i:743;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"* West Region Sales:";}i:2;i:25272;}i:744;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25292;}i:745;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:25292;}i:746;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25292;}i:747;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25292;}i:748;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" California";}i:2;i:25296;}i:749;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25307;}i:750;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25307;}i:751;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25307;}i:752;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25307;}i:753;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" Oregon";}i:2;i:25311;}i:754;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25318;}i:755;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25318;}i:756;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25318;}i:757;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25318;}i:758;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" Havaii";}i:2;i:25322;}i:759;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25329;}i:760;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25329;}i:761;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:25329;}i:762;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25329;}i:763;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"* Central Region Sales:";}i:2;i:25330;}i:764;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25353;}i:765;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:25353;}i:766;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25353;}i:767;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25353;}i:768;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Illinois";}i:2;i:25357;}i:769;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25366;}i:770;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25366;}i:771;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25366;}i:772;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25366;}i:773;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" Texas";}i:2;i:25370;}i:774;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25376;}i:775;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25376;}i:776;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25376;}i:777;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25376;}i:778;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Missouri";}i:2;i:25380;}i:779;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25389;}i:780;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25389;}i:781;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:25389;}i:782;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25389;}i:783;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:"Note that you can put any value you want in each list. You can even put Beijin in the Central Region Sales table. ";}i:2;i:25391;}i:784;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25505;}i:785;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:25507;}i:786;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"6.6.4 Range Partitioning";i:1;i:3;i:2;i:25507;}i:2;i:25507;}i:787;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:25507;}i:788;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25507;}i:789;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:190:"We can partition a table by using value ranges of a column. For example, we can partition the sales table by using date, in this example, we divide a year by four quarters(e.g. Q1,Q2,Q3,Q4).";}i:2;i:25544;}i:790;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25734;}i:791;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:25736;}i:792;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"6.6.5 Hash Partitioning";i:1;i:3;i:2;i:25736;}i:2;i:25736;}i:793;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:25736;}i:794;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25736;}i:795;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:235:"The table is partitioned by specifying a modulus and a remainder for each partition. Each partition will hold the rows for which the hash value of the partition key divided by the specified modulus will produce the specified remainder.";}i:2;i:25771;}i:796;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26006;}i:797;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26006;}i:798;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:428:"Using this approach, data is randomly distributed across the partitions rather than grouped. This is a good approach for some data, but may not be an effective way to manage historical data. However, hash partitions share some performance characteristics with range partitions. For example, partition pruning is limited to equality predicates. You can also use partition-wise joins, parallel index access, and parallel DML. See ";}i:2;i:26008;}i:799;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:26436;}i:800;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"Partition-Wise Joins";}i:2;i:26437;}i:801;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:26457;}i:802;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" for more information.";}i:2;i:26458;}i:803;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26480;}i:804;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:26482;}i:805;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"6.6.6 Standard syntax";i:1;i:3;i:2;i:26482;}i:2;i:26482;}i:806;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:26482;}i:807;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26482;}i:808;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"The specification of a partitioned table consists of";}i:2;i:26515;}i:809;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26567;}i:810;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:26567;}i:811;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:26567;}i:812;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:26567;}i:813;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" The partitioning method";}i:2;i:26571;}i:814;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:26595;}i:815;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:26595;}i:816;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:26595;}i:817;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:26595;}i:818;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:" A list of columns or expressions to be used as the partition key";}i:2;i:26599;}i:819;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:26664;}i:820;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:26664;}i:821;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:26664;}i:822;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26664;}i:823;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:210:"Partitions may themselves be defined as partitioned tables, using what is called sub-partitioning. Partitions may have their own indexes, constraints and default values, distinct from those of other partitions.";}i:2;i:26666;}i:824;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26876;}i:825;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:26878;}i:826;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Example";i:1;i:4;i:2;i:26878;}i:2;i:26878;}i:827;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:26878;}i:828;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:741:"
# create main table
CREATE TABLE measurement (
logdate date not null,
peaktemp int,
humidity int
) PARTITION BY RANGE (logdate);

# crete sub table
CREATE TABLE measurement_y2018m1 PARTITION OF measurement
FOR VALUES FROM ('2018-01-01') TO ('2018-02-01');
CREATE TABLE measurement_y2018m2 PARTITION OF measurement
FOR VALUES FROM ('2018-02-01') TO ('2018-03-01');
… … …
CREATE TABLE measurement_y2019m1 PARTITION OF measurement
FOR VALUES FROM ('2019-01-01') TO ('2019-02-01');

# insert the value into the table
INSERT INTO measurement (logdate, peaktemp, humidity) VALUES ('2018-02-10', 24, 52);

# note that we insert the value into the main table in the SQL query, but the inseration goes into the sub table measurement_y2018m2. 
";i:1;N;i:2;N;}i:2;i:26900;}i:829;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:27651;}i:830;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"6.6.7 Partition Maintenance";i:1;i:3;i:2;i:27651;}i:2;i:27651;}i:831;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:27651;}i:832;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27651;}i:833;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:"We can add and remove partitions at any time, for example, we add a new partition into partitioned table measurement.";}i:2;i:27690;}i:834;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27813;}i:835;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:667:"
# add a new partition (short version)
CREATE TABLE measurement_y2008m02 PARTITION OF measurement FOR VALUES FROM ('2008-02-01') TO ('2008-03-01')

# add a new partition (long version)
CREATE TABLE measurement_y2008m02(LIKE measurement INCLUDING DEFAULTS INCLUDING CONSTRAINTS) TABLESPACE fasttablespace;

ALTER TABLE measurement_y2008m02 ADD CONSTRAINT y2008m02 CHECK ( logdate >= DATE '2008-02-01' AND logdate < DATE '2008-03-01' );

ALTER TABLE measurement ATTACH PARTITION measurement_y2008m02 FOR VALUES FROM ('2008-02-01') TO ('2008-03-01' );

# Delete a partition
ALTER TABLE measurement DETACH PARTITION measurement_y2006m02;
DROP TABLE measurement_y2006m02;
";i:1;N;i:2;N;}i:2;i:27813;}i:836;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:28490;}i:837;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"6.6.8 Partition index";i:1;i:3;i:2;i:28490;}i:2;i:28490;}i:838;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:28490;}i:839;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28490;}i:840;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:164:"Create an index on the main table, will automatically create one index on each partition, and any partitions you create or attach later will also contain the index.";}i:2;i:28523;}i:841;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28687;}i:842;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:64:" 
# index on main table
CREATE INDEX ON measurement (logdate); 
";i:1;N;i:2;N;}i:2;i:28694;}i:843;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28694;}i:844;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Limitations:";}i:2;i:28768;}i:845;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28780;}i:846;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:28780;}i:847;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:28780;}i:848;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:28780;}i:849;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" Primary keys are supported on partitioned tables.";}i:2;i:28784;}i:850;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:28834;}i:851;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:28834;}i:852;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:28834;}i:853;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:28834;}i:854;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:149:" Foreign keys referencing partitioned tables are not supported but foreign key references from a partitioned table to some other table are supported.";}i:2;i:28838;}i:855;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:28987;}i:856;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:28987;}i:857;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:28987;}i:858;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:28987;}i:859;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:" BEFORE ROW triggers must be defined on individual partitions(sub table), not the partitioned table (main table).";}i:2;i:28991;}i:860;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:29104;}i:861;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:29104;}i:862;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:29104;}i:863;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:29105;}i:864;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:29105;}}