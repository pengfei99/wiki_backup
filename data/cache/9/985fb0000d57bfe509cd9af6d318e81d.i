a:29:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"Java Thread Pool";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:387:"Why you need thread pool in Java? The answer is usually when you develop a simple, concurrent application in Java, you create some Runnable objects and then create the corresponding Thread objects to execute them. Creating a thread in Java is an expensive operation. And if you start creating new thread instance every time to execute a task, application performance will degrade surely.";}i:2;i:34;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:421;}i:6;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:423;}i:7;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Threads pool";i:1;i:2;i:2;i:423;}i:2;i:423;}i:8;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:423;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:423;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"There are various thread pools in java:";}i:2;i:449;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:488;}i:12;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:488;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:162:"Single Thread Executor: A thread pool with only one thread. So all the submitted tasks will be executed sequentially. Method : Executors.newSingleThreadExecutor()";}i:2;i:490;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:652;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:652;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:294:"Cached Thread Pool: A thread pool that creates as many threads it needs to execute the task in parallel. The old available threads will be reused for the new tasks. If a thread is not used for 60 seconds, it will be terminated and removed from the pool. Method : Executors.newCachedThreadPool()";}i:2;i:654;}i:17;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:948;}i:18;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:948;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:210:"Fixed Thread Pool: A thread pool with a fixed number of threads. If a thread is not available for the task, the task is put in a queue waiting for the other task to ends. Method : Executors.newFixedThreadPool()";}i:2;i:950;}i:20;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1160;}i:21;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1160;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:"Scheduled Thread Pool: A thread pool made to schedule future task. Method : Executors.newScheduledThreadPool()";}i:2;i:1162;}i:23;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1272;}i:24;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1272;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:143:"Single Thread Scheduled Pool: A thread pool with only one thread to schedule future task. Method : Executors.newSingleThreadScheduledExecutor()";}i:2;i:1274;}i:26;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1417;}i:27;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1417;}i:28;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:1417;}}