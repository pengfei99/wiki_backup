a:225:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:32:"Lesson09: SQL query optimization";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:49;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:34:"9.1 General sql query optimization";i:1;i:2;i:2;i:49;}i:2;i:49;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:49;}i:6;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:97;}i:7;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:39:"9.1.1 Select fields instead of select *";i:1;i:3;i:2;i:97;}i:2;i:97;}i:8;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:97;}i:9;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:121:"
# EFFICIENT
SELECT FirstName, LastName, Address, City, State, Zip FROM Customers

# INEFFICIENT
SELECT * FROM Customers
";i:1;s:3:"sql";i:2;N;}i:2;i:153;}i:10;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:288;}i:11;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:49:"9.1.2 Select more fields to avoid select distinct";i:1;i:3;i:2;i:288;}i:2;i:288;}i:12;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:288;}i:13;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:260:"
# Inefficient and inaccurate, because doesn’t account for multiple people in the same state having the same first and last name.
SELECT DISTINCT FirstName, LastName, State FROM Customers

SELECT FirstName, LastName, Address, City, State, Zip FROM Customers
";i:1;s:3:"sql";i:2;N;}i:2;i:354;}i:14;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:628;}i:15;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:53:"9.1.3  Create Joins with INNER JOIN Rather than WHERE";i:1;i:3;i:2;i:628;}i:2;i:628;}i:16;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:628;}i:17;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:458:"
# The below query create a cross join (catesian product) on two tables then filter the result with the where clause
SELECT Customers.CustomerID, Customers.Name, Sales.LastSaleDate
FROM Customers, Sales
WHERE Customers.CustomerID = Sales.CustomerID

# The inner join will filter the result while doing inner join
SELECT Customers.CustomerID, Customers.Name, Sales.LastSaleDate
FROM Customers
   INNER JOIN Sales
   ON Customers.CustomerID = Sales.CustomerID
";i:1;s:3:"sql";i:2;N;}i:2;i:698;}i:18;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1170;}i:19;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:51:"9.1.4 Use WHERE instead of HAVING to Define Filters";i:1;i:3;i:2;i:1170;}i:2;i:1170;}i:20;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1170;}i:21;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1170;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:310:"Similarly to the above mentioend concept, the goal of an efficient query is to pull only the required records from the database. Per the SQL Order of Operations, HAVING statements are calculated after WHERE statements. If the intent is to filter a query based on conditions, a WHERE statement is more efficient";}i:2;i:1233;}i:23;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1543;}i:24;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1543;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:"For example, let’s assume 200 sales have been made in the year 2016, and we want to query for the number of sales per customer in 2016.";}i:2;i:1545;}i:26;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1682;}i:27;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:807:"
# The below query would pull 1,000 sales records from the Sales table, then filter for the 200 records generated in the year 2016, and finally count the records in the data set
SELECT Customers.CustomerID, Customers.Name, Count(Sales.SalesID)
FROM Customers
   INNER JOIN Sales
   ON Customers.CustomerID = Sales.CustomerID
GROUP BY Customers.CustomerID, Customers.Name
HAVING Sales.LastSaleDate BETWEEN #1/1/2016# AND #12/31/2016#

# In comparison, WHERE clauses limit the number of records pulled, it will only pull the 200 records from the year 2016
SELECT Customers.CustomerID, Customers.Name, Count(Sales.SalesID)
FROM Customers 
  INNER JOIN Sales
  ON Customers.CustomerID = Sales.CustomerID
WHERE Sales.LastSaleDate BETWEEN #1/1/2016# AND #12/31/2016#
GROUP BY Customers.CustomerID, Customers.Name
";i:1;s:3:"sql";i:2;N;}i:2;i:1689;}i:28;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1689;}i:29;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2510;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"HAVING";}i:2;i:2512;}i:31;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2518;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:174:" should only be used when filtering on an aggregated field. In the query above, we could additionally filter for customers with greater than 5 sales using a HAVING statement.";}i:2;i:2520;}i:33;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2694;}i:34;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:288:"
SELECT Customers.CustomerID, Customers.Name, Count(Sales.SalesID)
FROM Customers
   INNER JOIN Sales 
   ON Customers.CustomerID = Sales.CustomerID
WHERE Sales.LastSaleDate BETWEEN #1/1/2016# AND #12/31/2016#
GROUP BY Customers.CustomerID, Customers.Name
HAVING Count(Sales.SalesID) > 5
";i:1;s:3:"sql";i:2;N;}i:2;i:2701;}i:35;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3003;}i:36;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:36:"9.2 Create indexes, but do it wisely";i:1;i:2;i:2;i:3003;}i:2;i:3003;}i:37;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3003;}i:38;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3054;}i:39;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"9.2.1 One Index per table";i:1;i:3;i:2;i:3054;}i:2;i:3054;}i:40;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3054;}i:41;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3054;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:369:"As a general rule of thumb, MySQL/Postgresql can only use one index for each table in the query. Therefore, there is no point in creating more than one index for each query. Preferably, same indexes should match as many of the queries as possible, as it will reduce the load on the database when inserting or updating data (which requires updating the indexes as well).";}i:2;i:3091;}i:43;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3460;}i:44;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3462;}i:45;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:55:"9.2.2 Create the index on the most often queried column";i:1;i:3;i:2;i:3462;}i:2;i:3462;}i:46;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3462;}i:47;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3462;}i:48;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:154:"Which column you choose when you create indexes is the first question you need to ask. It depends on which kind of SQL queries and which column it access.";}i:2;i:3528;}i:49;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3682;}i:50;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3682;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"In general, when creating an index, the most important parts are the ";}i:2;i:3684;}i:52;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3753;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"equality conditions";}i:2;i:3755;}i:54;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3774;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" in the ";}i:2;i:3776;}i:56;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3784;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"WHERE";}i:2;i:3786;}i:58;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3791;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:3793;}i:60;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3798;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"JOIN";}i:2;i:3800;}i:62;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3804;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:294:" conditions of your SQL queries. In most cases, conditions such as name = ‘John’ will allow the database to filter most of the rows from the table and go through a small amount of rows to return the required results. Therefore, we should start indexing by adding these columns to the index.";}i:2;i:3806;}i:64;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4100;}i:65;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4100;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"Then, you should look into the ";}i:2;i:4102;}i:67;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4133;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"range conditions";}i:2;i:4135;}i:69;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4151;}i:70;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:274:", but you should only add one of them – the most selective one, as MySQL can’t handle more of them. In some cases when there are no range conditions, it makes sense to add the GROUP BY / ORDER BY columns, assuming the ordering is done in only one direction (ASC / DESC).";}i:2;i:4153;}i:71;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4427;}i:72;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4427;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:461:"In some cases, it also makes sense to create a separate index that contains the ORDER BY clause’s columns, as MySQL sometimes chooses to use it. Please note though that for this to happen, the index should contain all columns from the ORDER BY clause and they should all be specified with the same order (ASC / DESC). This doesn’t guarantee that the database’s optimizer will pick this index rather than the other compound indexes, but it’s worth a try.";}i:2;i:4430;}i:74;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4891;}i:75;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4894;}i:76;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Examples";i:1;i:4;i:2;i:4894;}i:2;i:4894;}i:77;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:4894;}i:78;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4894;}i:79;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:"Suppose we have the following query as the most frequently used queries";}i:2;i:4912;}i:80;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4983;}i:81;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:143:"
SELECT id, first_name, last_name, age from employees where first_name = ‘John’ AND last_name = ‘Brack’ and age > 25 ORDER BY age ASC;
";i:1;s:3:"sql";i:2;N;}i:2;i:4990;}i:82;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4990;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:390:"For this query, we’ll start with adding the columns first_name and last_name, which are compared with an equality operator. Then, we’ll add the age column which is compared with a range condition. No need to have the ORDER BY clause indexed here, as the age column is already in the index. Last but not least, we’ll add id from the SELECT clause to the index to have a covering index.";}i:2;i:5147;}i:84;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5537;}i:85;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5537;}i:86;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"So to index this query properly, you should add the index:";}i:2;i:5539;}i:87;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5603;}i:88;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:72:"
create index pri_index on employees (first_name, last_name, age, id).;
";i:1;N;i:2;N;}i:2;i:5603;}i:89;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5685;}i:90;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"9.2.3 Not to do when indexing";i:1;i:3;i:2;i:5685;}i:2;i:5685;}i:91;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5685;}i:92;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5726;}i:93;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:54:"Indexing each and every column in the table separately";i:1;i:4;i:2;i:5726;}i:2;i:5726;}i:94;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:5726;}i:95;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5726;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:"In most cases, MySQL won’t be able to use more than one index for each table in the query.";}i:2;i:5789;}i:97;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5881;}i:98;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5881;}i:99;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:259:"Therefore, when creating a separate index for each column in the table, the database is bound to perform only one of the search operations using an index, and the rest of them will be significantly slower, as the database can’t use an index to execute them.";}i:2;i:5883;}i:100;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6142;}i:101;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6142;}i:102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:"We recommend using compound indexes (explained later in this article) rather than single-column indexes.";}i:2;i:6144;}i:103;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6248;}i:104;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6250;}i:105;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:39:"The OR operator in filtering conditions";i:1;i:4;i:2;i:6250;}i:2;i:6250;}i:106;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:6250;}i:107;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6250;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:"Consider this query:
SELECT a, b FROM tbl WHERE a = 3 OR b = 8.";}i:2;i:6299;}i:109;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6362;}i:110;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6362;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:"In many cases, MySQL won’t be able to use an index to apply an OR condition, and as a result, this query is not ";}i:2;i:6364;}i:112;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6478;}i:113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"indexable";}i:2;i:6480;}i:114;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:6489;}i:115;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:6491;}i:116;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6492;}i:117;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6492;}i:118;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:214:"Therefore, we recommend to avoid such OR conditions and consider splitting the query to two parts, combined with a UNION DISTINCT (or even better, UNION ALL, in case you know there won’t be any duplicate results)";}i:2;i:6494;}i:119;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6708;}i:120;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6710;}i:121;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"Adding redundant indexes";i:1;i:4;i:2;i:6710;}i:2;i:6710;}i:122;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:6710;}i:123;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6710;}i:124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:"Indexes are magnificent when trying to optimize your SQL queries and they can improve performance significantly.";}i:2;i:6744;}i:125;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6856;}i:126;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6856;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:307:"But, they come with a downside as well. Each index you’re creating should be kept updated and in sync when changes occur in your databases. So for each INSERT / UPDATE / DELETE in your databases, all relevant indexes should be updated. This update can take some time, especially with large tables/indexes.";}i:2;i:6858;}i:128;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7165;}i:129;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7165;}i:130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:"Therefore, do not create indexes unless you know you’ll need them.";}i:2;i:7167;}i:131;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7235;}i:132;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7235;}i:133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:"Also, we highly recommend analyzing your database once in a while, searching for any redundant indexes that can be removed.";}i:2;i:7237;}i:134;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7360;}i:135;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7362;}i:136;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:45:"The order of columns in an index is important";i:1;i:4;i:2;i:7362;}i:2;i:7362;}i:137;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:7362;}i:138;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7362;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:334:"Let’s say I hand you my contacts phone book which is ordered by the contact’s first name and ask you to count how many people are there named “John” in the book. You’ll grab the book in both hands and say “no problem”. You will navigate to the page that holds all names starting with John, and start counting from there.";}i:2;i:7417;}i:140;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7751;}i:141;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7751;}i:142;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:278:"Now, let’s say I change the assignment and hand you a phone book that is ordered by the contact’s last name, but ask you to still count all contacts with the first name “John”. How would you approach that? Well, the database scratches his head in this situation as well.";}i:2;i:7753;}i:143;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8031;}i:144;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8031;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:162:"Now lets look at an SQL query to demonstrate the same behavior with the MySQL optimizer:
SELECT first_name, last_name FROM contacts WHERE first_name = ‘John’;";}i:2;i:8033;}i:146;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8195;}i:147;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8195;}i:148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:169:"Having the index contacts (first_name, last_name) is ideal here, because the index starts with our filtering condition and ends with another column in the SELECT clause.";}i:2;i:8197;}i:149;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8366;}i:150;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8366;}i:151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:194:"But, having the reverse index contacts (last_name, first_name) is rather useless, as the database can’t use the index for filtering, as the column we need is second in the index and not first.";}i:2;i:8368;}i:152;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8562;}i:153;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8562;}i:154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:"The conclusion from this example is that the order of columns in an index is rather important.";}i:2;i:8564;}i:155;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8658;}i:156;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8660;}i:157;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:49:"9.3 Change your query to use the existing indexes";i:1;i:2;i:2;i:8660;}i:2;i:8660;}i:158;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:8660;}i:159;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8660;}i:160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:187:"You should use the explain command to see, if your query use the indexes or not. Becuase, in general, a lot of query will make your database don't use your index. Below are some examples.";}i:2;i:8723;}i:161;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8910;}i:162;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8912;}i:163;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:51:"9.3.1 Avoid wrapping indexed columns with functions";i:1;i:3;i:2;i:8912;}i:2;i:8912;}i:164;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:8912;}i:165;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8912;}i:166;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:169:"Consider this query, which counts the number of hot dogs purchased in the US on 2018. Just in case you’re curious, 18,000,000,000 hot dogs were sold in the US in 2018.";}i:2;i:8975;}i:167;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9144;}i:168;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:81:"
SELECT count(*) FROM us_hotdog_purchases WHERE YEAR(purchase_time) = ‘2018’
";i:1;s:3:"sql";i:2;N;}i:2;i:9151;}i:169;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9151;}i:170;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:225:"As you can see, we are using the YEAR function to grab the year part from the purchase_time column. This function call will prevent the database from being able to use an index for the purchase_time column search, because we ";}i:2;i:9246;}i:171;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:9471;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:"indexed the value of purchase_time, but not the return value of YEAR(purchase_time)";}i:2;i:9473;}i:173;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:9556;}i:174;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:9558;}i:175;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9559;}i:176;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9559;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:"The following query will return the same result, but with the help of index";}i:2;i:9561;}i:178;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9642;}i:179;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:117:"
SELECT count(*) FROM us_hotdog_purchases WHERE purchased_at >= ‘2018-01-01’ AND purchased_at < ‘2019-01-01’
";i:1;s:3:"sql";i:2;N;}i:2;i:9642;}i:180;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9774;}i:181;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"9.3.2 Avoid Or conditions";i:1;i:3;i:2;i:9774;}i:2;i:9774;}i:182;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:9774;}i:183;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9774;}i:184;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:"Consider this query, which selects the amount of posts on Facebook posted after new year’s eve, or posted by a user named Mark.";}i:2;i:9811;}i:185;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9940;}i:186;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:91:"
SELECT count(*) FROM fb_posts WHERE username = ‘Mark’ OR post_time > ‘2018-01-01’
";i:1;s:3:"sql";i:2;N;}i:2;i:9947;}i:187;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9947;}i:188;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:316:"Having an index on both the username and post_time columns might sound helpful, but in most cases, the database won’t use it, at least not in full. The reason will be the connection between the two conditions – the OR operator, which makes the database fetch the results of each part of the condition separately.";}i:2;i:10052;}i:189;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10368;}i:190;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10368;}i:191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:313:"An alternative way to look at this query can be to ‘split’ the OR condition and ‘combine’ it using a UNION clause. This alternative will allow you to index each of the conditions separately, so the database will use the indexes to search for the results and then combine the results with the UNION clause.";}i:2;i:10370;}i:192;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10683;}i:193;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:114:"
SELECT …
FROM …
WHERE username = ‘Mark’
    UNION
SELECT …
FROM …
WHERE post_time > ‘2018-01-01’
";i:1;s:3:"sql";i:2;N;}i:2;i:10690;}i:194;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10818;}i:195;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"9.3.3 Avoid sorting with a mixed order";i:1;i:3;i:2;i:10818;}i:2;i:10818;}i:196;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:10818;}i:197;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10818;}i:198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:"Consider this query, which selects all posts from Facebook and sorts them by the username in ascending order, and then by the post date in descending order.";}i:2;i:10868;}i:199;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11024;}i:200;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:80:"
SELECT username, post_type FROM fb_posts ORDER BY username ASC, post_type DESC
";i:1;N;i:2;N;}i:2;i:11031;}i:201;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11031;}i:202;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:230:"MySQL (and so many other relational databases), cannot use indexes when sorting with a mixed order (both ASC and DESC in the same ORDER BY clause). This changed with the release of the reversed indexes functionality and MySQL 8.x.";}i:2;i:11121;}i:203;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11351;}i:204;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11353;}i:205;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:47:"9.3.4 Avoid LIKE searches with prefix wildcards";i:1;i:3;i:2;i:11353;}i:2;i:11353;}i:206;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:11353;}i:207;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11353;}i:208;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:190:"Consider this query, which searches all Facebook posts from a username which includes the string ‘Mar’, so we are searching for all posts written by users named Mark, Marcus, Almar, etc.";}i:2;i:11413;}i:209;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11603;}i:210;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:57:"
SELECT * FROM fb_posts WHERE username like ‘%Mar%’;
";i:1;s:3:"sql";i:2;N;}i:2;i:11610;}i:211;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11610;}i:212;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:163:"Having a wildcard ‘%’ at the beginning of the pattern will prevent the database from using an index for this column’s search. Such searches can take a while.";}i:2;i:11681;}i:213;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11844;}i:214;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11844;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:206:"In this case, there are two options to improve this query’s performance. The first one is trivial – consider whether the prefix wildcard is important enough. If you can manage without it, get rid of it.";}i:2;i:11846;}i:216;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12052;}i:217;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12052;}i:218;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:269:"Another option will be to use full-text indexes(create compound index on all columns). Please note though, that these indexes and the MATCH … AGAINST syntax isn’t free from challenges and has some differences when compared to the familiar LIKE expressions in MySQL.";}i:2;i:12054;}i:219;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12323;}i:220;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12323;}i:221;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:"Note that: use wildcards at the end of o phrase is acceptable. ";}i:2;i:12325;}i:222;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12388;}i:223;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12389;}i:224;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:12389;}}