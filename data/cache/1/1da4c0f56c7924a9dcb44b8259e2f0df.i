a:537:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"NIO学习总结";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:32;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"1.Java NIO 概览";i:1;i:2;i:2;i:32;}i:2;i:32;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:32;}i:6;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:64;}i:7;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"1.1 NIO简介:";i:1;i:3;i:2;i:64;}i:2;i:64;}i:8;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:64;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:64;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:"Java NIO 是 java 1.4, 之后新出的一套IO接口NIO中的N可以理解为Non-blocking，不单纯是New。";}i:2;i:90;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:200;}i:12;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:202;}i:13;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:32:"1.2 NIO的特性/NIO与IO区别:";i:1;i:3;i:2;i:202;}i:2;i:202;}i:14;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:202;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:202;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:"1)IO是面向流的，NIO是面向缓冲区的；
2)IO流是阻塞的，NIO流是不阻塞的;
3)NIO有选择器，而IO没有。";}i:2;i:247;}i:17;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:376;}i:18;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:378;}i:19;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:32:"1.3 读数据和写数据方式:";i:1;i:3;i:2;i:378;}i:2;i:378;}i:20;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:378;}i:21;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:378;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:206:"从通道(channel)进行数据读取 ：创建一个缓冲区(buffer)，然后请求通道读取数据。
从通道进行数据写入 ：创建一个缓冲区，填充数据，并要求通道写入数据。";}i:2;i:423;}i:23;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:629;}i:24;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:631;}i:25;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"1.3 NIO核心组件简单介绍";i:1;i:3;i:2;i:631;}i:2;i:631;}i:26;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:631;}i:27;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:673;}i:28;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:673;}i:29;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:673;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Channels";}i:2;i:677;}i:31;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:686;}i:32;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:686;}i:33;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:686;}i:34;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:686;}i:35;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" Buffers";}i:2;i:690;}i:36;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:698;}i:37;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:698;}i:38;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:698;}i:39;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:698;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Selectors";}i:2;i:702;}i:41;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:712;}i:42;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:712;}i:43;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:712;}i:44;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:714;}i:45;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"2. Java NIO 之 Buffer(缓冲区)";i:1;i:2;i:2;i:714;}i:2;i:714;}i:46;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:714;}i:47;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:762;}i:48;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"2.1 Buffer(缓冲区)介绍:";i:1;i:3;i:2;i:762;}i:2;i:762;}i:49;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:762;}i:50;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:801;}i:51;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:801;}i:52;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:801;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:132:" Java NIO Buffers用于和NIO Channel交互。 我们从Channel中读取数据到buffers里，从Buffer把数据写入到Channels；";}i:2;i:805;}i:54;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:937;}i:55;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:937;}i:56;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:937;}i:57;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:937;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" Buffer本质上就是一块内存区；";}i:2;i:941;}i:59;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:981;}i:60;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:981;}i:61;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:981;}i:62;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:981;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:" 一个Buffer有三个属性是必须掌握的，分别是：capacity容量、position位置、limit限制。";}i:2;i:985;}i:64;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1094;}i:65;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1094;}i:66;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1094;}i:67;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1097;}i:68;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"2.2 Buffer的常见方法";i:1;i:3;i:2;i:1097;}i:2;i:1097;}i:69;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1097;}i:70;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1133;}i:71;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1133;}i:72;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1133;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" Buffer clear(): empty buffer";}i:2;i:1137;}i:74;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1166;}i:75;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1166;}i:76;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1166;}i:77;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1166;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:229:" Buffer compact(): 将所有未读的数据拷贝到Buffer起始处。然后将position设到最后一个未读元素后面。limit属性设置成capacity。现在Buffer准备好写数据了，但是不会覆盖未读的数据。";}i:2;i:1170;}i:79;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1399;}i:80;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1399;}i:81;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1399;}i:82;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1399;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:" Buffer flip(): Reset limit to the current pointer position, then reset the pointer to 0  ";}i:2;i:1403;}i:84;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1493;}i:85;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1493;}i:86;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1493;}i:87;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1493;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" Buffer rewind(): Reset pointer to 0";}i:2;i:1497;}i:89;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1533;}i:90;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1533;}i:91;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1533;}i:92;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1533;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:" Buffer position(int newPosition): set pointer to the given position";}i:2;i:1537;}i:94;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1605;}i:95;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1605;}i:96;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1605;}i:97;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1605;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:" mark() and reset(): mark标记Buffer中的一个特定position, 调用Buffer.reset()方法恢复到这个position";}i:2;i:1609;}i:99;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1723;}i:100;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1723;}i:101;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1723;}i:102;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1726;}i:103;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"2.3 Buffer的使用方式/方法介绍";i:1;i:3;i:2;i:1726;}i:2;i:1726;}i:104;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1726;}i:105;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1726;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"分配缓冲区（Allocating a Buffer）:";}i:2;i:1776;}i:107;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1817;}i:108;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:124:"
//以ByteBuffer为例子 写入数据到缓冲区（Writing Data to a Buffer）
ByteBuffer buf = ByteBuffer.allocate(28); 
";i:1;s:4:"java";i:2;N;}i:2;i:1824;}i:109;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1824;}i:110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"写数据到Buffer有两种方法：";}i:2;i:1964;}i:111;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2006;}i:112;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:137:"
1. 从Channel中写数据到Buffer： 
int bytesRead = inChannel.read(buf); //read into buffer.

2. 通过put写数据： buf.put(127);
";i:1;s:4:"java";i:2;N;}i:2;i:2006;}i:113;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2157;}i:114;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"2.4 Buffer常用方法测试";i:1;i:3;i:2;i:2157;}i:2;i:2157;}i:115;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2157;}i:116;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2157;}i:117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:"说实话，NIO编程真的难，通过后面这个测试例子，你可能才能勉强理解前面说的Buffer方法的作用。";}i:2;i:2197;}i:118;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2326;}i:119;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2328;}i:120;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:35:"3. Java NIO 之 Channel（通道）";i:1;i:2;i:2;i:2328;}i:2;i:2328;}i:121;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:2328;}i:122;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2378;}i:123;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"3.1 Channel（通道）介绍";i:1;i:3;i:2;i:2378;}i:2;i:2378;}i:124;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2378;}i:125;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2378;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:"通常来说NIO中的所有IO都是从 Channel（通道） 开始的。";}i:2;i:2419;}i:127;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2490;}i:128;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2490;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:"NIO Channel通道和流的区别：";}i:2;i:2492;}i:130;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2527;}i:131;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2527;}i:132;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2527;}i:133;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2527;}i:134;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:186:" 通道可以读也可以写，流一般来说是单向的（只能读或者写，所以之前我们用流进行IO操作的时候需要分别创建一个输入流和一个输出流）。";}i:2;i:2531;}i:135;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2717;}i:136;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2717;}i:137;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2717;}i:138;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2717;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" 通道可以异步读写。";}i:2;i:2721;}i:140;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2749;}i:141;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2749;}i:142;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2749;}i:143;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2749;}i:144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" 通道总是基于缓冲区Buffer来读写。";}i:2;i:2753;}i:145;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2799;}i:146;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2799;}i:147;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:2799;}i:148;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2799;}i:149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"Java NIO中最重要的几个Channel的实现：";}i:2;i:2801;}i:150;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2849;}i:151;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2849;}i:152;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2849;}i:153;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2849;}i:154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" FileChannel： 用于文件的数据读写";}i:2;i:2853;}i:155;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2896;}i:156;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2896;}i:157;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2896;}i:158;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2896;}i:159;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" DatagramChannel： 用于UDP的数据读写";}i:2;i:2900;}i:160;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2944;}i:161;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2944;}i:162;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2944;}i:163;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2944;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" SocketChannel： 用于TCP的数据读写，一般是客户端实现";}i:2;i:2948;}i:165;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3017;}i:166;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3017;}i:167;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3017;}i:168;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3017;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:128:" ServerSocketChannel: 允许我们监听TCP链接请求，每个请求会创建会一个SocketChannel，一般是服务器实现";}i:2;i:3021;}i:170;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3149;}i:171;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3149;}i:172;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:3149;}i:173;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3150;}i:174;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"3.2 FileChannel的使用";i:1;i:3;i:2;i:3150;}i:2;i:3150;}i:175;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3150;}i:176;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3150;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:154:"Because FileChannel是抽象类, normally, we need to use the getChannel() method of InputStream ， OutputStream 或 RandomAccessFile 获取FileChannel. ";}i:2;i:3185;}i:178;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3339;}i:179;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3339;}i:180;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:"We can also convert other channels to FileChannel, for example, ByteChannel. They both implemented the SeekableByteChannel interface.";}i:2;i:3341;}i:181;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3474;}i:182;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3474;}i:183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:115:"使用FileChannel读取数据到Buffer（缓冲区）以及利用Buffer（缓冲区）写入数据到FileChannel：";}i:2;i:3476;}i:184;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3591;}i:185;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:1185:"
public class FileChannelTxt{

    public static void main(String args[]) throws IOException{

//1.创建一个RandomAccessFile（随机访问文件）对象，        
RandomAccessFile raf=new RandomAccessFile("D:\\niodata.txt", "rw");

//通过RandomAccessFile对象的getChannel()方法。FileChannel是抽象类。        
FileChannel inChannel =raf.getChannel();

//2.创建一个读数据缓冲区对象
ByteBuffer buf=ByteBuffer.allocate(48);

//3.从通道中读取数据
int bytesRead = inChannel.read(buf);

//创建一个写数据缓冲区对象
ByteBuffer buf2=ByteBuffer.allocate(48);

//write data to buffer, then write buffer to channel
buf2.put("filechannel test".getBytes());
buf2.flip();
inChannel.write(buf);
  
while(bytesRead !=-1){

System.out.println("Read "+bytesRead);

//Buffer有两种模式，写模式和读模式。在写模式下调用flip()之后，Buffer从写模式变成读模式。
buf.flip();
   
//如果还有未读内容    
while(buf.hasRemaining()){
System.out.print((char)buf.get());

}

            
//清空缓存区
buf.clear();
bytesRead =inChannel.read(buf);
}
   
//关闭RandomAccessFile（随机访问文件）对象
raf.close();
}
}
";i:1;s:4:"java";i:2;N;}i:2;i:3598;}i:186;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4797;}i:187;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:48:"3.3 SocketChannel和ServerSocketChannel的使用";i:1;i:3;i:2;i:4797;}i:2;i:4797;}i:188;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4797;}i:189;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4797;}i:190;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:"利用SocketChannel和ServerSocketChannel实现客户端与服务器端简单通信：";}i:2;i:4857;}i:191;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4943;}i:192;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4943;}i:193;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:149:"SocketChannel 用于创建基于tcp协议的客户端对象，通过 connect()方法 ，SocketChannel对象可以连接到其他tcp服务器程序。";}i:2;i:4945;}i:194;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5094;}i:195;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5094;}i:196;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:"SeverSocketChannel use accept() method to accept connexion from client side.";}i:2;i:5096;}i:197;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5172;}i:198;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5172;}i:199;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:"For code example, please check Lesson01/Section05_Exploring_NIO/ChannelBasedIOExample.exp8(); ";}i:2;i:5174;}i:200;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5269;}i:201;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5269;}i:202;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"️3.4 DatagramChannel的使用";i:1;i:3;i:2;i:5269;}i:2;i:5269;}i:203;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5269;}i:204;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5269;}i:205;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:317:"DataGramChannel，类似于java 网络编程的DatagramSocket类；使用UDP进行网络传输， UDP是无连接，面向数据报文段的协议，对传输的数据不保证安全与完整 ；和上面介绍的SocketChannel和ServerSocketChannel的使用方法类似，所以这里就简单介绍一下如何使用";}i:2;i:5312;}i:206;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5629;}i:207;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5629;}i:208;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"1. get a DataGramChannel";}i:2;i:5631;}i:209;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5661;}i:210;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:224:"
//1.通过DatagramChannel的open()方法创建一个DatagramChannel对象
DatagramChannel datagramChannel = DatagramChannel.open();
        
//绑定一个port（端口）
datagramChannel.bind(new InetSocketAddress(1234));
";i:1;s:4:"java";i:2;N;}i:2;i:5661;}i:211;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5661;}i:212;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"2. 接收";}i:2;i:5901;}i:213;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5916;}i:214;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:77:"
ByteBuffer buf =ByteBuffer.allocate(48);
buf.clear();
channel.receive(buf);
";i:1;s:4:"java";i:2;N;}i:2;i:5916;}i:215;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5916;}i:216;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:297:"3. 发送消息
由于UDP下，服务端和客户端通信并不需要建立连接，只需要知道对方地址即可发出消息，但是是否发送成功或者成功被接收到是没有保证的;发送消息通过send方法发出，改方法返回一个int值，表示成功发送的字节数";}i:2;i:6008;}i:217;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6305;}i:218;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6305;}i:219;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:"这个例子发送一串字符：“datagramchannel”到主机名为”localhost”服务器的端口1234上。";}i:2;i:6307;}i:220;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6425;}i:221;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:180:"
ByteBuffer buf =ByteBuffer.allocate(48);
buf.clear();
buf.put("datagramchannel".getBytes());
buf.flip();
int send = channel.send(buffer, new InetSocketAddress("localhost",1234));
";i:1;s:4:"java";i:2;N;}i:2;i:6425;}i:222;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6620;}i:223;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"3.5 Scatter / Gather";i:1;i:3;i:2;i:6620;}i:2;i:6620;}i:224;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6620;}i:225;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6620;}i:226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:224:"Channel 提供了一种被称为 Scatter/Gather 的新功能，也称为本地矢量 I/O。Scatter/Gather 是指在多个缓冲区上实现一个简单的 I/O 操作。正确使用 Scatter / Gather可以明显提高性能。";}i:2;i:6652;}i:227;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6876;}i:228;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6876;}i:229;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:279:"大多数现代操作系统都支持本地矢量I/O（native vectored I/O）操作。当您在一个通道上请求一个Scatter/Gather操作时，该请求会被翻译为适当的本地调用来直接填充或抽取缓冲区，减少或避免了缓冲区拷贝和系统调用；";}i:2;i:6878;}i:230;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7157;}i:231;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7157;}i:232;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:"Scatter/Gather应该使用直接的ByteBuffers以从本地I/O获取最大性能优势。";}i:2;i:7159;}i:233;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7248;}i:234;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:7248;}i:235;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7248;}i:236;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7248;}i:237;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" Scatter: 从一个Channel读取的信息分散到N个缓冲区中(Buffer).";}i:2;i:7252;}i:238;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7327;}i:239;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7327;}i:240;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7327;}i:241;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7327;}i:242;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" Gather: 将N个Buffer里面内容按照顺序发送到一个Channel.";}i:2;i:7331;}i:243;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7400;}i:244;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7400;}i:245;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:7400;}i:246;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7400;}i:247;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:"Important note: 无论是scatter还是gather操作，都是按照buffer在数组中的顺序来依次读取或写入的";}i:2;i:7402;}i:248;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7522;}i:249;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7522;}i:250;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"3.5.1 Scattering Reads";i:1;i:4;i:2;i:7522;}i:2;i:7522;}i:251;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:7522;}i:252;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7522;}i:253;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:7553;}i:254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"scattering read";}i:2;i:7554;}i:255;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:7569;}i:256;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"是把数据从单个Channel写入到多个buffer";}i:2;i:7570;}i:257;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7619;}i:258;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:436:"
ByteBuffer header = ByteBuffer.allocate(128);
ByteBuffer body = ByteBuffer.allocate(1024);
//read()方法内部会负责把数据按顺序写进传入的buffer数组内。一个buffer写满后，接着写到下一个buffer中。
//举个例子，假如通道中有200个字节数据，那么header会被写入128个字节数据，body会被写入72个字节数据；
ByteBuffer[] bufferArray ={header,body};
channel.read(bufferArray);
";i:1;s:4:"java";i:2;N;}i:2;i:7626;}i:259;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8077;}i:260;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"3.5.2 Gathering Writes";i:1;i:4;i:2;i:8077;}i:2;i:8077;}i:261;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:8077;}i:262;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8077;}i:263;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:8108;}i:264;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"gathering write";}i:2;i:8109;}i:265;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:8124;}i:266;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"把多个buffer的数据写入到同一个channel中";}i:2;i:8125;}i:267;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8183;}i:268;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:566:"
ByteBuffer header = ByteBuffer.allocate(128);
ByteBuffer body = ByteBuffer.allocate(1024);
ByteBuffer[] bufferArray ={header,body};
//write()方法内部会负责把数据按顺序写入到channel中。
//并不是所有数据都写入到通道，写入的数据要根据position和limit的值来判断，只有position和limit之间的数据才会被写入；
// 举个例子，假如以上header缓冲区中有128个字节数据，但此时position=0，limit=58；那么只有下标索引为0-57的数据才会被写入到通道中。
channel.write(bufferArray);
";i:1;s:4:"java";i:2;N;}i:2;i:8183;}i:269;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8765;}i:270;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"3.6 通道之间的数据传输";i:1;i:3;i:2;i:8765;}i:2;i:8765;}i:271;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:8765;}i:272;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8765;}i:273;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:"在Java NIO中如果一个channel是FileChannel类型的，那么他可以直接把数据传输到另一个channel。";}i:2;i:8809;}i:274;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8926;}i:275;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:8926;}i:276;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8926;}i:277;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8926;}i:278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:" transferFrom() :transferFrom方法把数据从通道源传输到FileChannel";}i:2;i:8930;}i:279;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9006;}i:280;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9006;}i:281;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9006;}i:282;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9006;}i:283;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:" transferTo() :transferTo方法把FileChannel数据传输到另一个channel";}i:2;i:9010;}i:284;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9086;}i:285;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9086;}i:286;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:9086;}i:287;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9088;}i:288;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"3.6.1 transferFrom";i:1;i:4;i:2;i:9088;}i:2;i:9088;}i:289;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:9088;}i:290;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9088;}i:291;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:"FileChannel的transferFrom()方法可以将数据从源通道传输到FileChannel中";}i:2;i:9116;}i:292;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9200;}i:293;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:371:"
RandomAccessFile fromFile = new RandomAccessFile("fromFile.txt", "rw");  
FileChannel      fromChannel = fromFile.getChannel();  
 
RandomAccessFile toFile = new RandomAccessFile("toFile.txt", "rw");  
FileChannel      toChannel = toFile.getChannel();  
 
long position = 0;  
long count = fromChannel.size();  
 
toChannel.transferFrom(position, count, fromChannel);  
";i:1;s:4:"java";i:2;N;}i:2;i:9207;}i:294;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9207;}i:295;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:232:"方法的输入参数position表示从position处开始向目标文件写入数据，count表示最多传输的字节数。如果源通道的剩余空间小于 count 个字节，则所传输的字节数要小于请求的字节数。";}i:2;i:9593;}i:296;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9825;}i:297;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9825;}i:298;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:235:"此外要注意，在SoketChannel的实现中，SocketChannel只会传输此刻准备好的数据（可能不足count字节）。因此，SocketChannel可能不会将请求的所有数据(count个字节)全部传输到FileChannel中。";}i:2;i:9827;}i:299;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10062;}i:300;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10064;}i:301;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"3.6.2 transferTo";i:1;i:4;i:2;i:10064;}i:2;i:10064;}i:302;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:10064;}i:303;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:369:"
RandomAccessFile fromFile = new RandomAccessFile("fromFile.txt", "rw");  
FileChannel      fromChannel = fromFile.getChannel();  
 
RandomAccessFile toFile = new RandomAccessFile("toFile.txt", "rw");  
FileChannel      toChannel = toFile.getChannel();  
 
long position = 0;  
long count = fromChannel.size();  
 
fromChannel.transferTo(position, count, toChannel);  
";i:1;s:4:"java";i:2;N;}i:2;i:10095;}i:304;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10480;}i:305;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"4. Selector";i:1;i:2;i:2;i:10480;}i:2;i:10480;}i:306;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:10480;}i:307;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10480;}i:308;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:302:"Selector 一般称 为选择器 ，当然你也可以翻译为 多路复用器 。它是Java NIO核心组件中的一个，用于检查一个或多个NIO Channel（通道）的状态是否处于可读、可写。如此可以实现单线程管理多个channels,也就是可以管理多个网络链接。";}i:2;i:10505;}i:309;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10807;}i:310;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10807;}i:311;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:163:"使用Selector的好处在于： 使用更少的线程来就可以来处理通道了， 相比使用多个线程，避免了线程上下文切换带来的开销。";}i:2;i:10809;}i:312;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10972;}i:313;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10974;}i:314;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"4.1 Use a Selector";i:1;i:3;i:2;i:10974;}i:2;i:10974;}i:315;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:10974;}i:316;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11004;}i:317;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"4.1.1 create a selector";i:1;i:4;i:2;i:11004;}i:2;i:11004;}i:318;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:11004;}i:319;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:40:"

Selector selector = Selector.open();

";i:1;s:4:"java";i:2;N;}i:2;i:11042;}i:320;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11097;}i:321;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"4.1.2 register a channel to a selector";i:1;i:4;i:2;i:11097;}i:2;i:11097;}i:322;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:11097;}i:323;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:302:"

// channel must be not blocking
channel.configureBlocking(false);
// register() 方法的第二个参数 specifies the event(e.g. Connect, Accept, Read, Write) which the watcher will monitor
// in our case we monitor only read event 
SelectionKey key=channel.register(selector, Selectionkey.OP_READ)
";i:1;s:4:"java";i:2;N;}i:2;i:11150;}i:324;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11150;}i:325;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:"FileChannel can't be used by a Selector, because it does not extend the abstract class SelectableChannel. So it does not have the method abstract SelectableChannel configureBlocking(boolean block). ";}i:2;i:11467;}i:326;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11665;}i:327;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11665;}i:328;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:224:"SelectableChannel抽象类的configureBlocking（） 方法是由 AbstractSelectableChannel抽象类实现的，SocketChannel、ServerSocketChannel、DatagramChannel都是直接继承了 AbstractSelectableChannel抽象类。";}i:2;i:11667;}i:329;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11891;}i:330;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11891;}i:331;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"SelectionKey的四个常量:";}i:2;i:11893;}i:332;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11921;}i:333;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:11921;}i:334;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11921;}i:335;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11921;}i:336;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" SelectionKey.OP_CONNECT";}i:2;i:11925;}i:337;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11949;}i:338;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11949;}i:339;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11949;}i:340;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11949;}i:341;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" SelectionKey.OP_ACCEPT";}i:2;i:11953;}i:342;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11976;}i:343;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11976;}i:344;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11976;}i:345;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11976;}i:346;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" SelectionKey.OP_READ";}i:2;i:11980;}i:347;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12001;}i:348;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12001;}i:349;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12001;}i:350;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12001;}i:351;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" SelectionKey.OP_WRITE";}i:2;i:12005;}i:352;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12027;}i:353;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12027;}i:354;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:12027;}i:355;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12027;}i:356;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:346:"通道触发了一个事件意思是该事件已经就绪。比如某个Channel成功连接到另一个服务器称为“connect就绪 ”。一个Server Socket Channel准备好接收新进入的连接称为“accept就绪”。一个有数据可读的通道可以说是“ 读就绪 ”。等待写数据的通道可以说是“ 写就绪 ”。";}i:2;i:12029;}i:357;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12381;}i:358;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:135:"
//如果你对不止一种事件感兴趣，使用或运算符即可 
int interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;
";i:1;s:4:"java";i:2;N;}i:2;i:12381;}i:359;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12531;}i:360;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"4.1.3 SelectionKey";i:1;i:4;i:2;i:12531;}i:2;i:12531;}i:361;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:12531;}i:362;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12531;}i:363;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:"Once a channel is registered to a selector, A selectionKey is created, which offers following information";}i:2;i:12559;}i:364;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12664;}i:365;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:405:"
//返回SelectionKey的attachment，attachment可以在注册channel的时候指定。
key.attachment(); 

// 返回该SelectionKey对应的channel。
key.channel();
 
// 返回该SelectionKey对应的Selector。
key.selector();

//返回代表需要Selector监控的IO操作的bit mask
key.interestOps(); 

// 返回一个bit mask，代表在相应channel上可以进行的IO操作。
key.readyOps(); 

";i:1;N;i:2;N;}i:2;i:12671;}i:366;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12671;}i:367;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"我们可以通过以下方法来判断Selector是否对Channel的某种事件感兴趣";}i:2;i:13086;}i:368;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13179;}i:369;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:354:"
int interestSet = selectionKey.interestOps();
 

boolean isInterestedInAccept =(interestSet & SelectionKey.OP_ACCEPT) == SelectionKey.OP_ACCEPT；

boolean isInterestedInConnect = interestSet & SelectionKey.OP_CONNECT;

boolean isInterestedInRead = interestSet & SelectionKey.OP_READ;

boolean isInterestedInWrite = interestSet & SelectionKey.OP_WRITE;
";i:1;s:4:"java";i:2;N;}i:2;i:13179;}i:370;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13179;}i:371;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:"我们可以通过以下方法来判断Channel这些操作是否就绪";}i:2;i:13548;}i:372;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13618;}i:373;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:342:"
//创建ready集合的方法
int readySet = selectionKey.readyOps();

//检查这些操作是否就绪的方法
key.isAcceptable(); //是否可读，是返回 true
boolean isWritable()：//是否可写，是返回 true
boolean isConnectable()：//是否可连接，是返回 true
boolean isAcceptable ()：//是否可接收，是返回 true
";i:1;s:4:"java";i:2;N;}i:2;i:13625;}i:374;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13625;}i:375;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:235:"可以将一个对象或者更多信息附着到SelectionKey上，这样就能方便的识别某个给定的通道。例如，可以附加 与通道一起使用的Buffer，或是包含聚集数据的某个对象。使用方法如下：";}i:2;i:13982;}i:376;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14217;}i:377;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:187:" 
// during registration
SelectionKey key = channel.register(selector, SelectionKey.OP_READ,theObject);
// after registration
key.attach(theObject);
Object attachedObj =key.attachment();
";i:1;s:4:"java";i:2;N;}i:2;i:14224;}i:378;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14426;}i:379;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:66:"4.2 从Selector中选择channel(Selecting Channels via a Selector)";i:1;i:3;i:2;i:14426;}i:2;i:14426;}i:380;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:14426;}i:381;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14504;}i:382;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:43:"4.2.1 Three different types of SelectionKey";i:1;i:4;i:2;i:14504;}i:2;i:14504;}i:383;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:14504;}i:384;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14504;}i:385;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"In a Selector, we can find three different types of SelectionKey";}i:2;i:14557;}i:386;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14622;}i:387;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:14622;}i:388;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14622;}i:389;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14622;}i:390;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:385:" 已注册的键的集合(Registered key set): 所有与选择器关联的通道所生成的键的集合称为已经注册的键的集合。并不是所有注册过的键都仍然有效。这个集合通过 keys() 方法返回，并且可能是空的。这个已注册的键的集合不是可以直接修改的；试图这么做的话将引发java.lang.UnsupportedOperationException。";}i:2;i:14626;}i:391;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:15011;}i:392;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:15011;}i:393;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:15011;}i:394;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:15011;}i:395;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:383:" 已选择的键的集合(Selected key set): 所有与选择器关联的通道所生成的键的集合称为已经注册的键的集合。并不是所有注册过的键都仍然有效。这个集合通过 keys() 方法返回，并且可能是空的。这个已注册的键的集合不是可以直接修改的；试图这么做的话将引发java.lang.UnsupportedOperationException。";}i:2;i:15015;}i:396;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:15398;}i:397;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:15398;}i:398;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:15398;}i:399;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:15398;}i:400;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:274:" 已取消的键的集合(Cancelled key set): 已注册的键的集合的子集，这个集合包含了 cancel() 方法被调用过的键(这个键已经被无效化)，但它们还没有被注销。这个集合是选择器对象的私有成员，因而无法直接访问。";}i:2;i:15402;}i:401;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:15676;}i:402;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:15676;}i:403;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:15676;}i:404;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15676;}i:405;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:796:"注意：当键被取消（ 可以通过isValid( ) 方法来判断）时，它将被放在相关的选择器的已取消的键的集合里。注册不会立即被取消，但键会立即失效。当再次调用 select( ) 方法时（或者一个正在进行的select()调用结束时），已取消的键的集合中的被取消的键将被清理掉，并且相应的注销也将完成。通道会被注销，而新的SelectionKey将被返回。当通道关闭时，所有相关的键会自动取消（记住，一个通道可以被注册到多个选择器上）。当选择器关闭时，所有被注册到该选择器的通道都将被注销，并且相关的键将立即被无效化（取消）。一旦键被无效化，调用它的与选择相关的方法就将抛出CancelledKeyException。";}i:2;i:15678;}i:406;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16474;}i:407;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:16476;}i:408;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"4.2.2 select()方法介绍";i:1;i:4;i:2;i:16476;}i:2;i:16476;}i:409;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:16476;}i:410;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16476;}i:411;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:361:"在刚初始化的Selector对象中，这三个集合都是空的。 通过Selector的select（）方法可以选择已经准备就绪的通道 （这些通道包含你感兴趣的的事件）。比如你对读就绪的通道感兴趣，那么select（）方法就会返回读事件已经就绪的那些通道。下面是Selector几个重载的select()方法：";}i:2;i:16511;}i:412;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16872;}i:413;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:16872;}i:414;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:16872;}i:415;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:16872;}i:416;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:" int select()：阻塞到至少有一个通道在你注册的事件上就绪了。";}i:2;i:16876;}i:417;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:16958;}i:418;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:16958;}i:419;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:16958;}i:420;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:16958;}i:421;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" int select(long timeout)：和select()一样，但最长阻塞时间为timeout毫秒。";}i:2;i:16962;}i:422;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:17050;}i:423;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:17050;}i:424;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:17050;}i:425;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:17050;}i:426;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" int selectNow()：非阻塞，只要有通道就绪就立刻返回。";}i:2;i:17054;}i:427;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:17124;}i:428;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:17124;}i:429;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:17124;}i:430;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17124;}i:431;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:17126;}i:432;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:326:"select()方法返回的int值表示有多少通道已经就绪,是自上次调用select()方法后有多少通道变成就绪状态。之前在select（）调用时进入就绪的通道不会在本次调用中被记入，而在前一次select（）调用进入就绪但现在已经不在处于就绪的通道也不会被记入";}i:2;i:17128;}i:433;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:17454;}i:434;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:348:"。例如：首次调用select()方法，如果有一个通道变成就绪状态，返回了1，若再次调用select()方法，如果另一个通道就绪了，它会再次返回1。如果对第一个就绪的channel没有做任何操作，现在就有两个就绪的通道，但在每次select()方法调用之间，只有一个通道就绪了。";}i:2;i:17456;}i:435;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17804;}i:436;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17804;}i:437;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:17806;}i:438;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:"一旦调用select()方法，并且返回值不为0时，则 可以通过调用Selector的selectedKeys()方法来访问已选择键集合";}i:2;i:17808;}i:439;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:17945;}i:440;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17947;}i:441;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:17949;}i:442;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"4.2.3 停止选择的方法";i:1;i:4;i:2;i:17949;}i:2;i:17949;}i:443;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:17949;}i:444;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17949;}i:445;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:238:"选择器执行选择的过程，系统底层会依次询问每个通道是否已经就绪，这个过程可能会造成调用线程进入阻塞状态,那么我们有以下三种方式可以唤醒在select（）方法中阻塞的线程。";}i:2;i:17985;}i:446;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18224;}i:447;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:18224;}i:448;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:18224;}i:449;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:18224;}i:450;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:311:" wakeup()方法 ：通过调用Selector对象的wakeup（）方法让处在阻塞状态的select()方法立刻返回 该方法使得选择器上的第一个还没有返回的选择操作立即返回。如果当前没有进行中的选择操作，那么下一次对select()方法的一次调用将立即返回。";}i:2;i:18228;}i:451;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:18539;}i:452;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:18539;}i:453;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:18539;}i:454;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:18539;}i:455;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:282:" close()方法 ：通过close（）方法关闭Selector， 该方法使得任何一个在选择操作中阻塞的线程都被唤醒（类似wakeup（）），同时使得注册到该Selector的所有Channel被注销，所有的键将被取消，但是Channel本身并不会关闭。";}i:2;i:18543;}i:456;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:18825;}i:457;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:18825;}i:458;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:18825;}i:459;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18825;}i:460;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:"For code example, please visit my gitup Lesson01_Section05_Exploring_NIO   ChannelBasedIOExample.exp9();";}i:2;i:18827;}i:461;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18931;}i:462;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:18933;}i:463;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"5. Java NIO之Path和Files";i:1;i:2;i:2;i:18933;}i:2;i:18933;}i:464;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:18933;}i:465;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:18973;}i:466;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"5.1 文件I/O基石：Path：";i:1;i:3;i:2;i:18973;}i:2;i:18973;}i:467;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:18973;}i:468;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:19013;}i:469;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:19013;}i:470;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:19013;}i:471;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" 创建一个Path";}i:2;i:19017;}i:472;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:19034;}i:473;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:19034;}i:474;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:19034;}i:475;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:19034;}i:476;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:" File和Path之间的转换，File和URI之间的转换";}i:2;i:19038;}i:477;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:19093;}i:478;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:19093;}i:479;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:19093;}i:480;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:19093;}i:481;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" 获取Path的相关信息";}i:2;i:19097;}i:482;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:19123;}i:483;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:19123;}i:484;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:19123;}i:485;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:19123;}i:486;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" 移除Path中的冗余项";}i:2;i:19127;}i:487;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:19153;}i:488;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:19153;}i:489;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:19153;}i:490;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:19155;}i:491;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"5.2 拥抱Files类：";i:1;i:3;i:2;i:19155;}i:2;i:19155;}i:492;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:19155;}i:493;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:19187;}i:494;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:19187;}i:495;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:19187;}i:496;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" Files.exists() 检测文件路径是否存在";}i:2;i:19191;}i:497;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:19237;}i:498;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:19237;}i:499;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:19237;}i:500;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:19237;}i:501;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" Files.createFile() 创建文件";}i:2;i:19241;}i:502;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:19273;}i:503;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:19273;}i:504;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:19273;}i:505;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:19273;}i:506;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" Files.createDirectories()和Files.createDirectory()创建文件夹";}i:2;i:19277;}i:507;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:19344;}i:508;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:19344;}i:509;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:19344;}i:510;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:19344;}i:511;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:" Files.delete()方法 可以删除一个文件或目录";}i:2;i:19348;}i:512;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:19403;}i:513;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:19403;}i:514;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:19403;}i:515;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:19403;}i:516;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:" Files.copy()方法可以吧一个文件从一个地址复制到另一个位置";}i:2;i:19407;}i:517;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:19486;}i:518;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:19486;}i:519;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:19486;}i:520;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:19486;}i:521;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" 获取文件属性";}i:2;i:19490;}i:522;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:19509;}i:523;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:19509;}i:524;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:19509;}i:525;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:19509;}i:526;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" 遍历一个文件夹";}i:2;i:19513;}i:527;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:19535;}i:528;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:19535;}i:529;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:19535;}i:530;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:19535;}i:531;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" Files.walkFileTree()遍历整个目录";}i:2;i:19539;}i:532;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:19578;}i:533;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:19578;}i:534;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:19578;}i:535;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:19578;}i:536;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:19578;}}