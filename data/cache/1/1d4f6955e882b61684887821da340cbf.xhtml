
<h1 class="sectionedit1" id="set_up_an_sftp_server_on_centos_7">Set up an sftp server on centos 7</h1>
<div class="level1">

<p>
This tutorial is tested on centos7 64bits, it should also works on centos6. 
</p>

</div>
<!-- EDIT1 SECTION "Set up an sftp server on centos 7" [1-127] -->
<h2 class="sectionedit2" id="sftp_vs_ftps">SFTP VS FTPS</h2>
<div class="level2">

<p>
FTPS (<abbr title="File Transfer Protocol">FTP</abbr>/SSL) is a name used to provide a number of ways that <abbr title="File Transfer Protocol">FTP</abbr> software can perform secure file transfers. Each way involves the use of a SSL/TLS layer below the standard <abbr title="File Transfer Protocol">FTP</abbr> protocol to encrypt the control and/or data channels.
</p>

<p>
Pros :
</p>
<ul>
<li class="level1"><div class="li"> Widely known and used</div>
</li>
<li class="level1"><div class="li"> The communication can be read and understood by a human</div>
</li>
<li class="level1"><div class="li"> Provides services for server-to-server file transfer</div>
</li>
<li class="level1"><div class="li"> SSL/TLS has good authentication mechanisms (X.509 certificate features)</div>
</li>
<li class="level1"><div class="li"> <abbr title="File Transfer Protocol">FTP</abbr> and SSL/TLS support is built into many internet communications frameworks</div>
</li>
</ul>

<p>
Cons :
</p>
<ul>
<li class="level1"><div class="li"> Does not have a uniform directory listing format</div>
</li>
<li class="level1"><div class="li"> Requires a secondary DATA channel, which makes it hard to use behind firewalls</div>
</li>
<li class="level1"><div class="li"> Does not define a standard for file name character sets (encodings)</div>
</li>
<li class="level1"><div class="li"> Not all <abbr title="File Transfer Protocol">FTP</abbr> servers support SSL/TLS</div>
</li>
<li class="level1"><div class="li"> Does not have a standard way to get and change file or directory attributes</div>
</li>
</ul>

<p>
SFTP (SSH File Transfer Protocol) is a network protocol that provides file transfer and manipulation functionality over any reliable data stream. It is typically used with the SSH-2 protocol (TCP port 22) to provide secure file transfer, but is intended to be usable with other protocols as well.
</p>

<p>
Pros :
</p>
<ul>
<li class="level1"><div class="li"> Has a good standards background which strictly defines most (if not all) aspects of operations</div>
</li>
<li class="level1"><div class="li"> Has only one connection (no need for a DATA connection)</div>
</li>
<li class="level1"><div class="li"> The connection is always secured</div>
</li>
<li class="level1"><div class="li"> The directory listing is uniform and machine-readable</div>
</li>
<li class="level1"><div class="li"> The protocol includes operations for permission and attribute manipulation, file locking, and more functionality</div>
</li>
</ul>

<p>
Cons :
</p>
<ul>
<li class="level1"><div class="li"> The communication is binary and can not be logged “as is” for human reading</div>
</li>
<li class="level1"><div class="li"> SSH keys are harder to manage and validate</div>
</li>
<li class="level1"><div class="li"> The standards define certain things as optional or recommended, which leads to certain compatibility problems between different software titles from different vendors.</div>
</li>
<li class="level1"><div class="li"> No server-to-server copy and recursive directory removal operations</div>
</li>
<li class="level1"><div class="li"> No built-in SSH/SFTP support in VCL and .NET frameworks</div>
</li>
</ul>

</div>
<!-- EDIT2 SECTION "SFTP VS FTPS" [128-2153] -->
<h2 class="sectionedit3" id="install_sftp_server_dependencies">Install sftp server dependencies</h2>
<div class="level2">

<p>
Unlike normal ftp, there&#039;s no need to install additional packages in order to use SFTP. We just require the prebuild SSHd package that got already installed during installation on the server. So  we only need to check that they are all there.
</p>
<pre class="code">rpm -qa | grep ssh
# you should see the following package
openssh-7.4p1-16.el7.x86_64
openssh-server-7.4p1-16.el7.x86_64
libssh2-1.4.3-10.el7_2.1.x86_64
openssh-clients-7.4p1-16.el7.x86_64</pre>

<p>
if you see all four package, it means we are good to go.
</p>

</div>
<!-- EDIT3 SECTION "Install sftp server dependencies" [2154-2707] -->
<h2 class="sectionedit4" id="sftp_configuration">Sftp Configuration</h2>
<div class="level2">

<p>
There are two parts in the sftp configuration
</p>
<ol>
<li class="level1"><div class="li"> User account and access to server (with/without ssh access)</div>
</li>
<li class="level1"><div class="li"> Directory for file transfers</div>
</li>
</ol>

</div>
<!-- EDIT4 SECTION "Sftp Configuration" [2708-2883] -->
<h3 class="sectionedit5" id="user_account_and_access_to_server">User account and access to server</h3>
<div class="level3">

<p>
All users which have an account on the server and have ssh access can use the sftp server. if you want to use ldap on your sever, please followe this <a href="/doku.php?id=employes:pengfei.liu:admin_system:security:authentication:open_ldap:ssh_centos7" class="wikilink1" title="employes:pengfei.liu:admin_system:security:authentication:open_ldap:ssh_centos7">Use ldap for ssh authentication on centos 7</a>. If not, the easiest way is to create local account on the server
</p>
<pre class="code">#create a local account
sudo adduser pliu
# set password of pliu
sudo passwd pliu</pre>

</div>
<!-- EDIT5 SECTION "User account and access to server" [2884-3370] -->
<h3 class="sectionedit6" id="creating_a_directory_for_file_transfer">Creating a Directory for File transfer</h3>
<div class="level3">

<p>
In order to restrict SFTP access to one directory, we first have to make sure the directory complies with the SSH server&#039;s permissions requirements, which are very particular.
</p>

<p>
Specifically, the directory itself and all directories above it in the filesystem tree must be owned by root and not writable by anyone else. Consequently, it&#039;s not possible to simply give restricted access to a user&#039;s home directory because home directories are owned by the user, not root.
</p>

<p>
There are a number of ways to work around this ownership issue. In this tutorial, we&#039;ll create and use /var/sftp/users/ as the target upload directory. /var/sftp/users will be owned by root and will be unwritable by other users; the subdirectory /var/sftp/users/pliu will be owned by pliu, so that user will be able to upload files to it.
</p>
<pre class="code"># create the root sftp directory
sudo mkdir -p /var/sftp/users/pliu

# set the owner of /var/sftp/users to root
sudo chown root:root /var/sftp/users

# give root write permissions and others only read and execute rights to /var/sftp/users,
sudo chmod 755 /var/sftp/users
 
# change the ownership on the uploads directory to pliu
sudo chown pliu:pliu /var/sftp/users/pliu

# if you have multiple user which can use the sftp server, you can repeat above step and create /var/sftp/users/toto
</pre>

</div>
<!-- EDIT6 SECTION "Creating a Directory for File transfer" [3371-4736] -->
<h3 class="sectionedit7" id="restricting_access_to_sftp_and_or_ssh">Restricting Access to sftp and/or ssh</h3>
<div class="level3">

<p>
In this step, we&#039;ll modify the SSH server configuration to allow/disallow terminal access for users but allow file transfer access. By default all user which have ssh access will have sftp access.
</p>
<pre class="code"># edit the /etc/ssh/sshd_config file, scroll to the very buttom of the file and append the following code
# Match User tells the ssh server to apply the following config only to specified user, in this tutorial, it&#039;s pliu
# You can also use Match Group &lt;group-name&gt;
Match User pliu
# ForceCommand internal-sftp forces the SSH server to run the SFTP server upon login, disallowing shell access.
ForceCommand internal-sftp
# allows password authentication for this user.
PasswordAuthentication yes
#  ensures that the user will not be allowed access to anything beyond the /var/sftp/users directory.
ChrootDirectory /var/sftp/users
#  disables port forwarding, tunneling and X11 forwarding for this user.
PermitTunnel no
AllowAgentForwarding no
AllowTcpForwarding no
X11Forwarding no

# The match can be copied and repeated many times, which means we can have different rules for different users/groups 

# to make configue effective, restart sshd service
sudo sytemctl restart sshd</pre>

</div>
<!-- EDIT7 SECTION "Restricting Access to sftp and/or ssh" [4737-5981] -->
<h2 class="sectionedit8" id="verify_the_sftp_access">Verify the sftp access</h2>
<div class="level2">
<pre class="code"># with the above config, pliu can only have sftp access, but not ssh access
# So try ssh first
ssh pliu@localhost
# You should see something like this
Error message
This service allows sftp connections only.
Connection to localhost closed.

# Now try sftp access
sftp pliu@localhost
# you should see 
SFTP prompt
Connected to localhost.
sftp&gt;</pre>

<p>
You can also use sftp desktop client(e.g. fileZila, winscp, cyperduck, etc.) to do the test 
</p>

</div>
<!-- EDIT8 SECTION "Verify the sftp access" [5982-6469] -->
<h2 class="sectionedit9" id="conclusion">Conclusion</h2>
<div class="level2">

<p>
You&#039;ve restricted a user to SFTP-only access to a single directory on a server without full shell access. While this tutorial uses only one directory and one user for brevity, you can extend this example to multiple users and multiple directories.
</p>

<p>
The SSH server allows more complex configuration schemes, including limiting access to groups or multiple users at once or limited access to certain IP addresses. You can find examples of additional configuration options and explanation of possible directives in the OpenSSH Cookbook (<a href="https://en.wikibooks.org/wiki/OpenSSH/Cookbook/File_Transfer_with_SFTP" class="urlextern" title="https://en.wikibooks.org/wiki/OpenSSH/Cookbook/File_Transfer_with_SFTP" rel="nofollow">https://en.wikibooks.org/wiki/OpenSSH/Cookbook/File_Transfer_with_SFTP</a>). If you run into any issues with SSH, you can debug and fix them with this troubleshooting SSH series (<a href="https://www.digitalocean.com/community/tutorial_series/how-to-troubleshoot-ssh" class="urlextern" title="https://www.digitalocean.com/community/tutorial_series/how-to-troubleshoot-ssh" rel="nofollow">https://www.digitalocean.com/community/tutorial_series/how-to-troubleshoot-ssh</a>).
</p>

</div>
<!-- EDIT9 SECTION "Conclusion" [6470-] -->