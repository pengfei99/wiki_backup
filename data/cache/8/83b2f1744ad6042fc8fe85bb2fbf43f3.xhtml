
<h1 class="sectionedit1" id="spark_socket_streaming">Spark socket streaming</h1>
<div class="level1">

<p>
Spark socket streaming can listen to a socket
</p>

</div>
<!-- EDIT1 SECTION "Spark socket streaming" [1-86] -->
<h2 class="sectionedit2" id="simple_example">Simple example</h2>
<div class="level2">

<p>
In this example, we just listen to a socket (localhost, port 8888)and count all the words send to this socket.
</p>

</div>
<!-- EDIT2 SECTION "Simple example" [87-226] -->
<h3 class="sectionedit3" id="start_the_spark_streaming">start the spark streaming</h3>
<div class="level3">
<pre class="code">scala&gt; import org.apache.spark.streaming._
scala&gt; import org.apache.spark._
scala&gt; import org.apache.spark.storage.StorageLevel
scala&gt; val ssc = new StreamingContext(sc,Seconds(60))
scala&gt; val lines = ssc.socketTextStream(&quot;localhost&quot;,8888,StorageLevel.MEMORY_AND_DISK_SER)
scala&gt; val words = lines.flatMap(_.split(&quot; &quot;))
scala&gt; val wordCounts = words.map(x =&gt; (x, 1)).reduceByKey(_ + _)
scala&gt; wordCounts.print()
scala&gt; ssc.start()
</pre>

</div>
<!-- EDIT3 SECTION "start the spark streaming" [227-711] -->
<h3 class="sectionedit4" id="send_message_to_socket_8888_on_localhost">Send message to socket 8888 on localhost</h3>
<div class="level3">
<pre class="code">[root@localhost log]# nc -lk 8888
hello
my name is pengfei
</pre>

</div>
<!-- EDIT4 SECTION "Send message to socket 8888 on localhost" [712-838] -->
<h3 class="sectionedit5" id="result_of_the_spark_streaming">Result of the spark streaming</h3>
<div class="level3">
<pre class="code">-------------------------------------------
Time: 1516100520000 ms
-------------------------------------------
(hello,1)

-------------------------------------------
Time: 1516100580000 ms
-------------------------------------------
(is,2)
(,1)
(my,1)
(what,1)
(pengfei,1)
(name,2)
(your,1)
</pre>
<dl class="file">
<dt><a href="/doku.php?do=export_code&amp;id=employes:pengfei.liu:big_data:spark:spark_streaming:socket_streaming&amp;codeblock=3" title="Download Snippet" class="mediafile mf_scala">SparkSocketStreaming.scala</a></dt>
<dd><pre class="code file scala"><a href="http://scala-lang.org"><span class="kw1">package</span></a> org.<span class="me1">pengfei</span>.<span class="me1">spark</span>
&nbsp;
<a href="http://scala-lang.org"><span class="kw1">import</span></a> org.<span class="me1">apache</span>.<span class="me1">spark</span>.<span class="me1">SparkConf</span>
<a href="http://scala-lang.org"><span class="kw1">import</span></a> org.<span class="me1">apache</span>.<span class="me1">spark</span>.<span class="me1">storage</span>.<span class="me1">StorageLevel</span>
<a href="http://scala-lang.org"><span class="kw1">import</span></a> org.<span class="me1">apache</span>.<span class="me1">spark</span>.<span class="me1">streaming</span>.<span class="br0">&#123;</span>Seconds, StreamingContext<span class="br0">&#125;</span>
&nbsp;
<a href="http://scala-lang.org"><span class="kw1">object</span></a> SparkSocketStreaming <span class="br0">&#123;</span>
  <a href="http://scala-lang.org"><span class="kw1">def</span></a> main<span class="br0">&#40;</span>args<span class="sy0">:</span> Array<span class="br0">&#91;</span>String<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="coMULTI">/*if (args.length &lt; 2) {
      System.err.println(&quot;Usage: NetworkWordCount &lt;hostname&gt; &lt;port&gt;&quot;)
      System.exit(1)
    }*/</span>
&nbsp;
    <span class="co1">//StreamingExamples.setStreamingLogLevels()</span>
&nbsp;
    <span class="co1">// Create the context with a 1 second batch size</span>
    <a href="http://scala-lang.org"><span class="kw1">val</span></a> sparkConf <span class="sy0">=</span> <a href="http://scala-lang.org"><span class="kw1">new</span></a> SparkConf<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">setAppName</span><span class="br0">&#40;</span><span class="st0">&quot;NetworkWordCount&quot;</span><span class="br0">&#41;</span>.<span class="me1">setMaster</span><span class="br0">&#40;</span><span class="st0">&quot;local&quot;</span><span class="br0">&#41;</span>
    <a href="http://scala-lang.org"><span class="kw1">val</span></a> ssc <span class="sy0">=</span> <a href="http://scala-lang.org"><span class="kw1">new</span></a> StreamingContext<span class="br0">&#40;</span>sparkConf, Seconds<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
    <span class="co1">// Create a socket stream on target ip:port and count the</span>
    <span class="co1">// words in input stream of \n delimited text (eg. generated by 'nc')</span>
    <span class="co1">// Note that no duplication in storage level only for running locally.</span>
    <span class="co1">// Replication necessary in distributed scenario for fault tolerance.</span>
    <a href="http://scala-lang.org"><span class="kw1">val</span></a> lines <span class="sy0">=</span> ssc.<span class="me1">socketTextStream</span><span class="br0">&#40;</span><span class="st0">&quot;localhost&quot;</span>, <span class="nu0">8888</span>, StorageLevel.<span class="me1">MEMORY_AND_DISK_SER</span><span class="br0">&#41;</span>
    <a href="http://scala-lang.org"><span class="kw1">val</span></a> words <span class="sy0">=</span> lines.<span class="me1">flatMap</span><span class="br0">&#40;</span><span class="sy0">_</span>.<span class="me1">split</span><span class="br0">&#40;</span><span class="st0">&quot; &quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
    <a href="http://scala-lang.org"><span class="kw1">val</span></a> wordCounts <span class="sy0">=</span> words.<span class="me1">map</span><span class="br0">&#40;</span>x <span class="sy0">=&gt;</span> <span class="br0">&#40;</span>x, <span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">reduceByKey</span><span class="br0">&#40;</span><span class="sy0">_</span> + <span class="sy0">_</span><span class="br0">&#41;</span>
    wordCounts.<span class="me1">print</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
    ssc.<span class="me1">start</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
    ssc.<span class="me1">awaitTermination</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre>
</dd></dl>

</div>
<!-- EDIT5 SECTION "Result of the spark streaming" [839-] -->