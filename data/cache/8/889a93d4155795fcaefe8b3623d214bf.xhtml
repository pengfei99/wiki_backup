
<h1 class="sectionedit1" id="database_view">DataBase view</h1>
<div class="level1">

<p>
A database view is a searchable object in a database that is defined by a query.  Though a view doesn’t store data, some refer to a views as “virtual tables,” you can query a view like you can a table.  A view can combine data from two or more table, using joins, and also just contain a subset of information.  This makes them convenient to abstract, or hide, complicated queries.
</p>

</div>
<!-- EDIT1 SECTION "DataBase view" [1-419] -->
<h2 class="sectionedit2" id="how_to_create_and_use_a_database_view">How to Create and Use a Database View</h2>
<div class="level2">

<p>
A view is created from a query using the CREATE VIEW command.  In the example below we are creating a PopularBooks view based of a query which selects all Books that have the IsPopular field checked.  The Query is colored in Blue.
</p>
<pre class="code">CREATE VIEW PopularBooks AS
SELECT ISBN, Title, Author, PublishDate
FROM Books
WHERE IsPopular = 1</pre>

<p>
Once a view is created you can used then as you would any table in a SELECT statement.  For example, to list all the popular book titles ordered by author you could write:
</p>
<pre class="code">SELECT Author, Title
FROM PopularBooks
ORDER BY Author</pre>

</div>
<!-- EDIT2 SECTION "How to Create and Use a Database View" [420-1061] -->
<h2 class="sectionedit3" id="benefits_of_a_database_view">Benefits of a Database View</h2>
<div class="level2">

<p>
There are many benefits to using views.  Listed below are some of the one that come to mind:
</p>
<ul>
<li class="level1"><div class="li"> <strong>Enforce Business Rules</strong>  Use views to define business rules, such as when an items is active, or what is meant by “popular.”  By placing complicated or misunderstood business logic into the view, you can be sure to present a unified portrayal of the data.  This increases use and quality.</div>
</li>
<li class="level1"><div class="li"> <strong>Consistency</strong>  Simplify complicated query logic and calculations by hiding it behind the view’s definition.  Once defined they calculations are reference from the view rather than being restated in separate queries.  This makes for less mistakes and easier maintenance of code.</div>
</li>
<li class="level1"><div class="li"> <strong>Security</strong>  Restrict access to a table, yet allow users to access non-confidential data via views.  For example, you can restrict access to the employee table, that contains social security numbers, but allow access to a view containing name and phone number.</div>
</li>
<li class="level1"><div class="li"> <strong>Simplicity</strong>  Databases with many tables possess complex relationships, which can be difficult to navigate if you aren’t comfortable using Joins.  Use views to provide a “flattened” view of the database for reporting or ad-hoc queries.</div>
</li>
<li class="level1"><div class="li"> <strong>Space</strong>  Views take up very little space, as the data is stored once in the source table.  Some DBMS all you to create an index on a view, so in some cases views do take up more space than the definition.</div>
</li>
</ul>

</div>
<!-- EDIT3 SECTION "Benefits of a Database View" [1062-2508] -->
<h2 class="sectionedit4" id="disadvantages_of_views">Disadvantages of Views</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> <strong>Performance</strong>  What may seem like a simple query against a view could turn out to be a hugely complex job for the database engine.  That is because each time a view is referenced, the query used to define it, is rerun.</div>
</li>
<li class="level1"><div class="li"> <strong>Modifications</strong>  Not all views support INSERT, UPDATE, or DELETE operations.  In general, in order to support these operations, the primary key and required fields must be present in the view.  Complex multi-table views are generally read only.</div>
</li>
</ul>

</div>
<!-- EDIT4 SECTION "Disadvantages of Views" [2509-] -->