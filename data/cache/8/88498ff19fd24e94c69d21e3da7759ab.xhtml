
<h1 class="sectionedit1" id="java_io_interview_questions">Java IO interview questions</h1>
<div class="level1">

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Java IO interview questions&quot;,&quot;hid&quot;:&quot;java_io_interview_questions&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:1,&quot;range&quot;:&quot;1-43&quot;} -->
<h2 class="sectionedit2" id="什么是io流">1. 什么是IO流？</h2>
<div class="level2">

<p>
它是一种数据的流从源头流到目的地。比如文件拷贝，输入流和输出流都包括了。输入流从文件中读取数据存储到进程(process)中，输出流从进程中读取数据然后写入到目标文件。
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1. \u4ec0\u4e48\u662fIO\u6d41\uff1f&quot;,&quot;hid&quot;:&quot;\u4ec0\u4e48\u662fio\u6d41&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:2,&quot;range&quot;:&quot;44-317&quot;} -->
<h2 class="sectionedit3" id="字节流_inputstrem_outputstream_和字符流_reader_writer_的区别">2. 字节流(InputStrem/OutputStream)和字符流(Reader/Writer)的区别。</h2>
<div class="level2">

<p>
字节流在JDK1.0中就被引进了，用于操作包含ASCII字符的文件。JAVA也支持其他的字符如Unicode，为了读取包含Unicode字符的文件，JAVA语言设计者在JDK1.1中引入了字符流。ASCII作为Unicode的子集，对于英语字符的文件，可以使用字节流也可以使用字符流。
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;2. \u5b57\u8282\u6d41(InputStrem\/OutputStream)\u548c\u5b57\u7b26\u6d41(Reader\/Writer)\u7684\u533a\u522b\u3002&quot;,&quot;hid&quot;:&quot;\u5b57\u8282\u6d41_inputstrem_outputstream_\u548c\u5b57\u7b26\u6d41_reader_writer_\u7684\u533a\u522b&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:3,&quot;range&quot;:&quot;318-737&quot;} -->
<h2 class="sectionedit4" id="java中流类的超类主要由那些">3.Java中流类的超类主要由那些？</h2>
<div class="level2">

<p>
java.io.InputStream
</p>

<p>
java.io.OutputStream
</p>

<p>
java.io.Reader
</p>

<p>
java.io.Writer
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;3.Java\u4e2d\u6d41\u7c7b\u7684\u8d85\u7c7b\u4e3b\u8981\u7531\u90a3\u4e9b\uff1f&quot;,&quot;hid&quot;:&quot;java\u4e2d\u6d41\u7c7b\u7684\u8d85\u7c7b\u4e3b\u8981\u7531\u90a3\u4e9b&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:4,&quot;range&quot;:&quot;738-871&quot;} -->
<h2 class="sectionedit5" id="fileinputstream和fileoutputstream是什么">4. FileInputStream和FileOutputStream是什么？</h2>
<div class="level2">

<p>
这是在拷贝文件操作的时候，经常用到的两个类。在处理小文件的时候，它们性能表现还不错，在大文件的时候，最好使用BufferedInputStream (或 BufferedReader) 和 BufferedOutputStream (或 BufferedWriter)
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;4. FileInputStream\u548cFileOutputStream\u662f\u4ec0\u4e48\uff1f&quot;,&quot;hid&quot;:&quot;fileinputstream\u548cfileoutputstream\u662f\u4ec0\u4e48&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:5,&quot;range&quot;:&quot;872-1188&quot;} -->
<h2 class="sectionedit6" id="字节流和字符流_你更喜欢使用拿一个">5. 字节流和字符流，你更喜欢使用拿一个？</h2>
<div class="level2">

<p>
个人来说，更喜欢使用字符流，因为他们更新一些。许多在字符流中存在的特性，字节流中不存在。比如使用BufferedReader而不是BufferedInputStreams或DataInputStream，使用newLine()方法来读取下一行，但是在字节流中我们需要做额外的操作。
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;5. \u5b57\u8282\u6d41\u548c\u5b57\u7b26\u6d41\uff0c\u4f60\u66f4\u559c\u6b22\u4f7f\u7528\u62ff\u4e00\u4e2a\uff1f&quot;,&quot;hid&quot;:&quot;\u5b57\u8282\u6d41\u548c\u5b57\u7b26\u6d41_\u4f60\u66f4\u559c\u6b22\u4f7f\u7528\u62ff\u4e00\u4e2a&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:6,&quot;range&quot;:&quot;1189-1569&quot;} -->
<h2 class="sectionedit7" id="systemoutprintln_是什么">6.System.out.println()是什么？</h2>
<div class="level2">

<p>
System是一个java.lang包中的类，用于和底层的操作系统进行交互。out is a static field of System, which has the type of PrintStream. println是PrintStream的一个方法。
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;6.System.out.println()\u662f\u4ec0\u4e48\uff1f&quot;,&quot;hid&quot;:&quot;systemoutprintln_\u662f\u4ec0\u4e48&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:7,&quot;range&quot;:&quot;1570-1810&quot;} -->
<h2 class="sectionedit8" id="什么是filterinputstream">7.什么是FilterInputStream？</h2>
<div class="level2">

<p>
A FilterInputStream contains some other input stream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality. <strong>The class FilterInputStream itself simply overrides all methods of InputStream</strong> with versions that pass all requests to the contained input stream. Subclasses of FilterInputStream may further override some of these methods and may also provide additional methods and fields.
</p>

<p>
Filter Stream是一种IO流主要作用是用来对存在的流增加一些额外的功能，像给目标文件增加源文件中不存在的行数，或者增加拷贝的性能。
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;7.\u4ec0\u4e48\u662fFilterInputStream\uff1f&quot;,&quot;hid&quot;:&quot;\u4ec0\u4e48\u662ffilterinputstream&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:8,&quot;range&quot;:&quot;1811-2500&quot;} -->
<h2 class="sectionedit9" id="有哪些可用的filter流">8. 有哪些可用的Filter流？</h2>
<div class="level2">

<p>
在java.io包中主要由4个可用的filter Stream。两个字节filter stream，两个字符filter stream. 分别是FilterInputStream, FilterOutputStream, FilterReader and FilterWriter.这些类是抽象类，不能被实例化的。
</p>

<p>
有些Filter流的子类:
</p>
<ul>
<li class="level1"><div class="li"> LineNumberInputStream 给目标文件增加行号</div>
</li>
<li class="level1"><div class="li"> DataInputStream 有些特殊的方法如readInt(), readDouble()和readLine() 等可以读取一个 int, double和一个string一次性的,</div>
</li>
<li class="level1"><div class="li"> BufferedInputStream 增加性能</div>
</li>
<li class="level1"><div class="li"> PushbackInputStream 推送要求的字节到系统中</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;8. \u6709\u54ea\u4e9b\u53ef\u7528\u7684Filter\u6d41\uff1f&quot;,&quot;hid&quot;:&quot;\u6709\u54ea\u4e9b\u53ef\u7528\u7684filter\u6d41&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:9,&quot;range&quot;:&quot;2501-3106&quot;} -->
<h2 class="sectionedit10" id="sequenceinputstream的作用">9.SequenceInputStream的作用？</h2>
<div class="level2">

<p>
这个类的作用是将多个输入流合并成一个输入流，通过SequenceInputStream类包装后形成新的一个总的输入流。在拷贝多个文件到一个目标文件的时候是非常有用的。可用使用很少的代码实现
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;9.SequenceInputStream\u7684\u4f5c\u7528\uff1f&quot;,&quot;hid&quot;:&quot;sequenceinputstream\u7684\u4f5c\u7528&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:10,&quot;range&quot;:&quot;3107-3400&quot;} -->
<h2 class="sectionedit11" id="说说printstream和printwriter">10.说说PrintStream和PrintWriter</h2>
<div class="level2">

<p>
他们两个的功能相同，但是属于不同的分类。字节流和字符流。他们都有println()方法。
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;10.\u8bf4\u8bf4PrintStream\u548cPrintWriter&quot;,&quot;hid&quot;:&quot;\u8bf4\u8bf4printstream\u548cprintwriter&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:11,&quot;range&quot;:&quot;3401-3568&quot;} -->
<h2 class="sectionedit12" id="在文件拷贝的时候_那一种流可用提升更多的性能">11. 在文件拷贝的时候，那一种流可用提升更多的性能？</h2>
<div class="level2">

<p>
在字节流的时候，使用BufferedInputStream和BufferedOutputStream。
在字符流的时候，使用BufferedReader 和 BufferedWriter
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;11. \u5728\u6587\u4ef6\u62f7\u8d1d\u7684\u65f6\u5019\uff0c\u90a3\u4e00\u79cd\u6d41\u53ef\u7528\u63d0\u5347\u66f4\u591a\u7684\u6027\u80fd\uff1f&quot;,&quot;hid&quot;:&quot;\u5728\u6587\u4ef6\u62f7\u8d1d\u7684\u65f6\u5019_\u90a3\u4e00\u79cd\u6d41\u53ef\u7528\u63d0\u5347\u66f4\u591a\u7684\u6027\u80fd&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:12,&quot;range&quot;:&quot;3569-3798&quot;} -->
<h2 class="sectionedit13" id="说说管道流_piped_stream">12 .说说管道流(Piped Stream)</h2>
<div class="level2">

<p>
有四种管道流， PipedInputStream, PipedOutputStream, PipedReader 和 PipedWriter.在多个线程或进程中传递数据的时候管道流非常有用。
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;12 .\u8bf4\u8bf4\u7ba1\u9053\u6d41(Piped Stream)&quot;,&quot;hid&quot;:&quot;\u8bf4\u8bf4\u7ba1\u9053\u6d41_piped_stream&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:13,&quot;range&quot;:&quot;3799-4010&quot;} -->
<h2 class="sectionedit14" id="说说file类">13.说说File类</h2>
<div class="level2">

<p>
它不属于 IO流，也不是用于文件操作的，它主要用于知道一个文件的属性，读写权限，大小等信息。注意：Java7中文件IO发生了很大的变化，专门引入了很多新的类来取代原来的基于java.io.File的文件IO操作方式。详情阅读下面的文章：
</p>

<p>
<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247484947&amp;idx=1&amp;sn=5b3075b83724f5d510e4220488cc1d16&amp;source=41#wechat_redirect" class="urlextern" title="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247484947&amp;idx=1&amp;sn=5b3075b83724f5d510e4220488cc1d16&amp;source=41#wechat_redirect" rel="nofollow">https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247484947&amp;amp;idx=1&amp;amp;sn=5b3075b83724f5d510e4220488cc1d16&amp;source=41#wechat_redirect</a>
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;13.\u8bf4\u8bf4File\u7c7b&quot;,&quot;hid&quot;:&quot;\u8bf4\u8bf4file\u7c7b&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:14,&quot;range&quot;:&quot;4011-4489&quot;} -->
<h2 class="sectionedit15" id="说说randomaccessfile">14. 说说RandomAccessFile?</h2>
<div class="level2">

<p>
它在java.io包中是一个特殊的类，既不是输入流也不是输出流，它两者都可以做到。他是Object的直接子类。通常来说，一个流只有一个功能，要么读，要么写。但是RandomAccessFile既可以读文件，也可以写文件。 DataInputStream 和 DataOutStream有的方法，在RandomAccessFile中都存在。
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;14. \u8bf4\u8bf4RandomAccessFile?&quot;,&quot;hid&quot;:&quot;\u8bf4\u8bf4randomaccessfile&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:15,&quot;range&quot;:&quot;4490-&quot;} -->