a:134:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"Java IO interview questions";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:44;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"1. 什么是IO流？";i:1;i:2;i:2;i:44;}i:2;i:44;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:44;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:234:"它是一种数据的流从源头流到目的地。比如文件拷贝，输入流和输出流都包括了。输入流从文件中读取数据存储到进程(process)中，输出流从进程中读取数据然后写入到目标文件。";}i:2;i:80;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:314;}i:9;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:318;}i:10;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:76:"2. 字节流(InputStrem/OutputStream)和字符流(Reader/Writer)的区别。";i:1;i:2;i:2;i:318;}i:2;i:318;}i:11;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:318;}i:12;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:318;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:324:"字节流在JDK1.0中就被引进了，用于操作包含ASCII字符的文件。JAVA也支持其他的字符如Unicode，为了读取包含Unicode字符的文件，JAVA语言设计者在JDK1.1中引入了字符流。ASCII作为Unicode的子集，对于英语字符的文件，可以使用字节流也可以使用字符流。";}i:2;i:410;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:734;}i:15;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:738;}i:16;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:42:"3.Java中流类的超类主要由那些？";i:1;i:2;i:2;i:738;}i:2;i:738;}i:17;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:738;}i:18;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:738;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"java.io.InputStream";}i:2;i:795;}i:20;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:814;}i:21;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:814;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"java.io.OutputStream";}i:2;i:816;}i:23;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:836;}i:24;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:836;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"java.io.Reader";}i:2;i:838;}i:26;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:852;}i:27;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:852;}i:28;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"java.io.Writer";}i:2;i:854;}i:29;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:868;}i:30;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:872;}i:31;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:49:"4. FileInputStream和FileOutputStream是什么？";i:1;i:2;i:2;i:872;}i:2;i:872;}i:32;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:872;}i:33;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:872;}i:34;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:248:"这是在拷贝文件操作的时候，经常用到的两个类。在处理小文件的时候，它们性能表现还不错，在大文件的时候，最好使用BufferedInputStream (或 BufferedReader) 和 BufferedOutputStream (或 BufferedWriter)";}i:2;i:937;}i:35;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1185;}i:36;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1189;}i:37;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:57:"5. 字节流和字符流，你更喜欢使用拿一个？";i:1;i:2;i:2;i:1189;}i:2;i:1189;}i:38;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1189;}i:39;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1189;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:304:"个人来说，更喜欢使用字符流，因为他们更新一些。许多在字符流中存在的特性，字节流中不存在。比如使用BufferedReader而不是BufferedInputStreams或DataInputStream，使用newLine()方法来读取下一行，但是在字节流中我们需要做额外的操作。";}i:2;i:1262;}i:41;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1566;}i:42;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1570;}i:43;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:34:"6.System.out.println()是什么？";i:1;i:2;i:2;i:1570;}i:2;i:1570;}i:44;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1570;}i:45;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1570;}i:46;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:191:"System是一个java.lang包中的类，用于和底层的操作系统进行交互。out is a static field of System, which has the type of PrintStream. println是PrintStream的一个方法。";}i:2;i:1617;}i:47;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1808;}i:48;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1811;}i:49;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"7.什么是FilterInputStream？";i:1;i:2;i:2;i:1811;}i:2;i:1811;}i:50;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1811;}i:51;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1811;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:181:"A FilterInputStream contains some other input stream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality. ";}i:2;i:1857;}i:53;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2038;}i:54;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:"The class FilterInputStream itself simply overrides all methods of InputStream";}i:2;i:2040;}i:55;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2118;}i:56;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:195:" with versions that pass all requests to the contained input stream. Subclasses of FilterInputStream may further override some of these methods and may also provide additional methods and fields.";}i:2;i:2120;}i:57;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2315;}i:58;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2315;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:180:"Filter Stream是一种IO流主要作用是用来对存在的流增加一些额外的功能，像给目标文件增加源文件中不存在的行数，或者增加拷贝的性能。";}i:2;i:2317;}i:60;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2497;}i:61;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2501;}i:62;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"8. 有哪些可用的Filter流？";i:1;i:2;i:2;i:2501;}i:2;i:2501;}i:63;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:2501;}i:64;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2501;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:235:"在java.io包中主要由4个可用的filter Stream。两个字节filter stream，两个字符filter stream. 分别是FilterInputStream, FilterOutputStream, FilterReader and FilterWriter.这些类是抽象类，不能被实例化的。";}i:2;i:2548;}i:66;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2783;}i:67;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2783;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"有些Filter流的子类:";}i:2;i:2785;}i:69;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2811;}i:70;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2811;}i:71;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2811;}i:72;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2811;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" LineNumberInputStream 给目标文件增加行号";}i:2;i:2815;}i:74;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2865;}i:75;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2865;}i:76;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2865;}i:77;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2865;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:" DataInputStream 有些特殊的方法如readInt(), readDouble()和readLine() 等可以读取一个 int, double和一个string一次性的,";}i:2;i:2869;}i:79;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3008;}i:80;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3008;}i:81;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3008;}i:82;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3008;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" BufferedInputStream 增加性能";}i:2;i:3012;}i:84;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3045;}i:85;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3045;}i:86;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3045;}i:87;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3045;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:" PushbackInputStream 推送要求的字节到系统中";}i:2;i:3049;}i:89;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3103;}i:90;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3103;}i:91;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:3103;}i:92;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3107;}i:93;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"9.SequenceInputStream的作用？";i:1;i:2;i:2;i:3107;}i:2;i:3107;}i:94;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3107;}i:95;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3107;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:244:"这个类的作用是将多个输入流合并成一个输入流，通过SequenceInputStream类包装后形成新的一个总的输入流。在拷贝多个文件到一个目标文件的时候是非常有用的。可用使用很少的代码实现";}i:2;i:3154;}i:97;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3398;}i:98;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3401;}i:99;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:34:"10.说说PrintStream和PrintWriter";i:1;i:2;i:2;i:3401;}i:2;i:3401;}i:100;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3401;}i:101;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3401;}i:102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:"他们两个的功能相同，但是属于不同的分类。字节流和字符流。他们都有println()方法。";}i:2;i:3451;}i:103;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3565;}i:104;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3569;}i:105;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:73:"11. 在文件拷贝的时候，那一种流可用提升更多的性能？";i:1;i:2;i:2;i:3569;}i:2;i:3569;}i:106;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3569;}i:107;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3569;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:"在字节流的时候，使用BufferedInputStream和BufferedOutputStream。
在字符流的时候，使用BufferedReader 和 BufferedWriter";}i:2;i:3656;}i:109;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3795;}i:110;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3799;}i:111;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"12 .说说管道流(Piped Stream)";i:1;i:2;i:2;i:3799;}i:2;i:3799;}i:112;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3799;}i:113;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3799;}i:114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:159:"有四种管道流， PipedInputStream, PipedOutputStream, PipedReader 和 PipedWriter.在多个线程或进程中传递数据的时候管道流非常有用。";}i:2;i:3848;}i:115;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4007;}i:116;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4011;}i:117;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"13.说说File类";i:1;i:2;i:2;i:4011;}i:2;i:4011;}i:118;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:4011;}i:119;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4011;}i:120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:306:"它不属于 IO流，也不是用于文件操作的，它主要用于知道一个文件的属性，读写权限，大小等信息。注意：Java7中文件IO发生了很大的变化，专门引入了很多新的类来取代原来的基于java.io.File的文件IO操作方式。详情阅读下面的文章：";}i:2;i:4041;}i:121;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4347;}i:122;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4347;}i:123;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:140:"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247484947&amp;idx=1&amp;sn=5b3075b83724f5d510e4220488cc1d16&source=41#wechat_redirect";i:1;N;}i:2;i:4349;}i:124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:4489;}i:125;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4490;}i:126;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4490;}i:127;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"14. 说说RandomAccessFile?";i:1;i:2;i:2;i:4490;}i:2;i:4490;}i:128;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:4490;}i:129;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4490;}i:130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:355:"它在java.io包中是一个特殊的类，既不是输入流也不是输出流，它两者都可以做到。他是Object的直接子类。通常来说，一个流只有一个功能，要么读，要么写。但是RandomAccessFile既可以读文件，也可以写文件。 DataInputStream 和 DataOutStream有的方法，在RandomAccessFile中都存在。";}i:2;i:4532;}i:131;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4887;}i:132;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4887;}i:133;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:4887;}}