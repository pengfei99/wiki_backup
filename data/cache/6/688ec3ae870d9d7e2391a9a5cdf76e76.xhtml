
<h1 class="sectionedit1" id="the_scale_cube">The Scale Cube</h1>
<div class="level1">

<p>
In the book, “The Art of Scalability”, the authors (Martin L. Abbott, Michael T. Fisher) describes a really useful, three dimension model, <strong>the scale cube</strong>. 
</p>

<p>
In this model, scaling an application by running clones behind a load balancer is known as X-axis scaling. The other two kinds of scaling are Y-axis scaling and Z-axis scaling. The microservice architecture is an application of Y-axis scaling but let’s also look at X-axis and Z-axis scaling.
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;The Scale Cube&quot;,&quot;hid&quot;:&quot;the_scale_cube&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:1,&quot;range&quot;:&quot;1-487&quot;} -->
<h2 class="sectionedit2" id="x-axis_scaling">X-axis scaling</h2>
<div class="level2">

<p>
X-axis scaling consists of running multiple copies of an application behind a load balancer. If there are N copies then each copy handles 1/N of the load. This is a simple, commonly used approach of scaling an application.
</p>

<p>
One drawback of this approach is that because each copy potentially accesses all of the data, caches require more memory to be effective. Another problem with this approach is that it does not tackle the problems of increasing development and application complexity.
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;X-axis scaling&quot;,&quot;hid&quot;:&quot;x-axis_scaling&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:2,&quot;range&quot;:&quot;488-1007&quot;} -->
<h2 class="sectionedit3" id="y-axis_scaling">Y-axis scaling</h2>
<div class="level2">

<p>
Unlike X-axis and Z-axis, which consist of running multiple, identical copies of the application, Y-axis axis scaling splits the application into multiple, different services. Each service is responsible for one or more closely related functions. There are a couple of different ways of decomposing the application into services. One approach is to use verb-based decomposition and define services that implement a single use case such as checkout. The other option is to decompose the application by noun and create services responsible for all operations related to a particular entity such as customer management. An application might use a combination of verb-based and noun-based decomposition.
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Y-axis scaling&quot;,&quot;hid&quot;:&quot;y-axis_scaling&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:3,&quot;range&quot;:&quot;1008-1736&quot;} -->
<h2 class="sectionedit4" id="z-axis_scaling">Z-axis scaling</h2>
<div class="level2">

<p>
When using Z-axis scaling each server runs an identical copy of the code. In this respect, it’s similar to X-axis scaling. The big difference is that each server is responsible for only a subset of the data. Some component of the system is responsible for routing each request to the appropriate server. One commonly used routing criteria is an attribute of the request such as the primary key of the entity being accessed. Another common routing criteria is the customer type. For example, an application might provide paying customers with a higher SLA than free customers by routing their requests to a different set of servers with more capacity.
</p>

<p>
Z-axis splits are commonly used to scale databases. Data is partitioned (a.k.a. sharded) across a set of servers based on an attribute of each record. In this example, the primary key of the RESTAURANT table is used to partition the rows between two different database servers. Note that X-axis cloning might be applied to each partition by deploying one or more servers as replicas/slaves. Z-axis scaling can also be applied to applications. In this example, the search service consists of a number of partitions. A router sends each content item to the appropriate partition, where it is indexed and stored. A query aggregator sends each query to all of the partitions and combines the results from each of them.
</p>

<p>
Z-axis scaling has a number of benefits.
</p>

<p>
Each server only deals with a subset of the data.
This improves cache utilization and reduces memory usage and I/O traffic.
It also improves transaction scalability since requests are typically distributed across multiple servers.
Also, Z-axis scaling improves fault isolation since a failure only makes part of the data in accessible.
Z-axis scaling has some drawbacks.
</p>

<p>
One drawback is increased application complexity.
We need to implement a partitioning scheme, which can be tricky especially if we ever need to repartition the data.
Another drawback of Z-axis scaling is that doesn’t solve the problems of increasing development and application complexity. To solve those problems we need to apply Y-axis scaling.
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Z-axis scaling&quot;,&quot;hid&quot;:&quot;z-axis_scaling&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:4,&quot;range&quot;:&quot;1737-&quot;} -->