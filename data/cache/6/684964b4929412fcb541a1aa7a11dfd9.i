a:173:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"Zookeeper Interview question";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:45;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"1.ZooKeeper是什么？";i:1;i:2;i:2;i:45;}i:2;i:45;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:45;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:45;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"ZooKeeper是一个";}i:2;i:82;}i:8;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:100;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"分布式";}i:2;i:102;}i:10;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:111;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"的，开放源码的分布式";}i:2;i:113;}i:12;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:143;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"应用程序协调服务";}i:2;i:145;}i:14;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:169;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:171;}i:16;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:172;}i:17;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:172;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:"In the cluster, servers have three different types of roles: leader, follower, observer.";}i:2;i:174;}i:19;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:262;}i:20;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:262;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"客户端的";}i:2;i:264;}i:22;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:276;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"读请求";}i:2;i:278;}i:24;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:287;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:175:"可以被集群中的任意一台机器处理，如果读请求在节点上注册了监听器，这个监听器也是由客户端所连接的zookeeper server来处理。对于";}i:2;i:289;}i:26;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:464;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"写请求";}i:2;i:466;}i:28;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:475;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:158:"，这些请求会同时发给zookeeper leader, 并且follower达成一致后，读请求才会返回成功。因此，随着zookeeper的集群机器增多，";}i:2;i:477;}i:30;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:635;}i:31;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"读请求的吞吐会提高但是写请求的吞吐会下降";}i:2;i:637;}i:32;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:697;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"。";}i:2;i:699;}i:34;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:702;}i:35;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:702;}i:36;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:704;}i:37;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"有序性";}i:2;i:706;}i:38;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:715;}i:39;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:305:"是zookeeper中非常重要的一个特性，所有的更新都是全局有序的，每个更新都有一个唯一的时间戳，这个时间戳称为zxid（Zookeeper Transaction Id）。而读请求只会相对于更新有序，也就是读请求的返回结果中会带有这个zookeeper最新的zxid。";}i:2;i:717;}i:40;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1022;}i:41;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1024;}i:42;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:30:"2. ZooKeeper提供了什么？";i:1;i:2;i:2;i:1024;}i:2;i:1024;}i:43;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1024;}i:44;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1024;}i:45;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"1、文件系统 (in memory)
2、通知机制 (watcher)";}i:2;i:1068;}i:46;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1123;}i:47;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1125;}i:48;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"3. Zookeeper文件系统";i:1;i:2;i:2;i:1125;}i:2;i:1125;}i:49;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1125;}i:50;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1125;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:351:"Zookeeper提供一个多层级的节点命名空间（节点称为znode）。与文件系统不同的是，这些节点都可以设置关联的数据. Zookeeper为了保证高吞吐和低延迟，在内存中维护了这个树状的目录结构，这种特性使得Zookeeper不能用于存放大量的数据，每个节点的存放数据上限为1M。";}i:2;i:1163;}i:52;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1514;}i:53;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1516;}i:54;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"4. znode的类型";i:1;i:2;i:2;i:1516;}i:2;i:1516;}i:55;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1516;}i:56;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1548;}i:57;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"5. Zookeeper通知机制";i:1;i:2;i:2;i:1548;}i:2;i:1548;}i:58;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1548;}i:59;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1548;}i:60;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:187:"client端会对某个znode建立一个watcher事件，当该znode发生变化时，这些client会收到zk的事件通知，然后client可以根据事件来做出业务上的改变等。";}i:2;i:1586;}i:61;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1773;}i:62;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1775;}i:63;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:34:"6. Zookeeper 都有哪些功能？";i:1;i:2;i:2;i:1775;}i:2;i:1775;}i:64;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1775;}i:65;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:1822;}i:66;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1822;}i:67;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1822;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" 集群管理：监控节点存活状态、运行请求等；";}i:2;i:1826;}i:69;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1887;}i:70;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1887;}i:71;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1887;}i:72;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1887;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:192:" 主节点选举：主节点挂掉了之后可以从备用的节点开始新一轮选主，主节点选举说的就是这个选举的过程，使用 Zookeeper 可以协助完成这个过程；";}i:2;i:1891;}i:74;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2083;}i:75;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2083;}i:76;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2083;}i:77;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2083;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:315:" 分布式锁：Zookeeper 提供两种锁：独占锁、共享锁。独占锁即一次只能有一个线程使用资源，共享锁是读锁共享，读写互斥，即可以有多线线程同时读同一个资源，如果要使用写锁也只能有一个线程使用。Zookeeper 可以对分布式锁进行控制。";}i:2;i:2087;}i:79;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2402;}i:80;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2402;}i:81;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2402;}i:82;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2402;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:280:" 命名服务：命名服务是指通过指定的名字来获取资源或者服务的地址，利用zk创建一个znode，这个znode路径就可以作为一个名字，for example in znode /services/database/mysql, we can store the ip address and port number of the mysql server.";}i:2;i:2406;}i:84;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2686;}i:85;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2686;}i:86;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2686;}i:87;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2686;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:531:" 队列管理: 和分布式锁服务中的控制时序场景基本原理一致，入列有编号，出列按编号。在特定的目录下创建PERSISTENT_SEQUENTIAL节点，创建成功时Watcher通知等待的队列，队列删除序列号最小的节点用以消费。此场景下Zookeeper的znode用于消息存储，znode存储的数据就是消息队列中的消息内容，SEQUENTIAL序列号就是消息的编号，按序取出即可。由于创建的节点是持久化的，所以不必担心队列消息的丢失问题。";}i:2;i:2690;}i:89;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3221;}i:90;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3221;}i:91;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3221;}i:92;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3221;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:285:" 配置管理: 程序分布式的部署在不同的机器上，将程序的配置信息放在zk的znode下，当有配置发生改变时，也就是znode发生变化时，可以通过改变zk中某个目录节点的内容，利用watcher通知给各个客户端，从而更改配置。";}i:2;i:3225;}i:94;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3510;}i:95;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3510;}i:96;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3510;}i:97;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3510;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:" 负载均衡or service discovery: Set up a znode /proxies. We can use proxies to register all available proxy servers.";}i:2;i:3514;}i:99;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3633;}i:100;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3633;}i:101;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:3633;}i:102;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3633;}i:103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"And we can set up algo for selecting the right server to do the load balancing. ";}i:2;i:3634;}i:104;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3714;}i:105;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3716;}i:106;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"7. Zookeeper数据复制";i:1;i:2;i:2;i:3716;}i:2;i:3716;}i:107;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3716;}i:108;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3716;}i:109;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:132:"Zookeeper作为一个集群提供一致的数据服务，自然，它要在所有机器间做数据复制。数据复制的好处：";}i:2;i:3754;}i:110;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3886;}i:111;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:3886;}i:112;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3886;}i:113;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3886;}i:114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:" 容错：一个节点出错，不致于让整个系统停止工作，别的节点可以接管它的工作；";}i:2;i:3890;}i:115;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3999;}i:116;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3999;}i:117;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3999;}i:118;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3999;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:" 提高系统的扩展能力 ：把负载分布到多个节点上，或者增加节点来提高系统的负载能力；";}i:2;i:4003;}i:120;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4122;}i:121;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4122;}i:122;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4122;}i:123;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4122;}i:124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:" 提高性能：让客户端本地访问就近的节点，提高用户访问速度。";}i:2;i:4126;}i:125;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4211;}i:126;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4211;}i:127;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:4211;}i:128;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4211;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"数据复制集群系统分下面两种：";}i:2;i:4213;}i:130;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4255;}i:131;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:4255;}i:132;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4255;}i:133;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4255;}i:134;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:" 写主(WriteMaster) ：对数据的修改提交给指定的节点。读无此限制，可以读取任何一个节点。这种情况下客户端需要对读与写进行区别，俗称读写分离；";}i:2;i:4259;}i:135;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4457;}i:136;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4457;}i:137;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4457;}i:138;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4457;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:" 写任意(Write Any)：对数据的修改可提交给任意的节点，跟读一样。这种情况下，客户端对集群节点的角色与变化透明。";}i:2;i:4461;}i:140;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4617;}i:141;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4617;}i:142;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:4617;}i:143;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4617;}i:144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:210:"zookeeper采用的方式是写任意。通过增加机器，它的读吞吐能力和响应能力扩展性非常好，而写，随着机器的增多吞吐能力肯定下降（这也是它建立observer的原因.";}i:2;i:4619;}i:145;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4829;}i:146;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4831;}i:147;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:58:"8. Zookeeper工作原理(谈下你对 ZAB 协议的了解)";i:1;i:2;i:2;i:4831;}i:2;i:4831;}i:148;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:4831;}i:149;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4831;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Zookeeper 的核心是";}i:2;i:4902;}i:151;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4924;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"原子广播";}i:2;i:4926;}i:153;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4938;}i:154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:"，这个机制保证了各个Server之间data的同步。实现这个机制的协议叫做";}i:2;i:4940;}i:155;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:5031;}i:156;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Zab协议";}i:2;i:5033;}i:157;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:5042;}i:158;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"。Zab协议有两种模式，它们分别是";}i:2;i:5044;}i:159;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:5089;}i:160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"恢复模式（选主）";}i:2;i:5091;}i:161;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:5115;}i:162;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"和";}i:2;i:5117;}i:163;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:5120;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"广播模式（同步）";}i:2;i:5122;}i:165;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:5146;}i:166;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:434:"。当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，首先选举产生新的 Leader 服务器，然后集群中 Follower 服务器开始与新的 Leader 服务器进行数据同步。当集群中超过半数机器与该 Leader 服务器完成数据同步之后，退出恢复模式进入消息广播模式，Leader 服务器开始接收客户端的事务请求生成事物提案来进行事务请求处理。";}i:2;i:5148;}i:167;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5582;}i:168;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5584;}i:169;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:55:"9. zookeeper是如何保证事务的顺序一致性的?";i:1;i:2;i:2;i:5584;}i:2;i:5584;}i:170;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5584;}i:171;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5653;}i:172;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:5653;}}