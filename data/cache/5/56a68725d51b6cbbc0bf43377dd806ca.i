a:425:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"ZooKeeper 02: The ZooKeeper data model";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"ZooKeeper拥有一个";}i:2;i:55;}i:5;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:76;}i:6;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"层次的命名空间";}i:2;i:78;}i:7;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:99;}i:8;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:"，这个和分布式的文件系统非常相似。不同的是ZooKeeper命名空间中的";}i:2;i:101;}i:9;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:191;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"Znode";}i:2;i:193;}i:11;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:198;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:286:"，兼具文件和目录两种特点。既像文件一样维护着数据、元信息、ACL、时间戳等数据结构，又像目录一样可以作为路径标识的一部分，并可以具有子znode。用户对znode具有增、删、改、查等操作（权限允许的情况下）。";}i:2;i:200;}i:13;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:486;}i:14;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:486;}i:15;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:488;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"znode具有原子性操作";}i:2;i:490;}i:17;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:516;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:343:"，每个znode的数据将被原子性地读写，读操作会读取与znode相关的所有数据，写操作会一次性替换所有数据。zookeeper并没有被设计为常规的数据库或者大数据存储，相反的是，它用来管理调度数据，比如分布式应用中的配置文件信息、状态信息、汇集位置等等。";}i:2;i:518;}i:19;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:861;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:240:"这些数据的共同特性就是它们都是很小的数据，通常以KB为大小单位。zooKeeper的服务器和客户端都被设计为严格检查并限制每个znode的数据大小至多1M，当时常规使用中应该远小于此值";}i:2;i:863;}i:21;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1103;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"。";}i:2;i:1105;}i:23;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1108;}i:24;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1110;}i:25;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"2.1 Zonde Path (路径标注)";i:1;i:2;i:2;i:1110;}i:2;i:1110;}i:26;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1110;}i:27;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1110;}i:28;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:118:"Zonde由路径标注，ZooKeeper中被表示成有反斜杠分割的Unicode字符串，如同Unix中的文件路径。";}i:2;i:1153;}i:29;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1271;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"路径必须是绝对的";}i:2;i:1273;}i:31;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1297;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"，因此他们必须由";}i:2;i:1299;}i:33;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1323;}i:34;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"反斜杠来字符开头";}i:2;i:1325;}i:35;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1349;}i:36;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"。除此以外，";}i:2;i:1351;}i:37;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1369;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"路径必须是唯一的";}i:2;i:1371;}i:39;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1395;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:159:"，也就是说每一个路径只有一个表示，因此这些路径不能改变。ZooKeeper的数据结构, 与普通的文件系统极为类似. 见下图:
";}i:2;i:1397;}i:41;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:69:":employes:pengfei.liu:data_science:zookeeper:zookeeper_data_model.png";i:1;s:0:"";i:2;N;i:3;s:3:"400";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:1556;}i:42;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1634;}i:43;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1636;}i:44;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:30:"Restrictions of ZooKeeper path";i:1;i:3;i:2;i:1636;}i:2;i:1636;}i:45;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1636;}i:46;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1677;}i:47;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1677;}i:48;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1677;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:" The slash-separated znode paths are canonical and have to be absolute. Relative paths and references are not recognized by ZooKeeper. ";}i:2;i:1681;}i:50;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1816;}i:51;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1816;}i:52;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1816;}i:53;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1816;}i:54;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:" The znode names can be composed of any Unicode characters, and the znodes can have any name (except the word is reserved by ZooKeeper and ";}i:2;i:1820;}i:55;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:1959;}i:56;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:1960;}i:57;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:1961;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" ). ";}i:2;i:1962;}i:59;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1966;}i:60;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1966;}i:61;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1966;}i:62;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1968;}i:63;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"2.2 Znode components";i:1;i:2;i:2;i:1968;}i:2;i:1968;}i:64;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1968;}i:65;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1968;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:"图中的每个节点称为一个znode. 每个znode由3部分组成:";}i:2;i:2002;}i:67;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2071;}i:68;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:2071;}i:69;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2071;}i:70;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2071;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:923:" stat：此为状态信息. 它包含着版本号(dataVersion)，时间戳(ctime,mtime), 权限等状态信息。ZooKeeper正是使用节点的这些特性来实现它的某些特定功能。每当Znode的数据改变时，他相应的版本号将会增加。每当客户端检索数据时，它将同时检索数据的版本号。并且如果一个客户端执行了某个节点的更新或删除操作，他也必须提供要被操作的数据版本号。如果所提供的数据版本号与实际不匹配，那么这个操作将会失败。(The version number increases whenever the znode's data changes. ZooKeeper uses the version numbers along with the associated timestamps to validate its in-core cache. The znode version number also enables the client to update or delete a particular znode through ZooKeeper APIs. If the version number specified doesn't match the current version of a znode, the operation fails. ";}i:2;i:2075;}i:72;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2998;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:"However, this can be overridden by specifying 0 as the version number while performing a znode update or delete operation.";}i:2;i:3000;}i:74;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3122;}i:75;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:")";}i:2;i:3124;}i:76;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3125;}i:77;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3125;}i:78;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3125;}i:79;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3125;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:" data：与该znode关联的数据.";}i:2;i:3129;}i:81;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3164;}i:82;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3164;}i:83;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3164;}i:84;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3164;}i:85;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" children：该znode下的子节点.";}i:2;i:3168;}i:86;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3204;}i:87;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3204;}i:88;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:3204;}i:89;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3206;}i:90;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"2.3 Types of znodes";i:1;i:2;i:2;i:3206;}i:2;i:3206;}i:91;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3206;}i:92;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3206;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:"ZooKeeper has three types of nodes:";}i:2;i:3239;}i:94;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3274;}i:95;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:3274;}i:96;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3274;}i:97;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3274;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" persistent";}i:2;i:3279;}i:99;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3290;}i:100;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3290;}i:101;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3290;}i:102;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3290;}i:103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" ephemeral. ";}i:2;i:3294;}i:104;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3306;}i:105;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3306;}i:106;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3306;}i:107;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3306;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:" sequential: It is a kind of a qualifier for the other two types. Both persistent and ephemeral znodes can be sequential znodes as well. ";}i:2;i:3310;}i:109;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3447;}i:110;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3447;}i:111;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:3447;}i:112;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3447;}i:113;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3449;}i:114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"Note that a znode's type is set at its creation time";}i:2;i:3451;}i:115;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3503;}i:116;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:3505;}i:117;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3506;}i:118;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3508;}i:119;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"2.3.1 The persistent znode";i:1;i:3;i:2;i:3508;}i:2;i:3508;}i:120;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3508;}i:121;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3508;}i:122;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:164:"As the name suggests, persistent znodes have a lifetime in the ZooKeeper's namespace until they're explicitly deleted. A znode can be deleted by calling the delete ";}i:2;i:3546;}i:123;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:3710;}i:124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:173:" call. It's not necessary that only the client that created a persistent znode has to delete it. Note that any authorized client of the ZooKeeper service can delete a znode.";}i:2;i:3713;}i:125;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3886;}i:126;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3886;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:304:"Persistent znodes are useful for storing data that needs to be highly available and accessible by all the components of a distributed application. For example, an application can store the configuration data in a persistent znode. The data as well as the znode will exist even if the creator client dies.";}i:2;i:3888;}i:128;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4192;}i:129;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4194;}i:130;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"2.3.2 The ephemeral znode";i:1;i:3;i:2;i:4194;}i:2;i:4194;}i:131;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4194;}i:132;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4194;}i:133;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4231;}i:134;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:"An ephemeral znode is deleted by the ZooKeeper service when the creating client's session ends";}i:2;i:4233;}i:135;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4327;}i:136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:132:". An end to a client's session can happen because of disconnection due to a client crash or explicit termination of the connection. ";}i:2;i:4329;}i:137;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4461;}i:138;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4461;}i:139;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4463;}i:140;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:"Even though ephemeral nodes are tied to a client session, they are visible to all clients, depending on the configured Access Control List (";}i:2;i:4465;}i:141;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"ACL";}i:2;i:4605;}i:142;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:") policy.";}i:2;i:4608;}i:143;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4617;}i:144;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4619;}i:145;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4619;}i:146;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"An ephemeral znode can also be ";}i:2;i:4621;}i:147;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4652;}i:148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:"explicitly deleted by the creator client or any other authorized client";}i:2;i:4654;}i:149;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4725;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" by using the delete ";}i:2;i:4727;}i:151;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:4748;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:163:" call. An ephemeral znode ceases to exist once its creator client's session with the ZooKeeper service ends. Hence, in the current version of ZooKeeper, ephemeral ";}i:2;i:4751;}i:153;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4914;}i:154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"znodes are not allowed to have children";}i:2;i:4916;}i:155;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4955;}i:156;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:4957;}i:157;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4958;}i:158;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4958;}i:159;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4961;}i:160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:171:"The concept of ephemeral znodes can be used to build distributed applications where the components need to know the state of the other constituent components or resources.";}i:2;i:4963;}i:161;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:5134;}i:162;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:270:" For example, a distributed group membership service can be implemented by using ephemeral znodes. The property of ephemeral nodes getting deleted when the creator client's session ends can be used as an analog of a node that is joining or leaving a distributed cluster.";}i:2;i:5136;}i:163;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5406;}i:164;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5408;}i:165;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"2.3.3 The sequential znode";i:1;i:3;i:2;i:5408;}i:2;i:5408;}i:166;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5408;}i:167;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5408;}i:168;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:222:"A sequential znode is assigned a sequence number by ZooKeeper as a part of its name during its creation. The value of a monotonously increasing counter (maintained by the parent znode) is appended to the name of the znode.";}i:2;i:5446;}i:169;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5668;}i:170;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5668;}i:171;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:5670;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:"The counter used to store the sequence number is a signed integer (4 bytes)";}i:2;i:5672;}i:173;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:5747;}i:174;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:195:". It has a format of 10 digits with 0 (zero) padding. For example, look at /path/to/znode-0000000001. This naming convention is useful to sort the sequential znodes by the value assigned to them.";}i:2;i:5749;}i:175;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5944;}i:176;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5944;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:211:"Sequential znodes can be used for the implementation of a distributed global queue, as sequence numbers can impose a global ordering. They may also be used to design a lock service for a distributed application.";}i:2;i:5946;}i:178;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6157;}i:179;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6159;}i:180;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"3. ZooKeeper Watches";i:1;i:2;i:2;i:6159;}i:2;i:6159;}i:181;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:6159;}i:182;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6159;}i:183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:248:"Clients can register with the ZooKeeper service for any changes associated with a znode. This registration is known as setting a watch on a znode in ZooKeeper terminology. Watches allow clients to get notifications when a znode changes in any way. ";}i:2;i:6193;}i:184;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6441;}i:185;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6441;}i:186;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6443;}i:187;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"A watch is a one-time operation";}i:2;i:6445;}i:188;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:6476;}i:189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:177:", which means that it triggers only one notification. To continue receiving notifications over time, the client must reregister the watch upon receiving each event notification.";}i:2;i:6478;}i:190;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6655;}i:191;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6657;}i:192;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:44:"3.1 An service discovery example via watches";i:1;i:3;i:2;i:6657;}i:2;i:6657;}i:193;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6657;}i:194;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6657;}i:195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:"Let's use an example to illustrate the concept of ZooKeeper watches and notifications.";}i:2;i:6713;}i:196;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6799;}i:197;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6799;}i:198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:404:"In a cluster, we have tow types of nodes:
- Client nodes: hosting an application and is interested in getting notified when another client node joins the cluster. They use ZooKeeper to know each other. Any node that is joining the cluster creates an ephemeral node in the ZooKeeper path /Members.
- ZooKeeper node: It has a znode /Members which hosts all available client nodes information in the cluster";}i:2;i:6801;}i:199;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7205;}i:200;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7205;}i:201;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"Suppose we have the following scenario:";}i:2;i:7208;}i:202;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7247;}i:203;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:7247;}i:204;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7247;}i:205;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7247;}i:206;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:323:" In the beginning, we have 0 Client nodes in the cluster. Client1 connected to the cluster, and issues a create to create an ephemeral znode called Host1 in /Members. Then it issues getChildren request on the ZooKeeper path /Members, he sees only him is present in the cluster. It sets a watch on /Members for any changes. ";}i:2;i:7251;}i:207;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7574;}i:208;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7574;}i:209;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7574;}i:210;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7574;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:296:" Now, another node, Client2, joins the cluster and creates an ephemeral znode called Host2 in /Members. The watch gets triggered and Client1 receives a notification from the ZooKeeper service. If Client1 now issues getChildren request on the ZooKeeper path /Members, it sees the new znode Host2. ";}i:2;i:7578;}i:212;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7874;}i:213;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7874;}i:214;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:7874;}i:215;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7874;}i:216;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:127:"This flow of the setting of watches, and notifications and subsequent resetting of the watches is shown in the following image:";}i:2;i:7877;}i:217;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8004;}i:218;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8004;}i:219;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:82:":employes:pengfei.liu:data_science:zookeeper:zookeeper_member_discover_example.png";i:1;s:0:"";i:2;N;i:3;s:3:"400";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:8006;}i:220;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8097;}i:221;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8099;}i:222;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:42:"3.2 Watch properties and trigger condition";i:1;i:3;i:2;i:8099;}i:2;i:8099;}i:223;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:8099;}i:224;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8099;}i:225;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8153;}i:226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"ZooKeeper watches are a one-time trigger";}i:2;i:8155;}i:227;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8195;}i:228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:151:". This means if a client receives a watch event and wants to get notified of future changes, it must set another watch. Whenever a watch is triggered, ";}i:2;i:8197;}i:229;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8348;}i:230;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"a notification is dispatched to the client that had set the watch";}i:2;i:8350;}i:231;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8415;}i:232;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:". Watches are maintained in the ";}i:2;i:8417;}i:233;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8449;}i:234;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"ZooKeeper server to which a client is connected";}i:2;i:8451;}i:235;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8498;}i:236;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:", and this makes it a fast and lean method of event notification.";}i:2;i:8500;}i:237;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8565;}i:238;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8565;}i:239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"The watches are triggered for the following three changes to a znode:";}i:2;i:8567;}i:240;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8636;}i:241;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:8636;}i:242;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8636;}i:243;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8636;}i:244;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:124:" Any changes to the data of a znode, such as when new data is written to the znode's data field using the setData operation.";}i:2;i:8640;}i:245;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8764;}i:246;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8764;}i:247;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8764;}i:248;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8764;}i:249;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:" Any changes to the children of a znode. For instance, children of a znode are deleted with the delete operation.";}i:2;i:8768;}i:250;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8881;}i:251;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8881;}i:252;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8881;}i:253;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8881;}i:254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:" A znode being created or deleted, which could happen in the event that a new znode is added to a path or an existing one is deleted.";}i:2;i:8885;}i:255;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9018;}i:256;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9018;}i:257;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:9018;}i:258;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9020;}i:259;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:43:"3.3 Guarantees of watches and notifications";i:1;i:3;i:2;i:9020;}i:2;i:9020;}i:260;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:9020;}i:261;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9020;}i:262;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:"ZooKeeper asserts the following guarantees with respect to watches and notifications:";}i:2;i:9075;}i:263;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9160;}i:264;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:9160;}i:265;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9160;}i:266;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9160;}i:267;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:" ZooKeeper ensures that watches are always ordered in the first in first out (FIFO) manner and that notifications are always dispatched in order.";}i:2;i:9164;}i:268;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9309;}i:269;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9309;}i:270;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9309;}i:271;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9309;}i:272;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:" Watch notifications are delivered to a client before any other change is made to the same znode";}i:2;i:9313;}i:273;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9409;}i:274;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9409;}i:275;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9409;}i:276;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9409;}i:277;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:" The order of the watch events are ordered with respect to the updates seen by the ZooKeeper service";}i:2;i:9413;}i:278;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9513;}i:279;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9513;}i:280;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:9513;}i:281;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9515;}i:282;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:61:"3.3.1 Resetting watch after a notification can cause problems";i:1;i:4;i:2;i:9515;}i:2;i:9515;}i:283;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:9515;}i:284;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9515;}i:285;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:437:"Since ZooKeeper watches are one-time triggers and due to the latency involved between getting a watch event and resetting of the watch, it's possible that a client might lose changes done to a znode during this interval. In a distributed application in which a znode changes multiple times between the dispatch of an event and resetting the watch for events, developers must be careful to handle such situations in the application logic.";}i:2;i:9585;}i:286;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10022;}i:287;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10024;}i:288;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:62:"3.3.2 Watches properties after client disconnect and reconnect";i:1;i:4;i:2;i:10024;}i:2;i:10024;}i:289;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:10024;}i:290;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10024;}i:291;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:236:"When a client gets disconnected from the ZooKeeper server, it doesn't receive any watches until the connection is re-established. If the client then reconnects, any previously registered watches will also be reregistered and triggered. ";}i:2;i:10096;}i:292;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10332;}i:293;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10332;}i:294;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:215:"If the client connects to a new server, the watch will be triggered for any session events. This disconnection from a server and reconnection to a new server happens in a transparent way for the client applications.";}i:2;i:10334;}i:295;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10549;}i:296;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10549;}i:297;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:531:"Although ZooKeeper guarantees that all registered watches get dispatched to the client, even if the client disconnects from one server and reconnects to another server within the ZooKeeper service, there is one possible scenario worth mentioning where a watch might be missed by a client. This specific scenario is when a client has set a watch for the existence of a znode that has not yet been created. In this case, a watch event will be missed if the znode is created, and deleted while the client is in the disconnected state.";}i:2;i:10551;}i:298;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11082;}i:299;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11084;}i:300;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"4. ZooKeeper stat structure";i:1;i:2;i:2;i:11084;}i:2;i:11084;}i:301;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:11084;}i:302;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11084;}i:303;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:11125;}i:304;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:"Every znode in ZooKeeper's namespace has a stat structure associated with it";}i:2;i:11127;}i:305;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:11203;}i:306;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:", which describes the status of the znode. The fields in the stat structure of a znode are shown as follows with their respective meanings:";}i:2;i:11205;}i:307;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11344;}i:308;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:11344;}i:309;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11344;}i:310;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11344;}i:311;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11348;}i:312;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:11349;}i:313;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"cZxid";}i:2;i:11351;}i:314;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:11356;}i:315;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:" : This is the transaction ID of the change that caused this znode to be created.";}i:2;i:11358;}i:316;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11439;}i:317;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11439;}i:318;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11439;}i:319;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11439;}i:320;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11443;}i:321;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:11444;}i:322;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"mZxid";}i:2;i:11446;}i:323;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:11451;}i:324;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" : This is the transaction ID of the change that last modified this znode.";}i:2;i:11453;}i:325;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11527;}i:326;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11527;}i:327;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11527;}i:328;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11527;}i:329;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11531;}i:330;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:11532;}i:331;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"pZxid";}i:2;i:11534;}i:332;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:11539;}i:333;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" : This is the transaction ID for a znode change that pertains to adding or removing children.";}i:2;i:11541;}i:334;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11635;}i:335;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11635;}i:336;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11635;}i:337;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11635;}i:338;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11639;}i:339;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:11640;}i:340;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"ctime";}i:2;i:11642;}i:341;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:11647;}i:342;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:" : This denotes the creation time of a znode in milliseconds from epoch.";}i:2;i:11649;}i:343;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11721;}i:344;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11721;}i:345;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11721;}i:346;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11721;}i:347;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11725;}i:348;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:11726;}i:349;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"mtime";}i:2;i:11728;}i:350;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:11733;}i:351;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:" : This denotes the last modification time of a znode in milliseconds from epoch.";}i:2;i:11735;}i:352;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11816;}i:353;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11816;}i:354;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11816;}i:355;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11816;}i:356;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11820;}i:357;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:11821;}i:358;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"dataVersion";}i:2;i:11823;}i:359;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:11834;}i:360;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" : This denotes the number of changes made to the data of this znode.";}i:2;i:11836;}i:361;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11905;}i:362;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11905;}i:363;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11905;}i:364;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11905;}i:365;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11909;}i:366;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:11910;}i:367;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"cversion";}i:2;i:11912;}i:368;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:11920;}i:369;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" : This denotes the number of changes made to the children of this znode.";}i:2;i:11922;}i:370;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11995;}i:371;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11995;}i:372;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11995;}i:373;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11995;}i:374;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11999;}i:375;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:12000;}i:376;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"aclVersion";}i:2;i:12002;}i:377;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:12012;}i:378;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" : This denotes the number of changes made to the ";}i:2;i:12014;}i:379;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"ACL";}i:2;i:12064;}i:380;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" of this znode.";}i:2;i:12067;}i:381;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12082;}i:382;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12082;}i:383;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12082;}i:384;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12082;}i:385;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:12086;}i:386;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:12087;}i:387;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"ephemeralOwner";}i:2;i:12089;}i:388;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:12103;}i:389;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:" : This is the session ID of the znode's owner if the znode is an ephemeral node. If the znode is not an ephemeral node, this field is set to zero.";}i:2;i:12105;}i:390;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12252;}i:391;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12252;}i:392;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12252;}i:393;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12252;}i:394;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:12256;}i:395;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:12257;}i:396;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"dataLength";}i:2;i:12259;}i:397;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:12269;}i:398;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:" : This is the length of the data field of this znode.";}i:2;i:12271;}i:399;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12325;}i:400;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12325;}i:401;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12325;}i:402;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12325;}i:403;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:12329;}i:404;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:12330;}i:405;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"numChildren";}i:2;i:12332;}i:406;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:12343;}i:407;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:" : This denotes the number of children of this znode.";}i:2;i:12345;}i:408;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12398;}i:409;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12398;}i:410;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:12398;}i:411;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12398;}i:412;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:"In the ZooKeeper Java shell, the stat structure of a znode can be viewed using the ";}i:2;i:12400;}i:413;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:12483;}i:414;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"stat";}i:2;i:12485;}i:415;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:12489;}i:416;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:12491;}i:417;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:12495;}i:418;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"ls2";}i:2;i:12497;}i:419;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:12500;}i:420;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" command. This is illustrated as follows";}i:2;i:12502;}i:421;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12542;}i:422;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:20:"
stat /tmp
ls2 /tmp
";i:1;N;i:2;N;}i:2;i:12549;}i:423;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12577;}i:424;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:12577;}}