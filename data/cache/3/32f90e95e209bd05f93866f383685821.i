a:295:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Spark Introduction";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:36;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Spark architecture";i:1;i:2;i:2;i:36;}i:2;i:36;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:36;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:101:"Spark uses a master/worker architecture. There is a driver that talks to a single coordinator called ";}i:2;i:67;}i:8;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:168;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"master";}i:2;i:170;}i:10;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:176;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" that manages ";}i:2;i:178;}i:12;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:192;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"slaves";}i:2;i:194;}i:14;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:200;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" (i.e. workers) in which executors run.";}i:2;i:202;}i:16;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:241;}i:17;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:241;}i:18;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:76:":employes:pengfei.liu:big_data:spark:sparkapp-sparkcontext-master-slaves.png";i:1;s:0:"";i:2;N;i:3;s:3:"400";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:243;}i:19;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:328;}i:20;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:328;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:192:"The driver and the executors run in their own Java processes. You can run them all on the same (horizontal cluster) or separate machines (vertical cluster) or in a mixed machine configuration.";}i:2;i:330;}i:22;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:522;}i:23;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:524;}i:24;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Master Node";i:1;i:3;i:2;i:524;}i:2;i:524;}i:25;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:524;}i:26;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:524;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"Master node runs";}i:2;i:546;}i:28;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:562;}i:29;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:562;}i:30;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:562;}i:31;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:562;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" Driver program";}i:2;i:567;}i:33;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:582;}i:34;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:582;}i:35;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:582;}i:36;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:582;}i:37;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" Cluster Manager";}i:2;i:586;}i:38;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:602;}i:39;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:602;}i:40;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:602;}i:41;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:602;}i:42;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:604;}i:43;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"Driver program";}i:2;i:606;}i:44;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:620;}i:45;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:": A driver program is an application that uses Spark as a library. It provides the data processing code that Spark executes on the worker nodes. A driver program can launch one or more jobs on a Spark cluster.";}i:2;i:622;}i:46;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:831;}i:47;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:831;}i:48;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:833;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Cluster manager";}i:2;i:835;}i:50;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:850;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:": We can have three different type";}i:2;i:852;}i:52;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:886;}i:53;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:886;}i:54;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:886;}i:55;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:886;}i:56;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" standalone(spark default resource manager)";}i:2;i:891;}i:57;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:934;}i:58;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:934;}i:59;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:934;}i:60;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:934;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" yarn ";}i:2;i:938;}i:62;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:944;}i:63;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:944;}i:64;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:944;}i:65;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:944;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" mesos ";}i:2;i:948;}i:67;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:955;}i:68;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:955;}i:69;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:955;}i:70;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:955;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:356:"cluster manager (resource manager) can acquire cluster resources for executing a job. A cluster manager, as the name implies, manages computing resources across a cluster of worker nodes. It provides low-level scheduling of cluster resources across applications. It enables multiple applications to share cluster resources and run on the same worker nodes.";}i:2;i:956;}i:72;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1312;}i:73;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1312;}i:74;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:"Yarn and mesos allow you to run Spark and Hadoop simultaneously on the same worker nodes.";}i:2;i:1314;}i:75;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1403;}i:76;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1405;}i:77;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Worker Node";i:1;i:3;i:2;i:1405;}i:2;i:1405;}i:78;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1405;}i:79;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1405;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:134:"Worker Node provides CPU, memory, and storage to a spark application. It runs one or many Executor, a Executor runs one or many Tasks.";}i:2;i:1428;}i:81;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1562;}i:82;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1562;}i:83;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1564;}i:84;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Executor";}i:2;i:1566;}i:85;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1574;}i:86;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:453:": spark executors runs on worker node as distributed process of a Spark application(aka. driver program). An executor is a JVM process that Spark creates on each worker for an application. It executes application code concurrently in multiple threads. It can also cache data in memory or disk. An executor has the same lifespan as the application for which it is created. When a Spark application terminates, all executors created for it also terminate.";}i:2;i:1576;}i:87;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2029;}i:88;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2029;}i:89;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2031;}i:90;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"Executor number on a worker";}i:2;i:2033;}i:91;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2060;}i:92;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:" : If you specify the amount of executors when invoking spark-submit you should get the amount you ask for ";}i:2;i:2062;}i:93;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:2169;}i:94;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:213:"num-executors X
If you do not specify then by default Spark should use dynamic allocation which will start more executors if needed. In this case you can configure the behaviour, e.g. max number of executors, see ";}i:2;i:2171;}i:95;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:73:"http://spark.apache.org/docs/latest/configuration.html#dynamic-allocation";i:1;N;}i:2;i:2384;}i:96;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2457;}i:97;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2457;}i:98;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2459;}i:99;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"Tasks";}i:2;i:2461;}i:100;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2466;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:251:" : A task is the smallest unit of work that Spark sends to an executor. It is executed by a thread in an executor on a worker node. Each task performs some computations to either return a result to a driver program or partition its output for shuffle.";}i:2;i:2468;}i:102;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2719;}i:103;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2719;}i:104;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2721;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"Task numbers on a executor";}i:2;i:2723;}i:106;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2749;}i:107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:222:" : Spark creates a task per data partition. An executor runs one or more tasks concurrently. The amount of parallelism is determined by the number of partitions. More partitions mean more tasks processing data in parallel.";}i:2;i:2751;}i:108;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2973;}i:109;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2976;}i:110;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"Other important terminology";i:1;i:2;i:2;i:2976;}i:2;i:2976;}i:111;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:2976;}i:112;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:3015;}i:113;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3015;}i:114;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3015;}i:115;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:296:" Shuffle: A shuffle redistributes data among a cluster of nodes. It is an expensive operation because it involves moving data across a network. Note that a shuffle does not randomly redistribute data; it groups data elements into buckets based on some criteria. Each bucket forms a new partition.";}i:2;i:3019;}i:116;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3315;}i:117;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3315;}i:118;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3315;}i:119;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3315;}i:120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:219:" Job: A job is a set of computations that Spark performs to return results to a driver program. Essentially, it is an execution of a data processing algorithm on a Spark cluster. An application can launch multiple jobs.";}i:2;i:3319;}i:121;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3538;}i:122;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3538;}i:123;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3538;}i:124;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3538;}i:125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:441:" Stage: A stage is a collection of tasks. Spark splits a job into a DAG of stages. A stage may depend on another stage. For example, a job may be split into two stages, stage 0 and stage 1, where stage 1 cannot begin until stage 0 is completed. Spark groups tasks into stages using shuffle boundaries. Tasks that do not require a shuffle are grouped into the same stage. A task that requires its input data to be shuffled begins a new stage.";}i:2;i:3542;}i:126;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3983;}i:127;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3983;}i:128;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:3983;}i:129;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3985;}i:130;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"How an Spark Applications works";i:1;i:2;i:2;i:3985;}i:2;i:3985;}i:131;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3985;}i:132;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3985;}i:133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:584:"With the definitions out of the way, I can now describe how a Spark application processes data in parallel
across a cluster of nodes. When a Spark application is run, Spark connects to a cluster manager and acquires executors on the worker nodes. As mentioned earlier, a Spark application submits a data processing algorithm as a job. Spark splits a job into a directed acyclic graph (DAG) of stages. It then schedules the execution of these stages on the executors using a low-level scheduler provided by a cluster manager. The executors run the tasks submitted by Spark in parallel.";}i:2;i:4030;}i:134;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4614;}i:135;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4614;}i:136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:425:"Every Spark application gets its own set of executors on the worker nodes. This design provides a few
benefits. First, tasks from different applications are isolated from each other since they run in different JVM processes. A misbehaving task from one application cannot crash another Spark application. Second, scheduling of tasks becomes easier. Spark has to schedule the tasks belonging to only one application at a time.";}i:2;i:4616;}i:137;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5041;}i:138;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5041;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:522:"It does not have to handle the complexities of scheduling tasks from multiple concurrently running applications. However, this design also has one disadvantage. Since applications run in separate JVM processes, they cannot easily share data. Even though they may be running on the same worker nodes, they cannot share data without writing it to disk. As previously mentioned, writing and reading data from disk are expensive operations. Therefore, applications sharing data through disk will experience performance issues.";}i:2;i:5043;}i:140;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5565;}i:141;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5567;}i:142;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"Spark API";i:1;i:2;i:2;i:5567;}i:2;i:5567;}i:143;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5567;}i:144;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5567;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:189:"Spark makes its cluster computing capabilities available to an application in the form of a library. This
library is written in Scala, but it provides an application programming interface (";}i:2;i:5589;}i:146;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:5778;}i:147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:") in multiple languages.";}i:2;i:5781;}i:148;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5805;}i:149;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5805;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"At the current time (08-2018), the Spark ";}i:2;i:5807;}i:151;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:5848;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:188:" is available in Scala, Java, Python, and R. You can
develop a Spark application in any of these languages. Unofficial support for additional languages, such as Clojure, is also available.";}i:2;i:5851;}i:153;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6039;}i:154;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6039;}i:155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"The Spark ";}i:2;i:6041;}i:156;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:6051;}i:157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:" consists of two important abstractions: SparkContext and Resilient Distributed Datasets
(RDDs).";}i:2;i:6054;}i:158;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6150;}i:159;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6152;}i:160;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"SparkContext(SparkSession)";i:1;i:3;i:2;i:6152;}i:2;i:6152;}i:161;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6152;}i:162;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6152;}i:163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:205:"In older version of Spark there was different contexts that was entrypoints to the different api (sparkcontext for the core api, sql context for the spark-sql api, streaming context for the Dstream api etc";}i:2;i:6190;}i:164;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:6395;}i:165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:293:") this was source of confusion for the developer and was a point of optimization for the spark team, so in the most recent version of spark there is only one entrypoint (the spark session) and from this you can get the various other entrypoint (the spark context , the streaming context , etc ";}i:2;i:6398;}i:166;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:6691;}i:167;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:".)";}i:2;i:6694;}i:168;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6697;}i:169;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6697;}i:170;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"Run spark on different mode";i:1;i:2;i:2;i:6697;}i:2;i:6697;}i:171;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:6697;}i:172;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6697;}i:173;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"Local mode : local[2]";}i:2;i:6739;}i:174;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6760;}i:175;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6760;}i:176;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:"For the local mode, spark runs drivers, masters, and workers on the same JVM. The number 2 defines how many cores spark will use.";}i:2;i:6762;}i:177;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6891;}i:178;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6891;}i:179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"standalone cluster : spark:";}i:2;i:6893;}i:180;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:6920;}i:181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"master:7077

spark on yarn : yarn-client

spark on mesos : mesos:";}i:2;i:6922;}i:182;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:6987;}i:183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"host:5050";}i:2;i:6989;}i:184;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6998;}i:185;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7000;}i:186;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"Spark-shell vs spark submit";i:1;i:2;i:2;i:7000;}i:2;i:7000;}i:187;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:7000;}i:188;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7040;}i:189;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:55:"Launching spark on Yarn : Deploy mode Client vs Cluster";i:1;i:2;i:2;i:7040;}i:2;i:7040;}i:190;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:7040;}i:191;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7040;}i:192;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:390:"There are two deploy modes that can be used to launch Spark applications on YARN. In cluster mode, the Spark driver runs inside an application master process which is managed by YARN on the cluster, and the client can go away after initiating the application. In client mode, the driver runs in the client process, and the application master is only used for requesting resources from YARN.";}i:2;i:7108;}i:193;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7498;}i:194;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7498;}i:195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"When you do spark-shell or spark-submit, you could choose ";}i:2;i:7500;}i:196;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:7558;}i:197;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"deploy-mode client/cluster";}i:2;i:7560;}i:198;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7586;}i:199;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:70:"
# spark shell
$ ./bin/spark-shell --master yarn --deploy-mode client
";i:1;N;i:2;N;}i:2;i:7593;}i:200;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:261:"
$ ./bin/spark-submit --class org.apache.spark.examples.SparkPi \
    --master yarn \
    --deploy-mode cluster \
    --driver-memory 4g \
    --executor-memory 2g \
    --executor-cores 1 \
    --queue thequeue \
    examples/jars/spark-examples*.jar \
    10
";i:1;N;i:2;N;}i:2;i:7679;}i:201;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7679;}i:202;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:424:"The above starts a YARN client program which starts the default Application Master. Then SparkPi will be run as a child thread of Application Master. The client will periodically poll the Application Master for status updates and display them in the console. The client will exit once your application has finished running. Refer to the “Debugging your Application” section below for how to see driver and executor logs.";}i:2;i:7950;}i:203;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8375;}i:204;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8375;}i:205;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Client mode:";i:1;i:3;i:2;i:8375;}i:2;i:8375;}i:206;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:8375;}i:207;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8375;}i:208;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:174:"When deploy-mode is client, the Driver Program is not necessarily the master node. You could run spark-submit on your laptop, and the Driver Program would run on your laptop.";}i:2;i:8399;}i:209;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8573;}i:210;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8573;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:"The Client mode is perfect for the following situations:";}i:2;i:8575;}i:212;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8631;}i:213;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:8631;}i:214;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8631;}i:215;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8631;}i:216;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" Want to get a job result (dynamic analysis)";}i:2;i:8635;}i:217;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8679;}i:218;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8679;}i:219;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8679;}i:220;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8679;}i:221;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" Easier for developing/debugging";}i:2;i:8683;}i:222;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8715;}i:223;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8715;}i:224;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8715;}i:225;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8715;}i:226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" Control where your Driver Program is running";}i:2;i:8719;}i:227;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8764;}i:228;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8764;}i:229;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8764;}i:230;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8764;}i:231;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:" Always up application: expose your Spark job launcher as REST service or a Web UI";}i:2;i:8768;}i:232;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8850;}i:233;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8850;}i:234;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:8850;}i:235;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8852;}i:236;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Cluster mode";i:1;i:3;i:2;i:8852;}i:2;i:8852;}i:237;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:8852;}i:238;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8852;}i:239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:369:"On the contrary, when deploy-mode is cluster, then cluster manager (master node) is used to find a slave having enough available resources to execute the Driver Program. As a result, the Driver Program would run on one of the slave nodes. As its execution is delegated, you can not get the result from Driver Program, it must store its results in a file, database, etc.";}i:2;i:8876;}i:240;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9245;}i:241;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9245;}i:242;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"The Cluster mode is for the following situations:";}i:2;i:9247;}i:243;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9296;}i:244;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:9296;}i:245;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9296;}i:246;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9296;}i:247;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:" Easier for resource allocation (let the master decide): Fire and forget";}i:2;i:9300;}i:248;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9372;}i:249;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9372;}i:250;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9372;}i:251;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9372;}i:252;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:" Monitor your Driver Program from Master Web UI like other workers";}i:2;i:9376;}i:253;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9442;}i:254;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9442;}i:255;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9442;}i:256;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9442;}i:257;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:" Stop at the end: one job is finished, allocated resources are freed";}i:2;i:9446;}i:258;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9514;}i:259;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9514;}i:260;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:9514;}i:261;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9517;}i:262;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:3:"FAQ";i:1;i:2;i:2;i:9517;}i:2;i:9517;}i:263;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:9517;}i:264;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9534;}i:265;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:57:"Missing the spark yarn jar when run spark shell with yarn";i:1;i:3;i:2;i:9534;}i:2;i:9534;}i:266;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:9534;}i:267;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9534;}i:268;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:278:"When run 'spark on yarn' requires spark jar files available on the cluster and if I don't do anything then every time I run my program it will copy hundreds of jar files from $SPARK_HOME to each node. I see that code's execution pauses for some time before it finishes copying. ";}i:2;i:9603;}i:269;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9881;}i:270;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9881;}i:271;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:"Spark's documentation suggests to set spark.yarn.jars property to avoid this copying. So I set below below property in ";}i:2;i:9883;}i:272;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:10002;}i:273;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"spark-defaults.conf";}i:2;i:10004;}i:274;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:10023;}i:275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" file.";}i:2;i:10025;}i:276;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10031;}i:277;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10031;}i:278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:"The requiring jars are located at ${SPARK_HOME}/jars, in our case, it's /opt/spark/spark-2.2.0/jars. To make it easy to download to the spark workers,";}i:2;i:10033;}i:279;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10183;}i:280;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10183;}i:281;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:"We need to zip them and copy them into hdfs, for example,hdfs:";}i:2;i:10185;}i:282;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:10247;}i:283;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:"hadoop-nn:9000/user/spark/share/lib/spark-archive.zip
Then we need to set the spark.yarn.archive=hdfs:";}i:2;i:10249;}i:284;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:10351;}i:285;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:"hadoop-nn:9000/user/spark/share/lib/spark-archive.zip
in spark-defaults.conf";}i:2;i:10353;}i:286;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10429;}i:287;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10431;}i:288;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:131:"Spark Shell with Yarn - Error: Yarn application has already ended! It might have been killed or unable to launch application master";i:1;i:3;i:2;i:10431;}i:2;i:10431;}i:289;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:10431;}i:290;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10431;}i:291;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:"This happens when you miss configure the spark.yarn.archive or spark.yarn.jars. Follow the above solution, it will be done.";}i:2;i:10574;}i:292;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10697;}i:293;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10698;}i:294;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:10698;}}