
<h1 class="sectionedit1" id="tester_le_code">Tester le code</h1>
<div class="level1">
<!-- EDIT2 PLUGIN_WRAP_START [0-] --><div class="wrap_round wrap_todo plugin_wrap">
<p>
Charger les fixtures de test : <a href="https://github.com/liip/LiipFunctionalTestBundle" class="urlextern" title="https://github.com/liip/LiipFunctionalTestBundle"  rel="nofollow">https://github.com/liip/LiipFunctionalTestBundle</a>
</p>

<p>
Eviter les <em>smoke tests</em>, car c&#039;est mieux un vrai test ! Autant prendre de bonnes habitudes dès le début.
</p>

<p>
Toutes les méthodes <strong>doivent</strong> être testées, en test unitaire ou fonctionnel.
</p>
</div><!-- EDIT3 PLUGIN_WRAP_END [0-] -->
<p>
Comme indiquer dans les bonnes pratiques, il vaut mieux mettre en place des tests le plus tôt possible. Ceci se fait assez simplement une fois <code>phpunit</code> installé.
</p>

<p>
On écrit un fichier de test par contrôleur. 
</p>
<dl class="code">
<dt><a href="/_export/code/informatique/developpement/symfony/tester_le_code?codeblock=0" title="Télécharger un extrait" class="mediafile mf_php">src/AppBundle/Tests/Controller/DefaultControllerTest.php</a></dt>
<dd><pre class="code php"><span class="kw2">&lt;?php</span>
&nbsp;
<span class="kw2">namespace</span> AppBundle\Tests\Controller<span class="sy0">;</span>
&nbsp;
<span class="kw2">use</span> Symfony\Bundle\FrameworkBundle\Test\WebTestCase<span class="sy0">;</span>
&nbsp;
<span class="kw2">class</span> DefaultControllerTest <span class="kw2">extends</span> WebTestCase
<span class="br0">&#123;</span>
    <span class="kw2">public</span> <span class="kw2">function</span> urlProvider<span class="br0">&#40;</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        <span class="kw1">return</span> <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span>
            <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st_h">'/'</span><span class="br0">&#41;</span><span class="sy0">,</span>
        <span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="co4">/**
     * @dataProvider urlProvider
     */</span>
    <span class="kw2">public</span> <span class="kw2">function</span> testPageIsSuccessful<span class="br0">&#40;</span><span class="re0">$url</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        <span class="re0">$client</span> <span class="sy0">=</span> <span class="kw2">self</span><span class="sy0">::</span><span class="me2">createClient</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="re0">$client</span><span class="sy0">-&gt;</span><span class="me1">request</span><span class="br0">&#40;</span><span class="st_h">'GET'</span><span class="sy0">,</span> <span class="re0">$url</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="re0">$this</span><span class="sy0">-&gt;</span><span class="me1">assertTrue</span><span class="br0">&#40;</span><span class="re0">$client</span><span class="sy0">-&gt;</span><span class="me1">getResponse</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">-&gt;</span><span class="me1">isSuccessful</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw2">public</span> <span class="kw2">function</span> testPrivate<span class="br0">&#40;</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        <span class="re0">$client</span> <span class="sy0">=</span> static<span class="sy0">::</span><span class="me2">createClient</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="re0">$crawler</span> <span class="sy0">=</span> <span class="re0">$client</span><span class="sy0">-&gt;</span><span class="me1">request</span><span class="br0">&#40;</span><span class="st_h">'GET'</span><span class="sy0">,</span> <span class="st_h">'/private'</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="re0">$this</span><span class="sy0">-&gt;</span><span class="me1">assertEquals</span><span class="br0">&#40;</span><span class="nu0">302</span><span class="sy0">,</span> <span class="re0">$client</span><span class="sy0">-&gt;</span><span class="me1">getResponse</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">-&gt;</span><span class="me1">getStatusCode</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre>
</dd></dl>

<p>
Une fois le test démarré, toutes les méthodes <code>test*()</code> existantes seront appelées.
</p>
<pre class="code">  $ phpunit -c app/</pre>

</div>
