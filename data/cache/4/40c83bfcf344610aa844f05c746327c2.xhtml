
<h1 class="sectionedit1" id="bonnes_pratiques">Bonnes pratiques</h1>
<div class="level1">

<p>
Cette liste de bonnes pratiques est tirée de <a href="http://symfony.com/doc/current/best_practices/index.html" class="urlextern" title="http://symfony.com/doc/current/best_practices/index.html"  rel="nofollow">la page &quot;best practices&quot; de Symfony</a>.
</p>
<ul>
<li class="level1"><div class="li"> <a href="http://symfony.com/doc/current/best_practices/introduction.html" class="urlextern" title="http://symfony.com/doc/current/best_practices/introduction.html"  rel="nofollow">Introduction</a></div>
<ul>
<li class="level2"><div class="li"> you should not refactor your existing applications to comply with these best practices.</div>
</li>
</ul>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <a href="http://symfony.com/doc/current/best_practices/creating-the-project.html" class="urlextern" title="http://symfony.com/doc/current/best_practices/creating-the-project.html"  rel="nofollow">Creating the project</a></div>
<ul>
<li class="level2"><div class="li"> Create only one bundle called AppBundle for your application logic</div>
</li>
<li class="level2"><div class="li"> There is no need to prefix the AppBundle with your own vendor (e.g. AcmeAppBundle), because this application bundle is never going to be shared.</div>
</li>
<li class="level2"><div class="li"> <code>$ php app/console generate:bundle –namespace=AppBundle –dir=src –format=annotation –no-interaction</code></div>
</li>
<li class="level2"><div class="li"> app/Resources/, stores all the templates and the translation files</div>
</li>
</ul>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <a href="http://symfony.com/doc/current/best_practices/configuration.html" class="urlextern" title="http://symfony.com/doc/current/best_practices/configuration.html"  rel="nofollow">Configuration</a></div>
<ul>
<li class="level2"><div class="li"> Define the infrastructure-related configuration options in the app/config/parameters.yml file.</div>
</li>
<li class="level2"><div class="li"> Define all your application&#039;s parameters in the app/config/parameters.yml.dist file.</div>
</li>
<li class="level2"><div class="li"> Define the application behavior related configuration options in the app/config/config.yml file.</div>
</li>
<li class="level2"><div class="li"> Use constants to define configuration options that rarely change.</div>
</li>
<li class="level2"><div class="li"> Moving Sensitive Options Outside of Symfony Entirely</div>
</li>
</ul>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <a href="http://symfony.com/doc/current/best_practices/business-logic.html" class="urlextern" title="http://symfony.com/doc/current/best_practices/business-logic.html"  rel="nofollow">Business Logic</a></div>
<ul>
<li class="level2"><div class="li"> “Services: Naming and Format”</div>
</li>
</ul>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <a href="http://symfony.com/doc/current/best_practices/controllers.html" class="urlextern" title="http://symfony.com/doc/current/best_practices/controllers.html"  rel="nofollow">Controllers</a></div>
<ul>
<li class="level2"><div class="li"> Symfony follows the philosophy of “thin controllers and fat models”</div>
</li>
<li class="level2"><div class="li"> Use the ParamConverter trick to automatically query for Doctrine|Propel entities when it&#039;s simple and convenient.</div>
</li>
<li class="level2"><div class="li"> Pre and Post Hooks</div>
</li>
</ul>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <a href="http://symfony.com/doc/current/best_practices/templates.html" class="urlextern" title="http://symfony.com/doc/current/best_practices/templates.html"  rel="nofollow">Templates</a></div>
<ul>
<li class="level2"><div class="li"> Store all your application&#039;s templates in app/Resources/views/ directory.</div>
</li>
<li class="level2"><div class="li"> Define your Twig extensions in the AppBundle/Twig/ directory and configure them using the app/config/services.yml file.</div>
</li>
<li class="level2"><div class="li"> ex: a custom md2html Twig filter</div>
</li>
</ul>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <a href="http://symfony.com/doc/current/best_practices/forms.html" class="urlextern" title="http://symfony.com/doc/current/best_practices/forms.html"  rel="nofollow">Forms</a></div>
<ul>
<li class="level2"><div class="li"> Define your forms as PHP classes… EntityType and createForm()</div>
</li>
<li class="level2"><div class="li"> <a href="http://propelorm.org/Propel/cookbook/symfony2/mastering-symfony2-forms-with-propel.html" class="urlextern" title="http://propelorm.org/Propel/cookbook/symfony2/mastering-symfony2-forms-with-propel.html"  rel="nofollow">http://propelorm.org/Propel/cookbook/symfony2/mastering-symfony2-forms-with-propel.html</a></div>
</li>
<li class="level2"><div class="li"> Add buttons in the templates, not in the form classes or the controllers.</div>
</li>
<li class="level2"><div class="li"> Handling Form Submits […] we recommend using $form→isSubmitted() in the if statement for clarity.</div>
</li>
<li class="level2"><div class="li"> (Always redirect after post!)</div>
</li>
</ul>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <a href="http://symfony.com/doc/current/best_practices/i18n.html" class="urlextern" title="http://symfony.com/doc/current/best_practices/i18n.html"  rel="nofollow">I18n</a></div>
<ul>
<li class="level2"><div class="li"> Use the XLIFF format for your translation files.</div>
</li>
<li class="level2"><div class="li"> Always use keys for translations instead of content strings.</div>
</li>
</ul>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <a href="http://symfony.com/doc/current/best_practices/security.html" class="urlextern" title="http://symfony.com/doc/current/best_practices/security.html"  rel="nofollow">Security</a></div>
<ul>
<li class="level2"><div class="li"> Use the bcrypt encoder for encoding your users&#039; passwords.</div>
</li>
<li class="level2"><div class="li"> Whenever possible, use the @Security annotation</div>
</li>
<li class="level2"><div class="li"> If your security logic is complex and can&#039;t be centralized into a method like isAuthor(), you should leverage custom voters.</div>
</li>
<li class="level2"><div class="li"> with Propel <a href="http://propelorm.org/documentation/cookbook/symfony2/the-symfony2-security-component-and-propel.html" class="urlextern" title="http://propelorm.org/documentation/cookbook/symfony2/the-symfony2-security-component-and-propel.html"  rel="nofollow">http://propelorm.org/documentation/cookbook/symfony2/the-symfony2-security-component-and-propel.html</a></div>
</li>
</ul>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <a href="http://symfony.com/doc/current/best_practices/web-assets.html" class="urlextern" title="http://symfony.com/doc/current/best_practices/web-assets.html"  rel="nofollow">Web-assets</a></div>
<ul>
<li class="level2"><div class="li"> Store your assets in the web/ directory.</div>
</li>
<li class="level2"><div class="li"> Use Assetic to compile, combine and minimize web assets</div>
</li>
</ul>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <a href="http://symfony.com/doc/current/best_practices/tests.html" class="urlextern" title="http://symfony.com/doc/current/best_practices/tests.html"  rel="nofollow">Tests</a></div>
<ul>
<li class="level2"><div class="li"> Define a functional test that at least checks if your application pages are successfully loading.</div>
</li>
</ul>
</li>
</ul>

</div>
