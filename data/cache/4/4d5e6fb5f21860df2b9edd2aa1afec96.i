a:284:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:49:"ZooKeeper 01: An introduction to Apache ZooKeeper";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:"If you don't know what is a distributed system. Please go to this lesson ";}i:2;i:66;}i:5;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:65:"employes:pengfei.liu:data_science:zookeeper:distributed_sys_intro";i:1;s:52:"What a distributed system is and its characteristics";}i:2;i:139;}i:6;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" first.";}i:2;i:261;}i:7;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:268;}i:8;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:270;}i:9;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"What is ZooKeeper";i:1;i:2;i:2;i:270;}i:2;i:270;}i:10;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:270;}i:11;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:270;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:154:"ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.";}i:2;i:301;}i:13;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:455;}i:14;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:455;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:149:"ZooKeeper is, in itself, a replicated and distributed data storage application, with the intention to be run as a service, similar to the way we run ";}i:2;i:457;}i:16;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"DNS";}i:2;i:606;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:" or any other centralized service. ";}i:2;i:609;}i:18;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:644;}i:19;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:648;}i:20;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Simple coordination";i:1;i:3;i:2;i:648;}i:2;i:648;}i:21;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:648;}i:22;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:648;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:"While working on ZooKeeper, all distributed processes can coordinate with each other. ";}i:2;i:679;}i:24;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:765;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:232:"This coordination is possible through a shared hierarchical namespace. However, it is organized as same as the standard file system. Here the namespaces which consist of data registers, what we call as znodes, in ZooKeeper parlance.";}i:2;i:767;}i:26;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:999;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:" Though, these are as same as files and directories. In addition, ";}i:2;i:1001;}i:28;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1067;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"ZooKeeper data keeps in-memory";}i:2;i:1069;}i:30;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1099;}i:31;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:", due to that it achieves high throughput as well as low latency numbers.";}i:2;i:1101;}i:32;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1174;}i:33;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1176;}i:34;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:37:"Data replication for fault tolenrance";i:1;i:3;i:2;i:1176;}i:2;i:1176;}i:35;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1176;}i:36;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1176;}i:37;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:141:"Apache ZooKeeper itself is intended to be replicated over a set of hosts called an ensemble, as same as distributed processes it coordinates.";}i:2;i:1225;}i:38;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1366;}i:39;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1366;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"ZooKeeper特别适合于";}i:2;i:1368;}i:41;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1392;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"以读为主要负荷的场合";}i:2;i:1394;}i:43;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1424;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:"。ZooKeeper可以运行在数千台机器上，如果大部分操作为读，例如读写比例为10:1，ZooKeeper的效率会很高";}i:2;i:1426;}i:45;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1560;}i:46;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1560;}i:47;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"Architecture of Zookeeper";i:1;i:2;i:2;i:1560;}i:2;i:1560;}i:48;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1560;}i:49;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1560;}i:50;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:64:":employes:pengfei.liu:data_science:zookeeper:zookeeper_archi.png";i:1;s:0:"";i:2;N;i:3;s:3:"600";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:1599;}i:51;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1672;}i:52;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1672;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:128:"From the preceding diagram, you will see the replicated set of servers on which the ZooKeeper service is run. This is called an ";}i:2;i:1674;}i:54;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1802;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"ensemble";}i:2;i:1804;}i:56;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1812;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:". Clients can connect to a ZooKeeper service by connecting to any member of the ensemble.
";}i:2;i:1814;}i:58;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1904;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:202:"You can send and receive requests and responses as well as event notifications between clients and the service, which are all done by maintaining a TCP connection and by periodically sending heartbeats.";}i:2;i:1906;}i:60;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2108;}i:61;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2110;}i:62;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2110;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:"The members of the ensemble are aware of each other's state. By this, I mean that the ";}i:2;i:2112;}i:64;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2198;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"current in-memory state";}i:2;i:2200;}i:66;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2223;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:2225;}i:68;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2227;}i:69;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"transaction logs";}i:2;i:2229;}i:70;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2245;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:", and the ";}i:2;i:2247;}i:72;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2257;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"point-in-time copies of the state of the service";}i:2;i:2259;}i:74;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2307;}i:75;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:566:" are stored in a durable manner in the local data store by the individual hosts that form the ensemble. It is important to remember that ZooKeeper is a highly available service, so as long as a majority of the servers are available, the service will always be available. (通常Zookeeper由2n+1台servers组成，每个server都知道彼此的存在。每个server都维护的内存状态镜像以及持久化存储的事务日志和快照。为了保证Leader选举能过得到多数的支持，所以ZooKeeper集群的数量一般为奇数。对于2n+1台server，";}i:2;i:2309;}i:76;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2875;}i:77;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"只要有n+1台（大多数）server可用";}i:2;i:2877;}i:78;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2919;}i:79;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"，整个系统保持可用。所以Zookeeper集群至少需要3台servers服务器！)";}i:2;i:2921;}i:80;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3008;}i:81;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3008;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"With this, ZooKeeper maintains ";}i:2;i:3010;}i:83;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3041;}i:84;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"a strict ordering of its transactions";}i:2;i:3043;}i:85;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3080;}i:86;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:373:" (all requests which modify or insert data have their order in the cluster), which enables the implementation of advanced distributed synchronization primitives that are simple and reliable. (ZooKeeper给每次更新附加一个数字标签，表明ZooKeeper中的事务顺序，后续操作可以利用这个顺序来完成更高层次的抽象功能，例如同步原语)";}i:2;i:3082;}i:87;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3455;}i:88;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3458;}i:89;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"集群中的角色";i:1;i:3;i:2;i:3458;}i:2;i:3458;}i:90;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3458;}i:91;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3458;}i:92;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:"在ZooKeeper集群当中，集群中的服务器角色有两种Leader和Learner，Learner角色又分为Observer和Follower，具体功能如下：";}i:2;i:3488;}i:93;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3636;}i:94;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:5;i:2;i:3637;}i:2;i:3636;}i:95;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:3636;}i:96;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3636;}i:97;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:3636;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" 角色	";}i:2;i:3638;}i:99;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:3646;}i:100;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3646;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" 说明 ";}i:2;i:3647;}i:102;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:3655;}i:103;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3656;}i:104;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:3656;}i:105;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3656;}i:106;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:3656;}i:107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"Leader(领导者)	";}i:2;i:3658;}i:108;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3676;}i:109;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3676;}i:110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" 为客户端提供读和写的服务，负责投票的发起和决议，更新系统状态。";}i:2;i:3677;}i:111;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3771;}i:112;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3772;}i:113;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3772;}i:114;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3772;}i:115;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Follower（跟随者）";}i:2;i:3774;}i:116;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3797;}i:117;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3797;}i:118;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:" 为客户端提供读服务，如果是写服务则转发给Leader。在选举过程中参与投票。";}i:2;i:3798;}i:119;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3901;}i:120;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3902;}i:121;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:3902;}i:122;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3902;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Observe（观察者）";}i:2;i:3904;}i:124;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3926;}i:125;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:3926;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:258:"为客户端提供读服务器，如果是写服务则转发给Leader。不参与选举过程中的投票，也不参与“过半写成功”策略。在不影响写性能的情况下提升集群的读性能。此角色于zookeeper3.3系列新增的角色。";}i:2;i:3927;}i:127;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4185;}i:128;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:4186;}i:129;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:4186;}i:130;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4186;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"client（客户端）";}i:2;i:4188;}i:132;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4209;}i:133;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4209;}i:134;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:" 连接zookeeper服务器的user，请求的发起者。独立于zookeeper服务器集群之外的角色。";}i:2;i:4210;}i:135;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4317;}i:136;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:4318;}i:137;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:4318;}i:2;i:4318;}i:138;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4320;}i:139;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"ZooKeeper key compenents";i:1;i:3;i:2;i:4320;}i:2;i:4320;}i:140;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4320;}i:141;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4320;}i:142;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:69:":employes:pengfei.liu:data_science:zookeeper:zookeeper_components.png";i:1;s:0:"";i:2;N;i:3;s:3:"600";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:4356;}i:143;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4434;}i:144;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4434;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:389:"ZooKeeper的组件图中给出了ZooKeeper服务的高层次的组件。除了请求处理器（request processor）外，构成ZooKeeper服务的每个服务器都有一个备份。复制的数据库（Replicateddatabase）是一个内存数据库，包含整个数据树。为了可恢复，更新会被log到磁盘，并且在更新这个内存数据库之前，先序列化到磁盘。";}i:2;i:4436;}i:146;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4825;}i:147;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4825;}i:148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:249:"每个ZooKeeper都为客户端提供服务。客户端只连接到一个服务器，并提交请求。读请求直接由本地的复制数据库提供数据。对服务状态进行修改的请求、写请求通过一个约定的协议进行通讯。";}i:2;i:4827;}i:149;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5076;}i:150;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5076;}i:151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:352:"作为这个协议的一部分，所有的写请求都被传送到一个叫“首领(leader)”的服务器，而其他的服务器，叫做“(随从)followers”，follower从leader接收信息修改的提议，并同意进行。当leader发生故障时，协议的信息层（messaginglayer）关注leader的替换，并同步到所有的follower。";}i:2;i:5078;}i:152;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5430;}i:153;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5430;}i:154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:270:"ZooKeeper采用一个自定义的信息原子操作协议，由于信息层的操作是原子性的，ZooKeeper能保证本地的复制数据库不会产生不一致。当leader接收到一个写请求，它计算出写之后系统的状态，把它变成一个事务。";}i:2;i:5432;}i:155;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5702;}i:156;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5704;}i:157;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:42:"Zookeeper的读写机制和保证及特点";i:1;i:3;i:2;i:5704;}i:2;i:5704;}i:158;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5704;}i:159;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5758;}i:160;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"ZooKeeper的读写机制";i:1;i:4;i:2;i:5758;}i:2;i:5758;}i:161;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:5758;}i:162;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:5791;}i:163;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5791;}i:164;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5791;}i:165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" Zookeeper是一个由多个server组成的集群, 一个leader，多个follower";}i:2;i:5795;}i:166;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5875;}i:167;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5875;}i:168;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5875;}i:169;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5875;}i:170;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" 每个server保存一份数据副本";}i:2;i:5879;}i:171;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5916;}i:172;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5916;}i:173;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5916;}i:174;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5916;}i:175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" 全局数据一致";}i:2;i:5920;}i:176;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5939;}i:177;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5939;}i:178;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5939;}i:179;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5939;}i:180;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" 分布式读写";}i:2;i:5943;}i:181;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5959;}i:182;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5959;}i:183;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5959;}i:184;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5959;}i:185;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" 更新请求转发，由leader实施";}i:2;i:5963;}i:186;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6000;}i:187;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6000;}i:188;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:6000;}i:189;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6002;}i:190;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"ZooKeeper的保证";i:1;i:4;i:2;i:6002;}i:2;i:6002;}i:191;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:6002;}i:192;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6002;}i:193;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:153:"ZooKeeper运行非常快而且简单。虽然它的目标是构建更加复杂服务（例如同步）的基础，但它提供了一些保证，如下：";}i:2;i:6030;}i:194;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6184;}i:195;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:6184;}i:196;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6184;}i:197;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6184;}i:198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" 顺序一致性：来自于客户端的更新，根据发送的先后被顺序实施。";}i:2;i:6188;}i:199;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6276;}i:200;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6276;}i:201;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6276;}i:202;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6276;}i:203;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:199:" 唯一的系统映像：尽管客户端连接到不同的服务器，但它们看到的一个唯一（一致性）的系统服务，client无论连接到哪个server，数据视图都是一致的。";}i:2;i:6280;}i:204;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6479;}i:205;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6479;}i:206;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6479;}i:207;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6479;}i:208;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:187:" 可靠性：一旦实施了一个更新，就会一直保持那种状态，直到客户端再次更新它，同时数据更新原子性，一次数据更新要么成功，要么失败。";}i:2;i:6483;}i:209;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6670;}i:210;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6670;}i:211;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6670;}i:212;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6670;}i:213;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" 及时性：在一个确定的时间内，客户端看到的系统状态是最新的。";}i:2;i:6674;}i:214;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6762;}i:215;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6762;}i:216;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:6762;}i:217;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6764;}i:218;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"ZooKeeper特点";i:1;i:4;i:2;i:6764;}i:2;i:6764;}i:219;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:6764;}i:220;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:6788;}i:221;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6788;}i:222;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6788;}i:223;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:6792;}i:224;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6793;}i:225;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"最终一致性";}i:2;i:6795;}i:226;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:6810;}i:227;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:"：client不论连接到哪个Server，展示给它都是同一个视图，这是zookeeper最重要的性能。";}i:2;i:6812;}i:228;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6923;}i:229;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6923;}i:230;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6923;}i:231;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6923;}i:232;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:6927;}i:233;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6928;}i:234;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"可靠性";}i:2;i:6930;}i:235;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:6939;}i:236;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:127:"：具有简单、健壮、良好的性能，如果消息m被一台服务器接受，那么它将被所有的服务器接受。";}i:2;i:6941;}i:237;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7068;}i:238;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7068;}i:239;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7068;}i:240;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7068;}i:241;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:7072;}i:242;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7073;}i:243;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"实时性";}i:2;i:7075;}i:244;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7084;}i:245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:307:"：Zookeeper保证客户端将在一个时间间隔范围内获得服务器的更新信息，或者服务器失效的信息。 但由于网络延时等原因，Zookeeper不能保证两个客户端能同时得到刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口！！";}i:2;i:7086;}i:246;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7393;}i:247;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7393;}i:248;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7393;}i:249;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7393;}i:250;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:7397;}i:251;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7398;}i:252;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"等待无关(wait-free)";}i:2;i:7400;}i:253;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7423;}i:254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:"：慢的或者失效的client，不得干预快速的client的请求，使得每个client都能有效的等待。";}i:2;i:7425;}i:255;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7539;}i:256;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7539;}i:257;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7539;}i:258;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7539;}i:259;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:7543;}i:260;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7544;}i:261;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"原子性";}i:2;i:7546;}i:262;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7555;}i:263;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:"：更新只能成功或者失败，没有中间状态。";}i:2;i:7557;}i:264;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7614;}i:265;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7614;}i:266;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7614;}i:267;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7614;}i:268;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:7618;}i:269;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7619;}i:270;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"顺序性";}i:2;i:7621;}i:271;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7630;}i:272;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:271:"：包括全局有序和偏序两种. 全局有序：是指如果在一台服务器上消息a在消息b前发布，则在所有Server上消息a都将在消息b前被发布；偏序：是指如果一个消息b在消息a后被同一个发送者发布，a必将排在b前面";}i:2;i:7632;}i:273;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7903;}i:274;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7903;}i:275;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:7903;}i:276;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7903;}i:277;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7905;}i:278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:"If we put zookeeper in CAP theorem, then Zk is CP(consistency, partition tolerance), but not A(availability).";}i:2;i:7907;}i:279;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8016;}i:280;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:8018;}i:281;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8018;}i:282;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8018;}i:283;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:8018;}}