
<p>
Lors de la réunion du 26/06/2010, deux usages sont identifiés:
</p>
<ol>
<li class="level1"><div class="li"> Développement de fonctions ou d&#039;outils réutilisables dans tous les projets (p.ex. codes sous Matlab et R). Ces codes peuvent faire parti d&#039;un pot commun.</div>
<ul>
<li class="level2"><div class="li"> <span style='color:red; '><strong>[TLC]</strong> +1, en fait +1000 ! Je ne savais même pas qu&#039;on pouvait travailler sans modules, <em>librairies</em> et code partagé !?</span></div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Développement de scripts d&#039;analyses qui chaînent des fonctions ou des outils (p.ex un flux de génomique). Ces codes sont spécifiques à chaque projet. </div>
</li>
</ol>
<ul>
<li class="level1"><div class="li"> <strong>Proposition no 1</strong><br/>
Le code est documenté en début de script avec les informations suivantes : nom de l&#039;auteur, date de création, a quoi sert le code, comment on l&#039;utilise.</div>
<ul>
<li class="level2"><div class="li"> <span style='color:red; '><strong>[TLC]</strong> Un des bénéfices annexes du <em>versionning</em> : le nom de(s) (l&#039;)auteur(s) et les dates de création/modification sont déjà inclus.</span></div>
</li>
<li class="level2"><div class="li"> <span style='color:red; '><strong>[TLC]</strong> Pour la documentation, je propose d&#039;utiliser un format standard comme celui de <a href="https://en.wikipedia.org/wiki/Doxygen#Example_code" class="urlextern" title="https://en.wikipedia.org/wiki/Doxygen#Example_code"  rel="nofollow">Doxygen</a>.</span></div>
</li>
<li class="level2"><div class="li"> <span style='color:red; '><strong>[TLC]</strong> Pour le manuel d&#039;utilisation, merci de fournir un <code>-h</code> pour chaque script (encore mieux, un <code>man</code>)</span> <img src="/lib/images/smileys/icon_biggrin.gif" class="icon" alt=":-D" /></div>
</li>
<li class="level2"><div class="li"> <span style='color:blue; '><strong>[DAO]</strong> Peut-être définir ce qu&#039;on entend par <em>manuel</em> ou <em>doc</em> non ? Pour moi, par manuel, j&#039;entends en fait <em class="u">doc orientée métier</em> (i.e. utilisable par ceux qui ne codent pas forcément). Dans ce cas, c&#039;est en effet une très bonne idée mais le manuel devra être au niveau des “flux d&#039;analyses” seulement (pour ne pas être trop redondant avec la doc Doxygen). Je vois plutôt un <code>.pdf</code> qui illustre un simple cas d&#039;utilisation de l&#039;outil (par exemple des data + analyses + graphes) ou même un article qu&#039;on aurait publié sur le “workflow” ou par exemple un manuel <code>.pdf</code> de ce type <a href="http://cran.r-project.org/web/packages/pls/index.html" class="urlextern" title="http://cran.r-project.org/web/packages/pls/index.html"  rel="nofollow">package PLS de R</a>. Le <code>-h</code> ou <code>man</code> dans une console me semble trop <em>linux-like</em>, ce que je ne trop pas très flexible surtout pour des outils scientifiques sui peuvent avoir du contenu plus riche.</span></div>
<ul>
<li class="level3"><div class="li"> <span style='color:red; '><strong>[TLC]</strong> Je le vois du point de vue (actuel) du PT6 et dans l&#039;idée les job seront principalement soumis sur <a href="/bioinformatique/univage" class="wikilink1" title="bioinformatique:univage">la ferme</a>, et donc en ligne de commande. Et quand on est en ligne de commande, le <code>-h</code> devient vite notre meilleur ami ! <img src="/lib/images/smileys/icon_smile.gif" class="icon" alt=":-)" /></span></div>
</li>
</ul>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <strong>Proposition no 2</strong><br/>
Les fonctions et les outils sont versionnées depuis l&#039;espace de travail (<a href="/informatique/outils/bazaar" class="wikilink1" title="informatique:outils:bazaar">bazaar est en test</a>). Le code validée est copié dans l&#039;espace projet. A priori, même les flux d&#039;analyses codés dans les scripts sont versionnés.</div>
<ul>
<li class="level2"><div class="li"> <span style='color:red; '><strong>[TLC]</strong> On développe en local (PC perso) ou sur un serveur de dev, puis on l&#039;envoie sur le serveur de prod avec un “simple” <code>bzr push</code>.</span></div>
</li>
<li class="level2"><div class="li"> <span style='color:red; '><strong>[TLC]</strong> A priori on pourrait faire un truc plus sympa (et plus pédagogique) avec du <em>code review</em> (je suis en train de tester <a href="http://reviewboard.org" class="urlextern" title="http://reviewboard.org"  rel="nofollow">ReviewBoard</a>)</span></div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <strong>Proposition no 3</strong><br/>
A la fin d&#039;un projet, il faudra copier l&#039;ensemble des versions dans le projet.</div>
<ul>
<li class="level2"><div class="li"> <span style='color:red; '><strong>[TLC]</strong> Si il est versionné avec un DVCS (donc pas SVN) il contient déjà toutes les versions !</span></div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <strong>Proposition no 4</strong><br/>
Il est nécessaire de suivre la version des binaires (p.ex. la version de R, de Python, etc.). Ceci peut être fait avec <a href="http://modules.sourceforge.net/" class="urlextern" title="http://modules.sourceforge.net/"  rel="nofollow">Environment Modules</a>.</div>
<ul>
<li class="level2"><div class="li"> <span style='color:red; '><strong>[TLC]</strong> On ne peut pas garantir avec <code>modules</code> que la version sera disponible dans 5 ans.</span></div>
</li>
</ul>
</li>
</ul>

<p>
Points à étudier :
</p>
<ul>
<li class="level1"><div class="li"> Faut-il utiliser Git ou Bazaar ?</div>
<ul>
<li class="level2"><div class="li"> <span style='color:red; '><strong>[TLC]</strong> Git est peut-être plus “flexible” mais expose du même coup détails d&#039;implémentation, faisant ainsi monter la difficulté d&#039;apprentissage et les chances d&#039;erreurs. Malgré ça il n&#039;apporte aucune fonctionnalité supplémentaire qui pourrait nous intéresser.</span></div>
</li>
<li class="level2"><div class="li"> <span style='color:blue; '><strong>[DAO]</strong> Je pense qu&#039;ici le choix doit surtout venir de notre capacité à nous autoformer sur l&#039;outil. Je ne sais pas si on a va atteindre un niveau de complexité des gros dev de soft qui peuvent “nécessiter” Git (codage en concurrence + merges complexes de branches), et encore Bazaar devrait se bien se débrouiller. On peut donc commencer simple. Si Tanguy connait Bazaar et peut former rapidement dessus, c&#039;est mieux peut-être. L&#039;important est de surtout bien connaitre l&#039;outil qu&#039;on va utiliser (pour effectivement <em>éviter les chances d&#039;erreurs</em>).</span></div>
<ul>
<li class="level3"><div class="li"> <span style='color:red; '><strong>[TLC]</strong> Je ne voudrais pas <em>troller</em> (s&#039;pa mon genre), mais Bazaar fait tout ce que Git fait ! … Le temps que quelqu&#039;un trouve un <em>use case</em> pour nous qui nécessite Git je serai à la retraite de toute façon ! <img src="/lib/images/smileys/icon_wink.gif" class="icon" alt=";-)" /></span></div>
</li>
</ul>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Faut-il utiliser Env. Modules ou autre choses ?</div>
<ul>
<li class="level2"><div class="li"> <span style='color:red; '><strong>[TLC]</strong> Je n&#039;étais pas convaincu par <code>modules</code> au début… mais maintenant je vois vraiment l&#039;intérêt. En plus c&#039;est simple à utiliser.</span></div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Faut-il un repository général à BIOASTER pour Git/Bzr ?</div>
<ul>
<li class="level2"><div class="li"> <span style='color:red; '><strong>[TLC]</strong> Je ne suis pas sûr d&#039;avoir compris… un SEUL… ou un commun + d&#039;autres par projet ? Pour moi la première solution est à éviter absolument !!</span></div>
</li>
<li class="level2"><div class="li"> * <span style='color:green; '><strong>[NS]</strong> Dit autrement, comment fait-on concrètement le lien entre la boite à outils commune, la boîte à outils du plateau et le projet?</span></div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> Faut-il un suivie de logiciel générale à BIOASTER avec de fait un système d&#039;installation et de mise à jour général ?</div>
<ul>
<li class="level2"><div class="li"> <span style='color:red; '><strong>[TLC]</strong> Euh… <em>use case?</em></span></div>
</li>
<li class="level2"><div class="li"> <span style='color:green; '><strong>[NS]</strong> Dit autrement, est-ce que chaque plateau gère ses propres logiciels à sa façon (avec le risque que personnes n&#039;utilise <code>Modules</code>) ou bien le PT6 propose un set de base de logiciel sur toutes les machines (sous SL6)</span></div>
</li>
</ul>
</li>
</ul>

<p>
<em class="u"><strong>Edit du 17 juillet 2014 :</strong></em> Tanguy va travaillé avec Audrey et François pour voir comment implémenter Bzr dans le PT2.
</p>
