
<h1 class="sectionedit1" id="docker_basic_concepts">1. Docker basic concepts</h1>
<div class="level1">

<p>
Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers. The use of Linux containers to deploy applications is called containerization. Containers are not new, but their use for easily deploying applications is.
</p>

<p>
Containerization is increasingly popular because containers are:
</p>
<ul>
<li class="level1"><div class="li"> Flexible: Even the most complex applications can be containerized.</div>
</li>
<li class="level1"><div class="li"> Lightweight: Containers leverage and share the host kernel.</div>
</li>
<li class="level1"><div class="li"> Interchangeable: You can deploy updates and upgrades on-the-fly.</div>
</li>
<li class="level1"><div class="li"> Portable: You can build locally, deploy to the cloud, and run anywhere.</div>
</li>
<li class="level1"><div class="li"> Scalable: You can increase and automatically distribute container replicas.</div>
</li>
<li class="level1"><div class="li"> Stackable: You can stack services vertically and on-the-fly.</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1. Docker basic concepts&quot;,&quot;hid&quot;:&quot;docker_basic_concepts&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:1,&quot;range&quot;:&quot;1-796&quot;} -->
<h2 class="sectionedit2" id="docker_file_images_and_containers">1.1 Docker file, images and containers</h2>
<div class="level2">
<ol>
<li class="level1"><div class="li"> <strong>A Docker file</strong> is a text file that Docker reads in from top to bottom. It contains a bunch of instructions that inform Docker HOW the Docker image should get built.</div>
</li>
<li class="level1"><div class="li"> <strong>A Docker image</strong> gets built by running a Docker command (which uses the Dockerfile). An image is an executable package that includes everything needed to run an application–the code, a runtime, libraries, environment variables, and configuration files.</div>
</li>
<li class="level1"><div class="li"> <strong>A Docker container</strong> is a runtime instance of an image–what the image becomes in memory when executed (that is, an image with a state, or a user process). You can see a list of your running containers with the command, docker ps, just as you would in Linux.</div>
</li>
</ol>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1.1 Docker file, images and containers&quot;,&quot;hid&quot;:&quot;docker_file_images_and_containers&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:2,&quot;range&quot;:&quot;797-1546&quot;} -->
<h2 class="sectionedit3" id="container_host_and_the_container_os">1.2 Container Host and the Container OS</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> <strong>Container Host</strong>: Also called the <strong>Host <abbr title="Operating System">OS</abbr></strong>. The Host <abbr title="Operating System">OS</abbr> is the operating system on which the Docker client and Docker daemon run. <strong>In the case of Linux and non-Hyper-V containers</strong>, the Host <abbr title="Operating System">OS</abbr> shares its kernel with running Docker containers. <strong>For Hyper-V each container has its own Hyper-V kernel</strong>.</div>
</li>
<li class="level1"><div class="li"> <strong>Container <abbr title="Operating System">OS</abbr></strong>: Also called the <strong>Base <abbr title="Operating System">OS</abbr></strong>. The base <abbr title="Operating System">OS</abbr> refers to a docker image that contains an operating system such as Ubuntu, CentOS, or windowsservercore. Typically, you would build your own image on top of a Base <abbr title="Operating System">OS</abbr> image so that you can take utilize parts of the <abbr title="Operating System">OS</abbr>. <strong>Note that containers run on windows require a Base <abbr title="Operating System">OS</abbr>, while Linux containers do not.</strong></div>
</li>
<li class="level1"><div class="li"> <strong>Operating System Kernel</strong>: The Kernel manages lower level functions such as memory management, file system, network and process scheduling.</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1.2 Container Host and the Container OS&quot;,&quot;hid&quot;:&quot;container_host_and_the_container_os&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:3,&quot;range&quot;:&quot;1547-2431&quot;} -->
<h3 class="sectionedit4" id="linux_container_example">1.2.1 Linux Container example</h3>
<div class="level3">

<p>
<a href="/lib/exe/detail.php?id=employes%3Apengfei.liu%3Aadmin_system%3Acontainer%3Adocker%3Abasic_concept&amp;media=employes:pengfei.liu:admin_system:container:docker:docker_linux_container.png" class="media" title="employes:pengfei.liu:admin_system:container:docker:docker_linux_container.png"><img src="/lib/exe/fetch.php?w=400&amp;tok=75d8dd&amp;media=employes:pengfei.liu:admin_system:container:docker:docker_linux_container.png" class="media" alt="" width="400" /></a>
</p>

<p>
In the above example
</p>
<ul>
<li class="level1"><div class="li"> The Host <abbr title="Operating System">OS</abbr> is Ubuntu.</div>
</li>
<li class="level1"><div class="li"> The Docker Client and the Docker Daemon (together called the Docker Engine) are running on the Ubuntu.</div>
</li>
<li class="level1"><div class="li"> Each container shares the Host <abbr title="Operating System">OS</abbr> kernel.</div>
</li>
<li class="level1"><div class="li"> CentOS and BusyBox are Linux Base <abbr title="Operating System">OS</abbr> images.</div>
</li>
<li class="level1"><div class="li"> The “No OS” container demonstrates that you do not NEED a base <abbr title="Operating System">OS</abbr> to run a container in Linux. You can create a Docker file that has a base image of scratch and then runs a binary that uses the kernel directly.</div>
</li>
<li class="level1"><div class="li"> Check out this article(<a href="https://brianchristner.io/docker-image-base-os-size-comparison/" class="urlextern" title="https://brianchristner.io/docker-image-base-os-size-comparison/" rel="ugc nofollow">https://brianchristner.io/docker-image-base-os-size-comparison/</a>) for a comparison of Base <abbr title="Operating System">OS</abbr> sizes.</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1.2.1 Linux Container example&quot;,&quot;hid&quot;:&quot;linux_container_example&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:4,&quot;range&quot;:&quot;2432-3160&quot;} -->
<h3 class="sectionedit5" id="windows_container_without_hyper-v_example">1.2.2 Windows container without Hyper-V example</h3>
<div class="level3">

<p>
<a href="/lib/exe/detail.php?id=employes%3Apengfei.liu%3Aadmin_system%3Acontainer%3Adocker%3Abasic_concept&amp;media=employes:pengfei.liu:admin_system:container:docker:docker_windows_container_no_hyper_v.png" class="media" title="employes:pengfei.liu:admin_system:container:docker:docker_windows_container_no_hyper_v.png"><img src="/lib/exe/fetch.php?w=400&amp;tok=1a1b4d&amp;media=employes:pengfei.liu:admin_system:container:docker:docker_windows_container_no_hyper_v.png" class="media" alt="" width="400" /></a>
</p>

<p>
In the above example
</p>
<ul>
<li class="level1"><div class="li"> The Host <abbr title="Operating System">OS</abbr> is Windows 10 or Windows Server.</div>
</li>
<li class="level1"><div class="li"> Each container shares the Host <abbr title="Operating System">OS</abbr> kernel.</div>
</li>
<li class="level1"><div class="li"> All windows containers require a Base <abbr title="Operating System">OS</abbr> of either nanoserver or windowsservercore.</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1.2.2 Windows container without Hyper-V example&quot;,&quot;hid&quot;:&quot;windows_container_without_hyper-v_example&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:5,&quot;range&quot;:&quot;3161-3525&quot;} -->
<h3 class="sectionedit6" id="windows_container_with_hyper-v_example">1.2.3 Windows container with Hyper-V example</h3>
<div class="level3">

<p>
<a href="/lib/exe/detail.php?id=employes%3Apengfei.liu%3Aadmin_system%3Acontainer%3Adocker%3Abasic_concept&amp;media=employes:pengfei.liu:admin_system:container:docker:docker_windows_container_with_hyper_v.png" class="media" title="employes:pengfei.liu:admin_system:container:docker:docker_windows_container_with_hyper_v.png"><img src="/lib/exe/fetch.php?w=400&amp;tok=39d0ad&amp;media=employes:pengfei.liu:admin_system:container:docker:docker_windows_container_with_hyper_v.png" class="media" alt="" width="400" /></a>
</p>

<p>
In the above example
</p>
<ul>
<li class="level1"><div class="li"> The Host <abbr title="Operating System">OS</abbr> is Windows 10 or Windows Server.</div>
</li>
<li class="level1"><div class="li"> Each container is hosted in its own light weight Hyper-V VM.</div>
</li>
<li class="level1"><div class="li"> Each container uses the kernel inside the Hyper-V VM which provides an extra layer of separation between containers.</div>
</li>
<li class="level1"><div class="li"> All windows containers require a Base <abbr title="Operating System">OS</abbr> of either nanoserver or windowsservercore.</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1.2.3 Windows container with Hyper-V example&quot;,&quot;hid&quot;:&quot;windows_container_with_hyper-v_example&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:6,&quot;range&quot;:&quot;3526-4030&quot;} -->
<h2 class="sectionedit7" id="docker_advantage">1.3 Docker advantage</h2>
<div class="level2">

<p>
Containerization makes CI/CD seamless. For example:
</p>
<ul>
<li class="level1"><div class="li"> applications have no system dependencies</div>
</li>
<li class="level1"><div class="li"> updates can be pushed to any part of a distributed application</div>
</li>
<li class="level1"><div class="li"> resource density can be optimized.</div>
</li>
</ul>

<p>
With Docker, scaling your application is a matter of spinning up new executables, not running heavy VM hosts.
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1.3 Docker advantage&quot;,&quot;hid&quot;:&quot;docker_advantage&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:7,&quot;range&quot;:&quot;4031-4380&quot;} -->
<h1 class="sectionedit8" id="containers_vs_virtual_machines">2. Containers Vs virtual machines</h1>
<div class="level1">

<p>
A container runs natively on Linux and shares the kernel of the host machine with other containers. It runs a discrete process, taking no more memory than any other executable, making it lightweight.
</p>

<p>
By contrast, a virtual machine (VM) runs a full-blown “guest” operating system with virtual access to host resources through a hypervisor. In general, VMs provide an environment with more resources than most applications need.
</p>

<p>
<a href="/lib/exe/detail.php?id=employes%3Apengfei.liu%3Aadmin_system%3Acontainer%3Adocker%3Abasic_concept&amp;media=employes:pengfei.liu:admin_system:container:docker:container2.png" class="media" title="employes:pengfei.liu:admin_system:container:docker:container2.png"><img src="/lib/exe/fetch.php?w=400&amp;tok=1938fd&amp;media=employes:pengfei.liu:admin_system:container:docker:container2.png" class="media" alt="" width="400" /></a>
</p>

<p>
<a href="/lib/exe/detail.php?id=employes%3Apengfei.liu%3Aadmin_system%3Acontainer%3Adocker%3Abasic_concept&amp;media=employes:pengfei.liu:admin_system:container:docker:vm2.png" class="media" title="employes:pengfei.liu:admin_system:container:docker:vm2.png"><img src="/lib/exe/fetch.php?w=400&amp;tok=5da5a2&amp;media=employes:pengfei.liu:admin_system:container:docker:vm2.png" class="media" alt="" width="400" /></a>
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;2. Containers Vs virtual machines&quot;,&quot;hid&quot;:&quot;containers_vs_virtual_machines&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:8,&quot;range&quot;:&quot;4381-&quot;} -->