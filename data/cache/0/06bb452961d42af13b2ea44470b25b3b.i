a:514:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:30:"Stream Processing Introduction";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:316:"According to a recent report by IBM Marketing cloud, “90 percent of the data in the world today has been created in the last two years alone, creating 2.5 quintillion bytes of data every day — and with new devices, sensors and technologies emerging, the data growth rate will likely accelerate even more”. ";}i:2;i:47;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:363;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:363;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:383:"Technically this means our Big Data Processing world is going to be more complex and more challenging. And a lot of use cases (e.g. mobile app ads, fraud detection, cab booking, patient monitoring,etc) need data processing in real-time, as and when data arrives, to make quick actionable decisions. This is why Distributed Stream Processing has become very popular in Big Data world.";}i:2;i:365;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:748;}i:9;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:750;}i:10;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:35:"What is Streaming/Stream Processing";i:1;i:2;i:2;i:750;}i:2;i:750;}i:11;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:750;}i:12;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:750;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:124:"The most elegant definition I found is : a type of data processing engine that is designed with infinite data sets in mind. ";}i:2;i:799;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:923;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:923;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:368:"Unlike Batch processing where data is bounded with a start and an end in a job and the job finishes after processing that finite data, Streaming is meant for processing unbounded data coming in realtime continuously for days, months, years and forever. As such, were always meant for up and running, a streaming application is hard to implement and harder to maintain.";}i:2;i:925;}i:17;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1293;}i:18;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1296;}i:19;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"Important Aspects of Stream Processing";i:1;i:2;i:2;i:1296;}i:2;i:1296;}i:20;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1296;}i:21;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1296;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:194:"There are some important characteristics and terms associated with Stream processing which we should be aware of in order to understand the strengths and limitations of any Streaming framework :";}i:2;i:1348;}i:23;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1543;}i:24;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1543;}i:25;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1543;}i:26;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1543;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1547;}i:28;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1548;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"Delivery Guarantees ";}i:2;i:1550;}i:30;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1570;}i:31;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:484:": It means what is the guarantee that no matter what, a particular incoming record in a streaming engine will be processed. It can be either At least-once (will be processed at least one time even in case of failures), Almost-once (may not be processed in case of failures) or Exactly-once (will be processed one and exactly one time even in case of failures). Obviously, Exactly-once is desirable but is hard to achieve in distributed systems and comes in tradeoffs with performance.";}i:2;i:1572;}i:32;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2056;}i:33;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2056;}i:34;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2056;}i:35;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2056;}i:36;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:2060;}i:37;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2061;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Fault Tolerance";}i:2;i:2063;}i:39;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2078;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:373:": In case of failures like node failures, network failures, etc, the framework should be able to recover and should start processing again from the point where it left. This is achieved through checkpointing the state of streaming to some persistent storage from time to time. e.g. checkpointing kafka offsets to zookeeper after getting record from Kafka and processing it.";}i:2;i:2080;}i:41;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2453;}i:42;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2453;}i:43;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2453;}i:44;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2453;}i:45;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:2457;}i:46;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2458;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"State Management";}i:2;i:2460;}i:48;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2476;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:232:": In case of stateful processing requirements where we need to maintain some state (e.g. counts of each distinct word seen in records), the framework should be able to provide some mechanism to preserve and update state information.";}i:2;i:2478;}i:50;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2710;}i:51;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2710;}i:52;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2710;}i:53;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2710;}i:54;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:2714;}i:55;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2715;}i:56;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"Performance";}i:2;i:2717;}i:57;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2728;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:251:" : This includes latency(how soon a record can be processed), throughput (records processed/second) and scalability. Latency should be as minimum as possible while throughput should be as much as possible. It is difficult to get both at the same time.";}i:2;i:2730;}i:59;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2981;}i:60;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2981;}i:61;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2981;}i:62;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2981;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:2985;}i:64;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2986;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"Advanced Features";}i:2;i:2988;}i:66;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3005;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:": Event Time Processing, Watermarks, Windowing";}i:2;i:3007;}i:68;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3053;}i:69;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3053;}i:70;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:3053;}i:71;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3053;}i:72;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:270:"These are features needed if stream processing requirements are complex. For example, processing records based on the time when it was generated at the source (event time processing). To know more in detail, please read these must-read posts by Google guy Tyler Akidau: ";}i:2;i:3054;}i:73;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:66:"https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101";i:1;N;}i:2;i:3324;}i:74;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:3390;}i:75;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:66:"https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-102";i:1;N;}i:2;i:3395;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:3461;}i:77;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3462;}i:78;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3464;}i:79;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"Two Types of Stream Processing:";i:1;i:2;i:2;i:3464;}i:2;i:3464;}i:80;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3464;}i:81;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3464;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:"Now being aware of the terms we just discussed, it is now easy to understand that there are 2 approaches to implement a Streaming framework:";}i:2;i:3509;}i:83;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3649;}i:84;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:3649;}i:85;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3649;}i:86;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3649;}i:87;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:3653;}i:88;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3654;}i:89;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"Native Streaming";}i:2;i:3656;}i:90;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3672;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:372:": Also known as Native Streaming. It means every incoming record is processed as soon as it arrives, without waiting for others. There are some continuous running processes (which we call as operators/tasks/bolts depending upon the framework) which run forever and every record passes through these processes to get processed. Examples: Storm, Flink, Kafka Streams, Samza.";}i:2;i:3674;}i:92;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4046;}i:93;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4046;}i:94;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4046;}i:95;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4046;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4050;}i:97;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4051;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"Micro-batching";}i:2;i:4053;}i:99;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4067;}i:100;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:215:": Also known as Fast Batching. It means incoming records in every few seconds are batched together and then processed in a single mini batch with the delay of a few seconds. Examples: Spark Streaming, Storm-Trident.";}i:2;i:4069;}i:101;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4284;}i:102;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4284;}i:103;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:4284;}i:104;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4287;}i:105;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:45:"Native Streaming advantages and disadvantages";i:1;i:3;i:2;i:4287;}i:2;i:4287;}i:106;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4287;}i:107;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4287;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:423:"Native Streaming feels natural as every record is processed as soon as it arrives, allowing the framework to achieve the minimum latency possible. But it also means that it is hard to achieve fault tolerance without compromising on throughput as for each record, we need to track and checkpoint once processed. Also, state management is easy as there are long running processes which can maintain the required state easily.";}i:2;i:4343;}i:109;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4766;}i:110;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4768;}i:111;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:42:"Micro-batching advantages and disadvantges";i:1;i:3;i:2;i:4768;}i:2;i:4768;}i:112;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4768;}i:113;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4768;}i:114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:376:"Micro-batching, on the other hand, is quite the opposite. Fault tolerance comes for free as it is essentially a batch and throughput is also high as processing and checkpointing will be done in one shot for a group of records. But it will be at some cost of latency and it will not feel like natural streaming. Also, efficient state management will be a challenge to maintain.";}i:2;i:4822;}i:115;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5198;}i:116;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5200;}i:117;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"Streaming Frameworks One By One";i:1;i:2;i:2;i:5200;}i:2;i:5200;}i:118;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5200;}i:119;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5245;}i:120;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:5:"Storm";i:1;i:3;i:2;i:5245;}i:2;i:5245;}i:121;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5245;}i:122;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5245;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:261:"Storm is the Hadoop of Streaming world. It is the oldest open source streaming framework and one of the most mature and reliable one. It is true streaming and is good for simple event-based use cases. I have shared details about Storm at length in these posts: ";}i:2;i:5262;}i:124;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:82:"http://why-not-learn-something.blogspot.com/2015/12/apache-storm-introduction.html";i:1;N;}i:2;i:5523;}i:125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:5605;}i:126;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:91:"http://why-not-learn-something.blogspot.com/2016/01/apache-storm-architecture-overview.html";i:1;N;}i:2;i:5610;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:5701;}i:128;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5702;}i:129;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5702;}i:130;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:5704;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Advantages";}i:2;i:5706;}i:132;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:5716;}i:133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:":";}i:2;i:5718;}i:134;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5719;}i:135;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:5719;}i:136;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5719;}i:137;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5719;}i:138;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" Very low latency, true streaming, mature and high throughput";}i:2;i:5723;}i:139;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5784;}i:140;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5784;}i:141;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5784;}i:142;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5784;}i:143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" Excellent for non-complicated streaming use cases";}i:2;i:5788;}i:144;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5838;}i:145;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5838;}i:146;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:5838;}i:147;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5838;}i:148;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:5840;}i:149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Disadvantages";}i:2;i:5842;}i:150;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:5855;}i:151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:":";}i:2;i:5857;}i:152;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5858;}i:153;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:5858;}i:154;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5858;}i:155;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5858;}i:156;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" No state management";}i:2;i:5862;}i:157;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5882;}i:158;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5882;}i:159;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5882;}i:160;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5882;}i:161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:" No advanced features like Event time processing, aggregation, windowing, sessions, watermarks, etc";}i:2;i:5886;}i:162;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5985;}i:163;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5985;}i:164;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5985;}i:165;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5985;}i:166;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" At least-once guarantee";}i:2;i:5989;}i:167;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6013;}i:168;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6013;}i:169;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:6013;}i:170;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6015;}i:171;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"Spark Streaming";i:1;i:3;i:2;i:6015;}i:2;i:6015;}i:172;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6015;}i:173;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6015;}i:174;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:951:"Spark has emerged as the true successor of Hadoop in Batch processing and the first framework to fully support the Lambda Architecture (where both Batch and Streaming are implemented; Batch for correctness, Streaming for Speed). It is immensely popular, matured and widely adopted. Spark Streaming comes for free with Spark and it uses micro batching for streaming. Before 2.0 release, Spark Streaming had some serious performance limitations but with new release 2.0+, it is called structured streaming and is equipped with many good features like custom memory management (like flink) called tungsten, watermarks, event time processing support, etc. Also, Structured Streaming is much more abstract and there is an option to switch between micro-batching and continuous streaming mode in 2.3.0 release. Continuous Streaming mode promises to give sub latency like Storm and Flink, but it is still in infancy stage with many limitations in operations.";}i:2;i:6042;}i:175;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6993;}i:176;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6993;}i:177;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6995;}i:178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Advantages";}i:2;i:6997;}i:179;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7007;}i:180;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:":";}i:2;i:7009;}i:181;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7010;}i:182;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:7010;}i:183;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7010;}i:184;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7010;}i:185;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" Supports Lambda architecture, comes free with Spark";}i:2;i:7014;}i:186;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7066;}i:187;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7066;}i:188;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7066;}i:189;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7066;}i:190;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" High throughput, good for many use cases where sub-latency is not required";}i:2;i:7070;}i:191;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7145;}i:192;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7145;}i:193;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7145;}i:194;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7145;}i:195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:" Fault tolerance by default due to micro-batch nature";}i:2;i:7149;}i:196;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7202;}i:197;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7202;}i:198;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7202;}i:199;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7202;}i:200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" Simple to use higher-level APIs";}i:2;i:7206;}i:201;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7238;}i:202;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7238;}i:203;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7238;}i:204;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7238;}i:205;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:" Big community and aggressive improvements";}i:2;i:7242;}i:206;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7284;}i:207;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7284;}i:208;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7284;}i:209;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7284;}i:210;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" Exactly Once";}i:2;i:7288;}i:211;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7301;}i:212;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7301;}i:213;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:7301;}i:214;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7301;}i:215;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7303;}i:216;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Disadvantages";}i:2;i:7305;}i:217;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7318;}i:218;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:":";}i:2;i:7320;}i:219;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7321;}i:220;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:7321;}i:221;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7321;}i:222;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7321;}i:223;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:" Not true streaming, not suitable for low latency requirements";}i:2;i:7325;}i:224;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7387;}i:225;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7387;}i:226;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7387;}i:227;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7387;}i:228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:128:" Too many parameters to tune. Hard to get it right. Have written a post on my personal experience while tuning Spark Streaming. ";}i:2;i:7391;}i:229;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:94:"http://why-not-learn-something.blogspot.com/2016/06/spark-streaming-performance-tuning-on.html";i:1;N;}i:2;i:7519;}i:230;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7613;}i:231;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7613;}i:232;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7613;}i:233;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7613;}i:234;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" Stateless by nature";}i:2;i:7617;}i:235;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7637;}i:236;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7637;}i:237;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7637;}i:238;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7637;}i:239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" Lags behind Flink in many advanced features";}i:2;i:7641;}i:240;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7685;}i:241;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7685;}i:242;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:7685;}i:243;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7687;}i:244;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:5:"Flink";i:1;i:3;i:2;i:7687;}i:2;i:7687;}i:245;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7687;}i:246;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7687;}i:247;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:682:"Flink is also from a similar academic background like Spark. While Spark came from UC Berkley, Flink came from Berlin TU University. Like Spark, it also supports Lambda architecture. But the implementation is quite opposite to that of Spark. While Spark is essentially a batch with Spark streaming as micro-batching and the special case of Spark Batch, Flink is essentially a true streaming engine treating batch as a special case of streaming with bounded data. Though APIs in both frameworks are similar, they don’t have any similarity in implementations. In Flink, each function like map, filter, reduce, etc is implemented as a long-running operator (similar to Bolt in Storm)";}i:2;i:7704;}i:248;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8386;}i:249;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8386;}i:250;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"Flink looks like a true successor to Storm like Spark succeeded Hadoop in batch.";}i:2;i:8388;}i:251;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8468;}i:252;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8468;}i:253;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8470;}i:254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Advantages";}i:2;i:8472;}i:255;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8482;}i:256;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:":";}i:2;i:8484;}i:257;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8485;}i:258;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:8485;}i:259;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8485;}i:260;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8485;}i:261;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" Leader of innovation in open source Streaming landscape.";}i:2;i:8489;}i:262;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8546;}i:263;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8546;}i:264;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8546;}i:265;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8546;}i:266;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:" First True streaming framework with all advanced features like event time processing, watermarks, etc";}i:2;i:8550;}i:267;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8652;}i:268;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8652;}i:269;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8652;}i:270;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8652;}i:271;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" Low latency with high throughput, configurable according to requirements";}i:2;i:8656;}i:272;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8729;}i:273;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8729;}i:274;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8729;}i:275;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8729;}i:276;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" Auto-adjusting, not too many parameters to tune";}i:2;i:8733;}i:277;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8781;}i:278;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8781;}i:279;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8781;}i:280;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8781;}i:281;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" Exactly Once";}i:2;i:8785;}i:282;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8798;}i:283;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8798;}i:284;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8798;}i:285;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8798;}i:286;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" Getting widely accepted by big companies at scale like Uber, Alibaba.";}i:2;i:8802;}i:287;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8872;}i:288;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8872;}i:289;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:8872;}i:290;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8872;}i:291;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8874;}i:292;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Disadvantages";}i:2;i:8876;}i:293;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8889;}i:294;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:":";}i:2;i:8891;}i:295;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8892;}i:296;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:8892;}i:297;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8892;}i:298;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8892;}i:299;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:" Little late in the game, there was lack of adoption initially";}i:2;i:8897;}i:300;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8959;}i:301;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8959;}i:302;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8959;}i:303;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8959;}i:304;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" Community is not as big as Spark but growing at a fast pace now";}i:2;i:8963;}i:305;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9027;}i:306;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9027;}i:307;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9027;}i:308;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9027;}i:309;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:" No known adoption of the Flink Batch as of now, only popular for streaming.";}i:2;i:9031;}i:310;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9107;}i:311;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9107;}i:312;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:9107;}i:313;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9109;}i:314;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Kafka Streams";i:1;i:3;i:2;i:9109;}i:2;i:9109;}i:315;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:9109;}i:316;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9109;}i:317;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:365:"Kafka Streams, unlike other streaming frameworks, is a lightweight library. It is useful for streaming data from Kafka, doing transformation and then sending back to Kafka. We can understand it as a library similar to Java Executor Service Thread pool, but with inbuilt support for Kafka. It can be integrated well with any application and will work out of the box.";}i:2;i:9134;}i:318;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9499;}i:319;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9499;}i:320;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:309:"Due to its lightweight nature, can be used in microservices type architecture. There is no match in terms of performance with Flink but also does not need a separate cluster to run, is very handy and easy to deploy and start working. Internally uses Kafka Consumer group and works on the Kafka log philosophy.";}i:2;i:9501;}i:321;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9810;}i:322;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9810;}i:323;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"This post (";}i:2;i:9812;}i:324;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:91:"https://www.confluent.io/blog/apache-flink-apache-kafka-streams-comparison-guideline-users/";i:1;N;}i:2;i:9823;}i:325;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:") thoroughly explains the use cases of Kafka Streams vs Flink Streaming.";}i:2;i:9914;}i:326;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9986;}i:327;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9986;}i:328;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:361:"One major advantage of Kafka Streams is that its processing is Exactly Once end to end. It is possible because the source as well as the destination, both are Kafka and from Kafka 0.11 version released around June 2017, Exactly once is supported. For enabling this feature, we just need to enable a flag and it will work out of the box. For more details shared ";}i:2;i:9988;}i:329;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:97:"https://www.confluent.io/blog/exactly-once-semantics-are-possible-heres-how-apache-kafka-does-it/";i:1;N;}i:2;i:10349;}i:330;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:10446;}i:331;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:66:"https://www.confluent.io/blog/enabling-exactly-once-kafka-streams/";i:1;N;}i:2;i:10451;}i:332;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:10517;}i:333;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10518;}i:334;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10518;}i:335;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:10521;}i:336;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Advantages";}i:2;i:10523;}i:337;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:10533;}i:338;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:":";}i:2;i:10535;}i:339;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10536;}i:340;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:10536;}i:341;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10536;}i:342;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10536;}i:343;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" Very lightweight library, good for microservices, IOT applications";}i:2;i:10540;}i:344;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10607;}i:345;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10607;}i:346;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10607;}i:347;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10607;}i:348;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" Does not need a dedicated cluster";}i:2;i:10611;}i:349;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10645;}i:350;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10645;}i:351;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10645;}i:352;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10645;}i:353;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" Inherits all Kafka good characteristics";}i:2;i:10649;}i:354;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10689;}i:355;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10689;}i:356;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10689;}i:357;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10689;}i:358;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" Supports Stream joins, internally uses rocksDb for maintaining state.";}i:2;i:10693;}i:359;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10763;}i:360;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10763;}i:361;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10763;}i:362;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10763;}i:363;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" Exactly Once ( Kafka 0.11 onwards).";}i:2;i:10767;}i:364;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10803;}i:365;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10803;}i:366;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:10803;}i:367;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10803;}i:368;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:10805;}i:369;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Disadvantages";}i:2;i:10807;}i:370;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:10820;}i:371;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:":";}i:2;i:10822;}i:372;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10823;}i:373;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:10823;}i:374;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10823;}i:375;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10823;}i:376;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" Tightly coupled with Kafka, cannot use without Kafka in picture";}i:2;i:10828;}i:377;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10892;}i:378;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10892;}i:379;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10892;}i:380;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10892;}i:381;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:" Quite new in the infancy stage, yet to be tested in big companies";}i:2;i:10896;}i:382;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10962;}i:383;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10962;}i:384;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10962;}i:385;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10962;}i:386;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" Not for heavy lifting work like Spark Streaming, Flink.";}i:2;i:10966;}i:387;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11022;}i:388;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11022;}i:389;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:11022;}i:390;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11024;}i:391;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:5:"Samza";i:1;i:3;i:2;i:11024;}i:2;i:11024;}i:392;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:11024;}i:393;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11024;}i:394;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:622:"Will cover Samza in short. Samza from 100 feet looks like similar to Kafka Streams in approach. There are many similarities. Both of these frameworks have been developed from the same developers who implemented Samza at LinkedIn and then founded Confluent where they wrote Kafka Streams. Both these technologies are tightly coupled with Kafka, take raw data from Kafka and then put back processed data back to Kafka. Use the same Kafka Log philosophy. Samza is kind of scaled version of Kafka Streams. While Kafka Streams is a library intended for microservices, Samza is full fledge cluster processing which runs on Yarn.";}i:2;i:11041;}i:395;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11663;}i:396;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11663;}i:397;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:11665;}i:398;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Advantages";}i:2;i:11667;}i:399;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:11677;}i:400;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:":";}i:2;i:11679;}i:401;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11680;}i:402;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:11680;}i:403;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11680;}i:404;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11680;}i:405;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:125:" Very good in maintaining large states of information (good for the use case of joining streams) using rocksDb and kafka log.";}i:2;i:11684;}i:406;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11809;}i:407;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11809;}i:408;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11809;}i:409;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11809;}i:410;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:" Fault-Tolerant and High performant using Kafka properties";}i:2;i:11813;}i:411;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11871;}i:412;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11871;}i:413;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11871;}i:414;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11871;}i:415;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" One of the options to consider if already using Yarn and Kafka in the processing pipeline.";}i:2;i:11875;}i:416;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11966;}i:417;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11966;}i:418;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11966;}i:419;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11966;}i:420;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" Good Yarn citizen";}i:2;i:11970;}i:421;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11988;}i:422;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11988;}i:423;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11988;}i:424;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11988;}i:425;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" Low latency, High throughput, mature and tested at scale";}i:2;i:11992;}i:426;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12049;}i:427;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12049;}i:428;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:12049;}i:429;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12049;}i:430;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:12051;}i:431;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Disadvantages";}i:2;i:12053;}i:432;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:12066;}i:433;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:":";}i:2;i:12068;}i:434;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12069;}i:435;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:12069;}i:436;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12069;}i:437;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12069;}i:438;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:" Tightly coupled with Kafka and Yarn. Not easy to use if either of these not in your processing pipeline.";}i:2;i:12074;}i:439;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12179;}i:440;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12179;}i:441;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12179;}i:442;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12179;}i:443;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:118:" At least-Once processing guarantee. I am not sure if it supports exactly once now like Kafka Streams after Kafka 0.11";}i:2;i:12183;}i:444;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12301;}i:445;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12301;}i:446;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12301;}i:447;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12301;}i:448;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:" Lack of advanced streaming features like Watermarks, Sessions, triggers, etc.";}i:2;i:12305;}i:449;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12383;}i:450;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12383;}i:451;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:12383;}i:452;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12385;}i:453;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"Comparison of Streaming Framework";i:1;i:2;i:2;i:12385;}i:2;i:12385;}i:454;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:12385;}i:455;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12432;}i:456;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"Spark Streaming Vs Flink";i:1;i:3;i:2;i:12432;}i:2;i:12432;}i:457;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:12432;}i:458;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12432;}i:459;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:354:"Benchmarking is a good way to compare only when it has been done by third parties. But, recently benchmarking has kind of become open catfight between Spark and Flink. It is better not to believe benchmarking these days because even a small tweaking can completely change the numbers. Nothing is better than trying and testing ourselves before deciding. ";}i:2;i:12468;}i:460;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12822;}i:461;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12822;}i:462;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:212:"As of today, it is quite obvious Flink is leading the Streaming Analytics space, with most of the desired aspects like exactly once, throughput, latency, state management, fault tolerance, advanced features, etc.";}i:2;i:12824;}i:463;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13036;}i:464;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13036;}i:465;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:142:"These have been possible because of some of the true innovations of Flink like light weighted snapshots and off-heap custom memory management.";}i:2;i:13038;}i:466;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13180;}i:467;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13180;}i:468;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:220:"One important concern with Flink was maturity and adoption level till sometime back but now companies like Uber, Alibaba, CapitalOne are using Flink streaming at massive scale certifying the potential of Flink Streaming.";}i:2;i:13182;}i:469;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13402;}i:470;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13402;}i:471;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:"Recently, Uber open sourced their latest Streaming analytics framework called AthenaX which is built on top of Flink engine. In this post (";}i:2;i:13404;}i:472;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:29:"https://eng.uber.com/athenax/";i:1;N;}i:2;i:13543;}i:473;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:"), they have discussed how they moved their streaming analytics from STorm to Apache Samza to now Flink.";}i:2;i:13572;}i:474;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13676;}i:475;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13676;}i:476;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:418:"One important point to note, if you have already noticed, is that all native streaming frameworks like Flink, Kafka Streams, Samza which support state management uses RocksDb internally. RocksDb is unique in the sense it maintains persistent state locally on each node and is highly performant. It has become a crucial part of new streaming systems. I have shared detailed info on RocksDb in one of the previous posts(";}i:2;i:13679;}i:477;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:88:"http://why-not-learn-something.blogspot.com/2016/12/why-and-when-distributed-stream.html";i:1;N;}i:2;i:14097;}i:478;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:").";}i:2;i:14185;}i:479;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14187;}i:480;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14189;}i:481;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:42:"How to choose the best Streaming Framework";i:1;i:2;i:2;i:14189;}i:2;i:14189;}i:482;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:14189;}i:483;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14189;}i:484;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"This is the most important part. And the honest answer is: it depends";}i:2;i:14245;}i:485;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14314;}i:486;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14314;}i:487;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:255:"It is important to keep in mind that no single processing framework can be a silver bullet for every use case. Every framework has some strengths and some limitations too. Still, with some experience, will share a few pointers to help in making decisions:";}i:2;i:14316;}i:488;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14572;}i:489;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:14572;}i:490;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14572;}i:491;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14572;}i:492;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:371:" Depends on the use cases: If the use case is simple, there is no need to go for the latest and greatest framework if it is complicated to learn and implement. A lot depends on how much we are willing to invest in, and how much we want in return. For example, if it is simple IOT kind of event-based alerting system, Storm or Kafka Streams is perfectly fine to work with.";}i:2;i:14576;}i:493;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14947;}i:494;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14947;}i:495;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14947;}i:496;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14947;}i:497;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1072:" Future Considerations: At the same time, we also need to have a conscious consideration over what will be the possible future use cases? Is it possible that demands of advanced features like event time processing, aggregation, stream joins, etc can come in future? If the answer is yes or maybe, then it is better to go ahead with advanced streaming frameworks like Spark Streaming or Flink. Once invested and implemented in one technology, it's difficult and cost a lot to change later. For example, In previous company we were having a Storm pipeline up and running from last 2 years and it was working perfectly fine until a requirement came for uniquifying incoming events and only report unique events. Now, this demanded state management which is not inherently supported by Storm. Although I implemented using time-based in-memory hashmap, the limitation is that the state will go away on the restart. The point I am trying to make is, if we try to implement something on our own which the framework does not explicitly provide, we are bound to hit unknown issues.";}i:2;i:14951;}i:498;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:16023;}i:499;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:16023;}i:500;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:16023;}i:501;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:16023;}i:502;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:609:" Existing Tech Stack: One more important point is to consider the existing tech stack. If the existing stack has Kafka in place end to end, then Kafka Streams or Samza might be an easier fit. Similarly, if the processing pipeline is based on Lambda architecture and Spark Batch or Flink Batch is already in place then it makes sense to consider Spark Streaming or Flink Streaming. For example, in my one of previous projects, I already had Spark Batch in the pipeline and so when the streaming requirement came, it was quite easy to pick Spark Streaming which required almost the same skill set and code base.";}i:2;i:16027;}i:503;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:16636;}i:504;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:16636;}i:505;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:16636;}i:506;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16636;}i:507;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:309:"In short, If we understand the strengths and limitations of the frameworks along with our use cases well, then it is easier to pick or at least filtering down the available options. Lastly, it is always good to have POCs once a couple of options have been selected. Everyone has different taste bud after all.";}i:2;i:16638;}i:508;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16947;}i:509;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16947;}i:510;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:675:"Apache Streaming space is evolving at so fast pace that this post might be outdated in terms of information in a couple of years. Currently, Spark and Flink are the heavyweights leading from the front in terms of developments but some new kid can still come and join the race. Apache Apex is one of them. Also, there are proprietary streaming solutions as well which I did not cover like Google Dataflow. My objective of this post was to help someone who is new to streaming to understand, with minimum jargons, some core concepts of Streaming along with strengths, limitations and use cases of popular open source streaming frameworks. Hope the post was helpful in some way.";}i:2;i:16949;}i:511;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17624;}i:512;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:17624;}i:513;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:17624;}}