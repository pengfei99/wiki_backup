a:564:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"java IO体系的学习总结";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:47;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:42:"1.Java Io流的概念，分类，类图。";i:1;i:2;i:2;i:47;}i:2;i:47;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:47;}i:6;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:103;}i:7;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"1.1 Java Io流的概念";i:1;i:3;i:2;i:103;}i:2;i:103;}i:8;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:103;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:103;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:372:"java的io是实现输入和输出的基础，可以方便的实现数据的输入和输出操作。在java中把不同的输入/输出源（键盘，文件，网络连接等）抽象表述为“流”(stream)。通过流的形式允许java程序使用相同的方式来访问不同的输入/输出源。stram是从起源（source）到接收的（sink）的有序数据。";}i:2;i:138;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:510;}i:12;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:510;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:"注：java把所有的传统的流类型都放到在java io包下，用于实现输入和输出功能。";}i:2;i:512;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:616;}i:15;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:618;}i:16;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"1.2 Io流的分类：";i:1;i:3;i:2;i:618;}i:2;i:618;}i:17;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:618;}i:18;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:618;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:"按照不同的分类方式，可以把流分为不同的类型。常用的分类有三种：";}i:2;i:651;}i:20;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:744;}i:21;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:746;}i:22;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:66:"1.2.1 按照流的流向分，可以分为输入流和输出流。";i:1;i:4;i:2;i:746;}i:2;i:746;}i:23;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:746;}i:24;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:821;}i:25;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:821;}i:26;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:821;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" 输入流： 只能从中读取数据，而不能向其写入数据。";}i:2;i:825;}i:28;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:896;}i:29;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:896;}i:30;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:896;}i:31;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:896;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" 输出流：只能向其写入数据，而不能向其读取数据。";}i:2;i:900;}i:33;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:970;}i:34;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:970;}i:35;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:970;}i:36;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:970;}i:37;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:245:"此处的输入,输出涉及一个方向的问题，对于如图15.1所示的数据流向，数据从内存到硬盘，通常称为输出流——也就是说，这里的输入，输出都是从程序运行所在的内存的角度来划分的。";}i:2;i:972;}i:38;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1217;}i:39;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1217;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:243:"注：如果从硬盘的角度来考虑，图15.1所示的数据流应该是输入流才对；但划分输入/输出流时是从程序运行所在的内存的角度来考虑的，因此如图15.1所在的流时输出流。而不是输入流。";}i:2;i:1219;}i:41;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1462;}i:42;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1462;}i:43;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:302:"对于如图15.2所示的数据流向，数据从服务器通过网络流向客户端，在这种情况下,Server端的内存负责将数据输出到网络里，因此Server端的程序使用输出流；Client端的内存负责从网络中读取数据，因此Client端的程序应该使用输入流。";}i:2;i:1464;}i:44;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1766;}i:45;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1766;}i:46;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:57:":employes:pengfei.liu:java:all_io:io_stream_direction.png";i:1;s:0:"";i:2;N;i:3;s:3:"600";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:1768;}i:47;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1834;}i:48;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1836;}i:49;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:100:"1.2.2 按照操作单元划分，可以划分为字节流(byte stream)和字符流(character stream)";i:1;i:4;i:2;i:1836;}i:2;i:1836;}i:50;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:1836;}i:51;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1836;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:231:"字节流和字符流的用法几乎完成全一样，区别在于字节流和字符流所操作的数据单元不同，字节流操作的单元是数据单元是8位的字节，字符流操作的是数据单元为16位的字符。";}i:2;i:1946;}i:53;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2177;}i:54;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2177;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:116:"字节流主要是由InputStream和outPutStream作为基类，而字符流则主要有Reader和Writer作为基类。";}i:2;i:2179;}i:56;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2295;}i:57;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2295;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:"Note that Input/OutPutStream uses byte as the basic data entity. Reader/Writer uses char as the basic data entity.";}i:2;i:2297;}i:59;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2411;}i:60;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2411;}i:61;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:63:":employes:pengfei.liu:java:all_io:io_stream_classification1.png";i:1;s:0:"";i:2;N;i:3;s:3:"600";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:2415;}i:62;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2487;}i:63;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2489;}i:64;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:57:"1.2.3 按照流的角色划分为节点流和处理流。";i:1;i:4;i:2;i:2489;}i:2;i:2489;}i:65;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:2489;}i:66;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2489;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:328:"可以从/向一个特定的IO设备（如磁盘，网络）读/写数据的流，称为节点流。节点流也被称为低级流。图15.3显示了节点流的示意图。从图15.3中可以看出，当使用节点流进行输入和输出时，程序直接连接到实际的数据源，和实际的输入/输出节点连接。";}i:2;i:2556;}i:68;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2884;}i:69;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2884;}i:70;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:567:"处理流则用于对一个已存在的流进行连接和封装，通过封装后的流来实现数据的读/写功能。处理流也被称为高级流。当使用处理流进行输入/输出时，程序并不会直接连接到实际的数据源，没有和实际的输入和输出节点连接。使用处理流的一个明显的好处是，只要使用相同的处理流，程序就可以采用完全相同的输入/输出代码来访问不同的数据源，随着处理流所包装的节点流的变化，程序实际所访问的数据源也相应的发生变化。";}i:2;i:2886;}i:71;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3453;}i:72;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3453;}i:73;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:63:":employes:pengfei.liu:java:all_io:io_stream_classification2.png";i:1;s:0:"";i:2;N;i:3;s:3:"600";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:3455;}i:74;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:3527;}i:75;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3528;}i:76;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3528;}i:77;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:52:"1.3 流的原理浅析和常用的流的分类表：";i:1;i:3;i:2;i:3528;}i:2;i:3528;}i:78;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3528;}i:79;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3592;}i:80;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"1.3.1 流的原理浅析:";i:1;i:4;i:2;i:3592;}i:2;i:3592;}i:81;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:3592;}i:82;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3592;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:218:"java Io流共涉及40多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java Io流的40多个类都是从如下4个抽象类基类中派生出来的。";}i:2;i:3627;}i:84;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3845;}i:85;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3845;}i:86;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:369:"InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。
OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。
 
对于InputStream和Reader而言，它们把输入设备抽象成为一个”水管“，这个水管的每个“水滴”依次排列，如图15.5所示：
";}i:2;i:3847;}i:87;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:54:":employes:pengfei.liu:java:all_io:io_stream_theory.png";i:1;s:0:"";i:2;N;i:3;s:3:"600";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:4216;}i:88;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4279;}i:89;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4279;}i:90;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:447:"从图15.5可以看出，字节流和字符流的处理方式其实很相似，只是它们处理的输入/输出单位不同而已。输入流使用隐式的记录指针来表示当前正准备从哪个“水滴”开始读取，每当程序从InputStream或者Reader里面取出一个或者多个“水滴”后，记录指针自定向后移动；除此之外，InputStream和Reader里面都提供了一些方法来控制记录指针的移动。";}i:2;i:4281;}i:91;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4728;}i:92;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4728;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:136:"对于OutputStream和Writer而言，它们同样把输出设备抽象成一个”水管“，只是这个水管里面没有任何水滴.";}i:2;i:4730;}i:94;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4866;}i:95;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4866;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:131:"Java的处理流模型则体现了Java输入和输出流设计的灵活性。处理流的功能主要体现在以下两个方面。";}i:2;i:4869;}i:97;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5001;}i:98;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:5001;}i:99;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5001;}i:100;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5001;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:" 性能的提高：主要以增加缓冲的方式来提供输入和输出的效率。";}i:2;i:5005;}i:102;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5090;}i:103;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5090;}i:104;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5090;}i:105;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5090;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:167:" 操作的便捷：处理流可能提供了一系列便捷的方法来一次输入和输出大批量的内容，而不是输入/输出一个或者多个“水滴”。";}i:2;i:5094;}i:107;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5261;}i:108;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5261;}i:109;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:5261;}i:110;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5261;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:"1.3.2 java输入/输出流体系中常用的流的分类表";}i:2;i:5263;}i:112;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5323;}i:113;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:5;i:1;i:13;i:2;i:5324;}i:2;i:5323;}i:114;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:5323;}i:115;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5323;}i:116;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:5323;}i:117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"分类	";}i:2;i:5325;}i:118;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:5332;}i:119;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5332;}i:120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"字节输入流";}i:2;i:5333;}i:121;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:5348;}i:122;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:5:"right";i:2;i:1;}i:2;i:5348;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"	字节输出流";}i:2;i:5349;}i:124;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:5365;}i:125;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:5:"right";i:2;i:1;}i:2;i:5365;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"	字符输入流";}i:2;i:5366;}i:127;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:5382;}i:128;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:5:"right";i:2;i:1;}i:2;i:5382;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"	字符输出流";}i:2;i:5383;}i:130;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:5399;}i:131;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5400;}i:132;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:5400;}i:133;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5400;}i:134;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5400;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"抽象基类";}i:2;i:5402;}i:136;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5414;}i:137;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:5414;}i:138;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"InputStream	";}i:2;i:5415;}i:139;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5427;}i:140;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:5427;}i:141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"OutputStream	";}i:2;i:5428;}i:142;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5441;}i:143;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5441;}i:144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"Reader";}i:2;i:5442;}i:145;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5448;}i:146;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5448;}i:147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" Writer";}i:2;i:5449;}i:148;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5456;}i:149;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5457;}i:150;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5457;}i:151;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5457;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"访问文件";}i:2;i:5459;}i:153;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5471;}i:154;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5471;}i:155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"FileInputStream";}i:2;i:5472;}i:156;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5487;}i:157;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5487;}i:158;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"FileOutputStream";}i:2;i:5488;}i:159;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5504;}i:160;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5504;}i:161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"FileReader";}i:2;i:5505;}i:162;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5515;}i:163;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5515;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"FileWriter";}i:2;i:5516;}i:165;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5526;}i:166;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5527;}i:167;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5527;}i:168;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5527;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"访问数组";}i:2;i:5529;}i:170;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5541;}i:171;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5541;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"ByteArrayInputStream";}i:2;i:5542;}i:173;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5562;}i:174;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5562;}i:175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"ByteArrayOutputStream";}i:2;i:5563;}i:176;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5584;}i:177;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5584;}i:178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"CharArrayReader";}i:2;i:5585;}i:179;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5600;}i:180;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5600;}i:181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"CharArrayWriter";}i:2;i:5601;}i:182;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5616;}i:183;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5617;}i:184;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5617;}i:185;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5617;}i:186;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"访问管道";}i:2;i:5619;}i:187;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5631;}i:188;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5631;}i:189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"PipedInputStream";}i:2;i:5632;}i:190;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5648;}i:191;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5648;}i:192;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"PipedOutputStream";}i:2;i:5649;}i:193;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5666;}i:194;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5666;}i:195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"PipedReader";}i:2;i:5667;}i:196;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5678;}i:197;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5678;}i:198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"PipedWriter";}i:2;i:5679;}i:199;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5690;}i:200;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5691;}i:201;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5691;}i:202;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5691;}i:203;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"访问字符串";}i:2;i:5693;}i:204;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5708;}i:205;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5708;}i:206;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" null ";}i:2;i:5709;}i:207;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5715;}i:208;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5715;}i:209;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" null ";}i:2;i:5716;}i:210;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5722;}i:211;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5722;}i:212;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"StringReader";}i:2;i:5723;}i:213;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5735;}i:214;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:5:"right";i:2;i:1;}i:2;i:5735;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"	StringWriter";}i:2;i:5736;}i:216;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5749;}i:217;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5750;}i:218;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5750;}i:219;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:5750;}i:220;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"缓冲流	";}i:2;i:5752;}i:221;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5762;}i:222;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5762;}i:223;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"BufferedInputStream";}i:2;i:5763;}i:224;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5782;}i:225;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5782;}i:226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"BufferedOutputStream";}i:2;i:5783;}i:227;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5803;}i:228;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5803;}i:229;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"BufferedReader";}i:2;i:5804;}i:230;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5818;}i:231;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5818;}i:232;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"BufferedWriter";}i:2;i:5819;}i:233;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5833;}i:234;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5834;}i:235;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5834;}i:236;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5834;}i:237;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"转换流";}i:2;i:5836;}i:238;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5845;}i:239;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5845;}i:240;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"null";}i:2;i:5846;}i:241;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5850;}i:242;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5850;}i:243;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"null";}i:2;i:5851;}i:244;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5855;}i:245;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5855;}i:246;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"InputStreamReader";}i:2;i:5856;}i:247;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5873;}i:248;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5873;}i:249;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"OutputStreamWriter";}i:2;i:5874;}i:250;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5892;}i:251;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5893;}i:252;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5893;}i:253;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5893;}i:254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"对象流";}i:2;i:5895;}i:255;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5904;}i:256;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5904;}i:257;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"ObjectInputStream";}i:2;i:5905;}i:258;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5922;}i:259;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5922;}i:260;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"ObjectOutputStream";}i:2;i:5923;}i:261;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5941;}i:262;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5941;}i:263;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"null";}i:2;i:5942;}i:264;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5946;}i:265;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5946;}i:266;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"null";}i:2;i:5947;}i:267;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5951;}i:268;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5954;}i:269;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5954;}i:270;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5954;}i:271;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"抽象基类";}i:2;i:5956;}i:272;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5968;}i:273;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5968;}i:274;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"FilterInputStream";}i:2;i:5969;}i:275;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5986;}i:276;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5986;}i:277;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"FilterOutputStream";}i:2;i:5987;}i:278;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6005;}i:279;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6005;}i:280;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"FilterReader";}i:2;i:6006;}i:281;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6018;}i:282;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6018;}i:283;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"FilterWriter";}i:2;i:6019;}i:284;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6031;}i:285;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:6032;}i:286;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:6032;}i:287;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6032;}i:288;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"打印流";}i:2;i:6034;}i:289;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6043;}i:290;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6043;}i:291;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"null";}i:2;i:6044;}i:292;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6048;}i:293;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6048;}i:294;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"PrintStream";}i:2;i:6049;}i:295;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6060;}i:296;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6060;}i:297;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"null";}i:2;i:6061;}i:298;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6065;}i:299;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6065;}i:300;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"PrintWriter";}i:2;i:6066;}i:301;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6077;}i:302;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:6078;}i:303;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:6078;}i:304;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6078;}i:305;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"推回输入流";}i:2;i:6080;}i:306;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6095;}i:307;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6095;}i:308;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"PushbackInputStream";}i:2;i:6096;}i:309;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6115;}i:310;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6115;}i:311;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"null";}i:2;i:6116;}i:312;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6120;}i:313;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6120;}i:314;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"PushbackReader";}i:2;i:6121;}i:315;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6135;}i:316;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6135;}i:317;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"null";}i:2;i:6136;}i:318;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6140;}i:319;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:6142;}i:320;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:6142;}i:321;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6142;}i:322;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"特殊流";}i:2;i:6144;}i:323;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6153;}i:324;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6153;}i:325;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"DataInputStream";}i:2;i:6154;}i:326;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6169;}i:327;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6169;}i:328;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"DataOutputStream";}i:2;i:6170;}i:329;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6186;}i:330;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6186;}i:331;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"null";}i:2;i:6187;}i:332;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6191;}i:333;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6191;}i:334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"null";}i:2;i:6192;}i:335;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6196;}i:336;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:6197;}i:337;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:6197;}i:2;i:6197;}i:338;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6199;}i:339;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"2.常用的io流的用法";i:1;i:2;i:2;i:6199;}i:2;i:6199;}i:340;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:6199;}i:341;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6199;}i:342;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:177:"下面是整理的常用的Io流的特性及使用方法，只有清楚每个Io流的特性和方法。才能在不同的需求面前正确的选择对应的IO流进行开发。";}i:2;i:6238;}i:343;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6415;}i:344;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6417;}i:345;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:70:"2.1 Io体系的基类（InputStream/Reader，OutputStream/Writer）。";i:1;i:3;i:2;i:6417;}i:2;i:6417;}i:346;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6417;}i:347;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6417;}i:348;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:213:"字节流和字符流的操作方式基本一致，只是操作的数据单元不同——字节流的操作单元是字节，字符流的操作单元是字符。所以字节流和字符流就整理在一起了。";}i:2;i:6499;}i:349;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6712;}i:350;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6714;}i:351;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"2.1.1 InputStream/Reader";i:1;i:4;i:2;i:6714;}i:2;i:6714;}i:352;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:6714;}i:353;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6714;}i:354;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:"InputStream和Reader是所有输入流的抽象基类，本身并不能创建实例来执行输入，但它们将成为所有输入流的模板，所以它们的方法是所有输入流都可使用的方法。";}i:2;i:6748;}i:355;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6957;}i:356;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6957;}i:357;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6959;}i:358;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"在InputStream里面包含如下3个方法。";}i:2;i:6961;}i:359;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7006;}i:360;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:7008;}i:361;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7009;}i:362;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:7009;}i:363;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7009;}i:364;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7009;}i:365;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:182:" int read(); 从输入流中读取单个字节（相当于从图15.5所示的水管中取出一滴水），返回所读取的字节数据（字节数据可直接转换为int类型）";}i:2;i:7013;}i:366;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7195;}i:367;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7195;}i:368;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7195;}i:369;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7195;}i:370;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:" int read(byte[] b)从输入流中最多读取b.length个字节的数据，并将其存储在字节数组b中，返回实际读取的字节数。";}i:2;i:7199;}i:371;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7344;}i:372;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7344;}i:373;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7344;}i:374;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7344;}i:375;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:234:" int read(byte[] b,int off,int len); 从输入流中最多读取len个字节的数据，并将其存储在数组b中，放入数组b中时，并不是从数组起点开始，而是从off位置开始，返回实际读取的字节数。";}i:2;i:7348;}i:376;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7582;}i:377;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7582;}i:378;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:7582;}i:379;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7582;}i:380;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7584;}i:381;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"在Reader中包含如下3个方法。";}i:2;i:7586;}i:382;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7623;}i:383;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:7625;}i:384;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7626;}i:385;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:7626;}i:386;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7626;}i:387;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7626;}i:388;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:185:" int read(); 从输入流中读取单个字符（相当于从图15.5所示的水管中取出一滴水），返回所读取的字符数据（字节数据可直接转换为int类型）。";}i:2;i:7630;}i:389;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7815;}i:390;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7815;}i:391;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7815;}i:392;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7815;}i:393;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:" int read(char[] b)从输入流中最多读取b.length个字符的数据，并将其存储在字节数组b中，返回实际读取的字符数。";}i:2;i:7819;}i:394;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7964;}i:395;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7964;}i:396;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7964;}i:397;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7964;}i:398;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:234:" int read(char[] b,int off,int len); 从输入流中最多读取len个字符的数据，并将其存储在数组b中，放入数组b中时，并不是从数组起点开始，而是从off位置开始，返回实际读取的字符数。";}i:2;i:7968;}i:399;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8202;}i:400;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8202;}i:401;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:8202;}i:402;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8202;}i:403;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8204;}i:404;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:"InputStream和Reader提供的一些移动指针的方法：";}i:2;i:8206;}i:405;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8265;}i:406;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:8267;}i:407;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8268;}i:408;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:8268;}i:409;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8268;}i:410;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8268;}i:411;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:" void mark(int readAheadLimit); 在记录指针当前位置记录一个标记（mark）";}i:2;i:8272;}i:412;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8359;}i:413;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8359;}i:414;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8359;}i:415;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8359;}i:416;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:101:" boolean markSupported(); 判断此输入流是否支持mark()操作，即是否支持记录标记。";}i:2;i:8363;}i:417;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8464;}i:418;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8464;}i:419;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8464;}i:420;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8464;}i:421;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:" void reset(); 将此流的记录指针重新定位到上一次记录标记（mark）的位置。";}i:2;i:8468;}i:422;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8565;}i:423;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8565;}i:424;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8565;}i:425;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8565;}i:426;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" long skip(long n); 记录指针向前移动n个字节/字符。";}i:2;i:8569;}i:427;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8633;}i:428;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8633;}i:429;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:8633;}i:430;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8635;}i:431;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"2.1.2 OutputStream和Writer";i:1;i:4;i:2;i:8635;}i:2;i:8635;}i:432;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:8635;}i:433;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8635;}i:434;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:"OutputStream和Writer的用法也非常相似,两个流都提供了如下三个方法：";}i:2;i:8672;}i:435;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8761;}i:436;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:8761;}i:437;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8761;}i:438;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8761;}i:439;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:124:" void write(int c); 将指定的字节/字符输出到输出流中，其中c即可以代表字节，也可以代表字符。";}i:2;i:8765;}i:440;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8889;}i:441;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8889;}i:442;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8889;}i:443;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8889;}i:444;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:" void write(byte[]/char[] buf); 将字节数组/字符数组中的数据输出到指定输出流中。";}i:2;i:8893;}i:445;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8995;}i:446;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8995;}i:447;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8995;}i:448;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8995;}i:449;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:154:" void write(byte[]/char[] buf, int off,int len ); 将字节数组/字符数组中从off位置开始，长度为len的字节/字符输出到输出流中。";}i:2;i:8999;}i:450;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9153;}i:451;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9153;}i:452;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:9153;}i:453;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9153;}i:454;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:180:"因为字符流直接以字符作为操作单位，所以Writer可以用字符串来代替字符数组，即以String对象作为参数。Writer里面还包含如下两个方法。";}i:2;i:9155;}i:455;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9335;}i:456;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:9335;}i:457;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9335;}i:458;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9335;}i:459;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" void write(String str); 将str字符串里包含的字符输出到指定输出流中。";}i:2;i:9339;}i:460;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9427;}i:461;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9427;}i:462;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9427;}i:463;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9427;}i:464;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:" void write (String str, int off, int len); 将str字符串里面从off位置开始，长度为len的字符输出到指定输出流中。";}i:2;i:9431;}i:465;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9568;}i:466;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9568;}i:467;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:9568;}i:468;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9570;}i:469;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:98:"2.2 Io体系的基类文件流的使用(FileInputStream/FileReader ，FileOutputStream/FileWriter)";i:1;i:3;i:2;i:9570;}i:2;i:9570;}i:470;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:9570;}i:471;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9570;}i:472;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:221:"前面说过InputStream和Reader都是抽象类，本身不能创建实例，但它们分别有一个用于读取文件的输入流：FileInputStream和FileReader，它们都是节点流, 会直接和指定文件关联。";}i:2;i:9680;}i:473;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9901;}i:474;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9904;}i:475;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:64:"2.3 转换流的使用（InputStreamReader/OutputStreamWriter）";i:1;i:3;i:2;i:9904;}i:2;i:9904;}i:476;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:9904;}i:477;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9904;}i:478;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:390:"下面以获取键盘输入为例来介绍转换流的用法。java使用System.in代表输入。即键盘输入，但这个标准输入流是InputStream类的实例，使用不太方便，而且键盘输入内容都是文本内容，所以可以使用InputStreamReader将其包装成BufferedReader,利用BufferedReader的readLine()方法可以一次读取一行内容，如下代码所示:";}i:2;i:9980;}i:479;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10370;}i:480;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:838:"
public class InputStreamReaderTest {
    public  static void main(String[] args)throws IOException {
        try {
            // 将System.in对象转化为Reader对象
            InputStreamReader reader=new InputStreamReader(System.in);
            //将普通的Reader包装成BufferedReader
            BufferedReader bufferedReader=new BufferedReader(reader);
           String buffer=null;
           while ((buffer=bufferedReader.readLine())!=null){
            // 如果读取到的字符串为“exit”,则程序退出
               if(buffer.equals("exit")){
                   System.exit(1);
               }
               //打印读取的内容
               System.out.print("输入内容："+buffer);
           }
        }catch (IOException e){
            e.printStackTrace();
        }finally {
        }
    }

";i:1;s:4:"java";i:2;N;}i:2;i:10377;}i:481;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11230;}i:482;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:61:"2.4 对象流的使用（ObjectInputStream/ObjectOutputStream";i:1;i:3;i:2;i:11230;}i:2;i:11230;}i:483;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:11230;}i:484;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11230;}i:485;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:216:"If we want to read or write object to a file, we should use ObjectInputStream/OutputStream. When use them to write object, it serialize the object to byte. When we use them to read, it deserialize the byte to object.";}i:2;i:11303;}i:486;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11519;}i:487;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11519;}i:488;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"Write object example";}i:2;i:11521;}i:489;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11547;}i:490;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:804:"
public static void writeObject(){
        OutputStream outputStream=null;
        BufferedOutputStream buf=null;
        ObjectOutputStream obj=null;
        try {
            //序列化文件輸出流
            outputStream=new FileOutputStream("E:\\learnproject\\Iotest\\lib\\src\\main\\java\\com\\myfile.tmp");
            //构建缓冲流
            buf=new BufferedOutputStream(outputStream);
            //构建字符输出的对象流
            obj=new ObjectOutputStream(buf);
            //序列化数据写入
            obj.writeObject(new Person("A", 21));//Person对象
            //关闭流
            obj.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

";i:1;s:4:"java";i:2;N;}i:2;i:11547;}i:491;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11547;}i:492;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Read object example";}i:2;i:12366;}i:493;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12391;}i:494;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:870:"
public static void readObject() throws IOException {
        try {
            InputStream inputStream=new FileInputStream("E:\\learnproject\\Iotest\\lib\\src\\main\\java\\com\\myfile.tmp");
            //构建缓冲流
            BufferedInputStream buf=new BufferedInputStream(inputStream);
            //构建字符输入的对象流
            ObjectInputStream obj=new ObjectInputStream(buf);
            Person tempPerson=(Person)obj.readObject();
            System.out.println("Person对象为："+tempPerson);
            //关闭流
            obj.close();
            buf.close();
            inputStream.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

";i:1;s:4:"java";i:2;N;}i:2;i:12391;}i:495;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12391;}i:496;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:"IMportant note:
1.读取顺序和写入顺序一定要一致，不然会读取出错。
2.";}i:2;i:13276;}i:497;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:13366;}i:498;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"在对象属性前面加transient关键字，则该对象的属性不会被序列化。";}i:2;i:13368;}i:499;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:13455;}i:500;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13457;}i:501;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:13459;}i:502;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"4.何为NIO,和传统Io有何区别？";i:1;i:2;i:2;i:13459;}i:2;i:13459;}i:503;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:13459;}i:504;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13459;}i:505;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:853:"我们使用InputStream从输入流中读取数据时，如果没有读取到有效的数据，程序将在此处阻塞该线程的执行。其实传统的输入里和输出流都是阻塞式的进行输入和输出。 不仅如此，传统的输入流、输出流都是通过字节的移动来处理的（即使我们不直接处理字节流，但底层实现还是依赖于字节处理），也就是说，面向流的输入和输出一次只能处理一个字节，因此面向流的输入和输出系统效率通常不高。
    
从JDk1.4开始，java提供了一系列改进的输入和输出处理的新功能，这些功能被统称为新IO(NIO)。新增了许多用于处理输入和输出的类，这些类都被放在java.nio包及其子包下，并且对原io的很多类都以NIO为基础进行了改写。新增了满足NIO的功能。";}i:2;i:13511;}i:506;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14364;}i:507;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14364;}i:508;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:265:"NIO采用了内存映射对象的方式来处理输入和输出，NIO将文件或者文件的一块区域映射到内存中，这样就可以像访问内存一样来访问文件了。通过这种方式来进行输入/输出比传统的输入和输出要快的多。";}i:2;i:14366;}i:509;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14631;}i:510;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14631;}i:511;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:"JDk1.4使用NIO改写了传统Io后，传统Io的读写速度和NIO差不了太多。";}i:2;i:14633;}i:512;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14718;}i:513;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14720;}i:514;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"5.在开发中正确使用Io流";i:1;i:2;i:2;i:14720;}i:2;i:14720;}i:515;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:14720;}i:516;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14720;}i:517;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:193:"    了解了java io的整体类结构和每个类的一下特性后，我们可以在开发的过程中根据需要灵活的使用不同的Io流进行开发。下面是我整理2点原则:";}i:2;i:14765;}i:518;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14959;}i:519;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:14959;}i:520;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14959;}i:521;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14959;}i:522;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:" 如果是操作二进制文件那我们就使用字节流，如果操作的是文本文件那我们就使用字符流。";}i:2;i:14963;}i:523;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:15084;}i:524;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:15084;}i:525;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:15084;}i:526;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:15084;}i:527;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" 尽可能的多使用处理流，这会使我们的代码更加灵活，复用性更好。";}i:2;i:15088;}i:528;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:15179;}i:529;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:15179;}i:530;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:15179;}i:531;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:15181;}i:532;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:42:"Appendix: Difference between byte and char";i:1;i:1;i:2;i:15181;}i:2;i:15181;}i:533;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:15181;}i:534;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:15238;}i:535;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:15238;}i:536;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:15238;}i:537;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:" The first and foremost difference between byte and char is that byte is a signed data type while char is an unsigned data type. In signed data type first bit always represents a sign of the number.";}i:2;i:15242;}i:538;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:15440;}i:539;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:15440;}i:540;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:15440;}i:541;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:15440;}i:542;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:" Another difference between char and byte is that char(16 bit)is larger data type than a byte(8 bit). The range of byte is between -128 to 127 but the range of char is from 0 to 65535.";}i:2;i:15444;}i:543;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:15628;}i:544;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:15628;}i:545;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:15628;}i:546;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:15628;}i:547;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" You can initialize a char variable using character literal e.g. char ch = 'c', in this case, ";}i:2;i:15632;}i:548;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:5:"ASCII";}i:2;i:15726;}i:549;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:" value of character 'c' will be stored into char variable ";}i:2;i:15731;}i:550;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:15789;}i:551;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"ch";}i:2;i:15790;}i:552;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:15792;}i:553;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:15793;}i:554;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:15794;}i:555;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:15794;}i:556;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:15794;}i:557;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:15794;}i:558;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:152:" The wrapper class corresponding to byte primitive is java.lang.Byte and the wrapper class corresponding to char primitive is java.lang.Character class.";}i:2;i:15798;}i:559;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:15950;}i:560;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:15950;}i:561;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:15950;}i:562;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:15954;}i:563;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:15954;}}