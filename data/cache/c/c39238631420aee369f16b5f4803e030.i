a:377:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Flume Introduction";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:35;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"What is Flume?";i:1;i:2;i:2;i:35;}i:2;i:35;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:35;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:162:"Apache Flume is a tool/service/data ingestion mechanism for collecting aggregating and transporting large amounts of streaming data such as log files, events (etc";}i:2;i:63;}i:8;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:225;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:") from various sources to a centralized data store.";}i:2;i:228;}i:10;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:279;}i:11;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:279;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:158:"Flume is a highly reliable, distributed, and configurable tool. It is principally designed to copy streaming data (log data) from various web servers to HDFS.";}i:2;i:281;}i:13;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:439;}i:14;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:441;}i:15;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"Application of Flume";i:1;i:2;i:2;i:441;}i:2;i:441;}i:16;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:441;}i:17;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:441;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:224:"Assume an e-commerce web application wants to analyze the customer behavior from a particular region. To do so, they would need to move the available log data into Hadoop for analysis. Here, Apache Flume comes to our rescue.";}i:2;i:475;}i:19;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:699;}i:20;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:699;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:"Flume is used to move the log data generated by application servers into HDFS at a higher speed.";}i:2;i:701;}i:22;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:797;}i:23;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:799;}i:24;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:32:"Advantages and features of Flume";i:1;i:2;i:2;i:799;}i:2;i:799;}i:25;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:799;}i:26;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:845;}i:27;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Advantages of Flume";i:1;i:3;i:2;i:845;}i:2;i:845;}i:28;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:845;}i:29;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:845;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"Here are the advantages of using Flume:";}i:2;i:876;}i:31;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:916;}i:32;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:916;}i:33;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:916;}i:34;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:916;}i:35;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" Using Apache Flume we can store the data into any of the centralized stores (HBase, HDFS).";}i:2;i:920;}i:36;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1011;}i:37;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1011;}i:38;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1011;}i:39;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1011;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:221:" When the rate of incoming data exceeds the rate at which data can be written to the destination, Flume acts as a mediator between data producers and the centralized stores and provides a steady flow of data between them.";}i:2;i:1015;}i:41;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1236;}i:42;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1236;}i:43;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1236;}i:44;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1236;}i:45;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" Flume provides the feature of contextual routing.";}i:2;i:1240;}i:46;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1290;}i:47;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1290;}i:48;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1290;}i:49;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1290;}i:50;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:171:" The transactions in Flume are channel-based where two transactions (one sender and one receiver) are maintained for each message. It guarantees reliable message delivery.";}i:2;i:1294;}i:51;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1465;}i:52;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1465;}i:53;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1465;}i:54;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1465;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" Flume is reliable, fault tolerant, scalable, manageable, and customizable.";}i:2;i:1469;}i:56;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1544;}i:57;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1544;}i:58;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1544;}i:59;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1546;}i:60;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Features of Flume";i:1;i:3;i:2;i:1546;}i:2;i:1546;}i:61;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1546;}i:62;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1546;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:"Some of the notable features of Flume are as follows:";}i:2;i:1575;}i:64;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1629;}i:65;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1629;}i:66;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1629;}i:67;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1629;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:101:" Flume ingests log data from multiple web servers into a centralized store (HDFS, HBase) efficiently.";}i:2;i:1633;}i:69;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1734;}i:70;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1734;}i:71;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1734;}i:72;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1734;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" Using Flume, we can get the data from multiple servers immediately into Hadoop.";}i:2;i:1738;}i:74;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1818;}i:75;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1818;}i:76;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1818;}i:77;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1818;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:195:" Along with the log files, Flume is also used to import huge volumes of event data produced by social networking sites like Facebook and Twitter, and e-commerce websites like Amazon and Flipkart.";}i:2;i:1822;}i:79;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2017;}i:80;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2017;}i:81;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2017;}i:82;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2017;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:" Flume supports a large set of sources and destinations types.";}i:2;i:2021;}i:84;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2083;}i:85;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2083;}i:86;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2083;}i:87;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2083;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:" Flume supports multi-hop flows, fan-in fan-out flows, contextual routing, etc.";}i:2;i:2087;}i:89;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2166;}i:90;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2166;}i:91;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2166;}i:92;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2166;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" Flume can be scaled horizontally.";}i:2;i:2170;}i:94;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2204;}i:95;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2204;}i:96;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:2204;}i:97;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2206;}i:98;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:39:"Why we need flume in hadoop eco-system?";i:1;i:2;i:2;i:2206;}i:2;i:2206;}i:99;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:2206;}i:100;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2206;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"As we know, ";}i:2;i:2259;}i:102;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2271;}i:103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"Hadoop File System Shell/";}i:2;i:2273;}i:104;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:2298;}i:105;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2301;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:" provides put functions to upload data into HDFS. But it suffers from the following drawbacks";}i:2;i:2303;}i:107;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2396;}i:108;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2396;}i:109;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2396;}i:110;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2396;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:229:"  Using put, we can transfer only one file at a time while the data generators generate data at a much higher rate. Since the analysis made on older data is less accurate, we need to have a solution to transfer data in real time.";}i:2;i:2400;}i:112;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2629;}i:113;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2629;}i:114;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2629;}i:115;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2629;}i:116;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:172:" If we use put command, the data is needed to be packaged and should be ready for the upload. Since the web servers generate data continuously, it is a very difficult task.";}i:2;i:2633;}i:117;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2805;}i:118;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2805;}i:119;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:2805;}i:120;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2807;}i:121;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Problem with HDFS";i:1;i:3;i:2;i:2807;}i:2;i:2807;}i:122;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2807;}i:123;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2807;}i:124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:308:"In HDFS, the file exists as a directory entry and the length of the file will be considered as zero till it is closed. For example, if a source is writing data into HDFS and the network was interrupted in the middle of the operation (without closing the file), then the data written in the file will be lost.";}i:2;i:2836;}i:125;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3144;}i:126;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3144;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:"Therefore we need a reliable, configurable, and maintainable system to transfer the log data into HDFS.";}i:2;i:3146;}i:128;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3249;}i:129;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3249;}i:130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:244:"Note − In POSIX file system, whenever we are accessing a file (say performing write operation), other programs can still read this file (at least the saved portion of the file). This is because the file exists on the disc before it is closed.";}i:2;i:3251;}i:131;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3495;}i:132;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3497;}i:133;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Flume Architecture";i:1;i:2;i:2;i:3497;}i:2;i:3497;}i:134;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3497;}i:135;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3497;}i:136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"Flume has three layers :";}i:2;i:3529;}i:137;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3553;}i:138;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:3553;}i:139;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3553;}i:140;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3553;}i:141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:3557;}i:142;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3558;}i:143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"Agent";}i:2;i:3560;}i:144;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3565;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:3567;}i:146;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:3568;}i:147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:152:" An agent is an independent process (JVM) in Flume. It collects data from clients or other agents and sends them to the next destination(sink or agent).";}i:2;i:3570;}i:148;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3722;}i:149;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3722;}i:150;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3722;}i:151;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3722;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:3726;}i:153;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3727;}i:154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Collector";}i:2;i:3729;}i:155;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3738;}i:156;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:3740;}i:157;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:3741;}i:158;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" Collector can combine data from one or many agents, and send it to storage";}i:2;i:3743;}i:159;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3818;}i:160;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3818;}i:161;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3818;}i:162;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3818;}i:163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:3822;}i:164;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3823;}i:165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Storage";}i:2;i:3825;}i:166;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3832;}i:167;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:3834;}i:168;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:3835;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" Storage can be a file, hdfs, Hive, HBase, etc.";}i:2;i:3837;}i:170;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3884;}i:171;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3884;}i:172;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:3884;}i:173;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3886;}i:174;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Flume-Agent";i:1;i:3;i:2;i:3886;}i:2;i:3886;}i:175;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3886;}i:176;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3886;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"An agent is an independent daemon process (JVM) in Flume. It receives the data (";}i:2;i:3909;}i:178;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3989;}i:179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"events";}i:2;i:3991;}i:180;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3997;}i:181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:") from clients(aka. ";}i:2;i:3999;}i:182;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4019;}i:183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"sources";}i:2;i:4021;}i:184;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4028;}i:185;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:") or other agents and forwards it to its next destination (";}i:2;i:4030;}i:186;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4089;}i:187;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"sinks";}i:2;i:4091;}i:188;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4096;}i:189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" or agent) via ";}i:2;i:4098;}i:190;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4113;}i:191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"channels";}i:2;i:4115;}i:192;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4123;}i:193;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:". Flume may have more than one agent. In one agent, you have the following key components:";}i:2;i:4125;}i:194;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4216;}i:195;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:4216;}i:196;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4216;}i:197;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4216;}i:198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4220;}i:199;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4221;}i:200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"Source";}i:2;i:4223;}i:201;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4229;}i:202;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4231;}i:203;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:4232;}i:204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:318:" A source is the component of an Agent which receives data from the data generators and transfers it to one or more channels in the form of Flume events. Apache Flume supports several types of sources and each source receives events from a specified data generator. (e.g. Avro source, Thrift source, twitter 1% source)";}i:2;i:4234;}i:205;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4552;}i:206;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4552;}i:207;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4552;}i:208;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4552;}i:209;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4556;}i:210;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4557;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Channel";}i:2;i:4559;}i:212;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4566;}i:213;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4568;}i:214;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:4569;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:336:" A channel is a transient store which receives the events from the source and buffers them till they are consumed by sinks. It acts as a bridge between the sources and the sinks. These channels are fully transactional and they can work with any number of sources and sinks. (e.g. JDBC channel, File system channel, Memory channel, etc.)";}i:2;i:4571;}i:216;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4907;}i:217;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4907;}i:218;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4907;}i:219;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4907;}i:220;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4911;}i:221;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4912;}i:222;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"Sink";}i:2;i:4914;}i:223;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4918;}i:224;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4920;}i:225;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:4921;}i:226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:243:" A sink stores the data into centralized stores like HBase and HDFS. It consumes the data (events) from the channels and delivers it to the destination. The destination of the sink might be another agent or the central stores. (e.g. HDFS sink)";}i:2;i:4923;}i:227;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5166;}i:228;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5166;}i:229;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:5166;}i:230;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5166;}i:231;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"The data in flume is represented as ";}i:2;i:5168;}i:232;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:5204;}i:233;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"flume event";}i:2;i:5206;}i:234;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:5217;}i:235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:414:", it contains a body and a set of headers. The body of the event is a byte array that usually is the payload that Flume is transporting. The headers are represented as a map with string keys and string values. Headers are not meant to transfer data, but for routing purposes and to keep track of priority, the severity of events being sent, etc. The headers can be used to add event IDs or UUIDs to events as well.";}i:2;i:5219;}i:236;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5633;}i:237;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5636;}i:238;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:36:"Additional Components of Flume agent";i:1;i:3;i:2;i:5636;}i:2;i:5636;}i:239;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5636;}i:240;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5636;}i:241;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:223:"What we have discussed above are the primitive components of the agent. In addition to this, we have a few more components that play a vital role in transferring the events from the data generator to the centralized stores.";}i:2;i:5684;}i:242;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5907;}i:243;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5909;}i:244;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Interceptor";i:1;i:4;i:2;i:5909;}i:2;i:5909;}i:245;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:5909;}i:246;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5909;}i:247;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:101:"Interceptors are used to alter/inspect flume events which are transferred between source and channel.";}i:2;i:5929;}i:248;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6030;}i:249;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6032;}i:250;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Channel Selectors";i:1;i:4;i:2;i:6032;}i:2;i:6032;}i:251;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:6032;}i:252;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6032;}i:253;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:149:"These are used to determine which channel is to be opted to transfer the data in case of multiple channels. There are two types of channel selectors ";}i:2;i:6059;}i:254;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6209;}i:255;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:6209;}i:256;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6209;}i:257;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6209;}i:258;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:6213;}i:259;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6214;}i:260;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"Default channel selectors";}i:2;i:6216;}i:261;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:6241;}i:262;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:" − These are also known as replicating channel selectors they replicate all the events in each channel.";}i:2;i:6243;}i:263;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6348;}i:264;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6348;}i:265;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6348;}i:266;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6348;}i:267;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:6352;}i:268;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6353;}i:269;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"Multiplexing channel selectors";}i:2;i:6355;}i:270;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:6385;}i:271;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:" − These decides the channel to send an event based on the address in the header of that event.";}i:2;i:6387;}i:272;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6484;}i:273;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6484;}i:274;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:6484;}i:275;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6486;}i:276;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"Sink Processors";i:1;i:4;i:2;i:6486;}i:2;i:6486;}i:277;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:6486;}i:278;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6486;}i:279;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:192:"These are used to invoke a particular sink from the selected group of sinks. These are used to create failover paths for your sinks or load balance events across multiple sinks from a channel.";}i:2;i:6511;}i:280;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6703;}i:281;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6705;}i:282;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"Flume Data flow";i:1;i:2;i:2;i:6705;}i:2;i:6705;}i:283;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:6705;}i:284;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6705;}i:285;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"There are three key steps in flume data flow mechanism:";}i:2;i:6734;}i:286;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6790;}i:287;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:6790;}i:288;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6790;}i:289;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6790;}i:290;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:851:" Generally, events and log data are generated by the log servers and these servers have Flume agents running on them. These agents receive data from the data generators. Inside an agent, sources write the data into channels using channel processors, interceptors and selectors. Each and every source has its own channel processor, which takes the task given by the source and then passes that task or events to one or more interceptors. Interceptors read the event and modify or drop the event based on some criteria like regex. We can have multiple interceptors which are called in the order in which they are defined. This can be called a chain-of-responsibility design pattern. Then we pass that list of events generated by interceptor chain to channel selector. The selectors decide which channels attached to this source each event be written to.";}i:2;i:6794;}i:291;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7645;}i:292;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7645;}i:293;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7645;}i:294;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7645;}i:295;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:" The data in these agents will be collected by an intermediate node known as Collector. Just like agents, there can be multiple collectors in Flume.";}i:2;i:7649;}i:296;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7797;}i:297;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7797;}i:298;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7797;}i:299;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7797;}i:300;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:175:" Finally, the data from all these collectors will be aggregated and pushed to a centralized store such as HBase or HDFS. The following diagram explains the data flow in Flume.";}i:2;i:7801;}i:301;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7976;}i:302;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7976;}i:303;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:7976;}i:304;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7976;}i:305;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:67:":employes:pengfei.liu:data_science:flume:flume_general_dataflow.png";i:1;s:0:"";i:2;N;i:3;s:3:"400";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:7979;}i:306;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8055;}i:307;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8055;}i:308;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:179:"For example, suppose we have some web services generate events and log data. To upload these data into HDFS. First, we need to install and configure Flume agents on these servers.";}i:2;i:8057;}i:309;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8237;}i:310;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:8237;}i:311;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8237;}i:312;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8237;}i:313;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:202:" Flume agents running on the web services servers receive the data from the data generators. The data generators can be internal like apache log files or external like facebook and Twitter web services.";}i:2;i:8241;}i:314;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8443;}i:315;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8443;}i:316;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8443;}i:317;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8443;}i:318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:" The data in these agents will be collected by an intermediate node known as Collector. Just like agents, there can be multiple collectors in Flume.";}i:2;i:8447;}i:319;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8595;}i:320;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8595;}i:321;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8595;}i:322;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8595;}i:323;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:" At last data from all collectors will be aggregated and pushed to a centralized store such as HBase or HDFS.";}i:2;i:8599;}i:324;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8708;}i:325;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8708;}i:326;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:8708;}i:327;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8710;}i:328;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"Failure Handling";i:1;i:3;i:2;i:8710;}i:2;i:8710;}i:329;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:8710;}i:330;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8710;}i:331;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:409:"In Flume, for each event, two transactions take place: one at the sender and one at the receiver. The sender sends events to the receiver. Soon after receiving the data, the receiver commits its own transaction and sends a “received” signal to the sender. After receiving the signal, the sender commits its transaction. (Sender will not commit its transaction till it receives a signal from the receiver.)";}i:2;i:8738;}i:332;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9147;}i:333;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9149;}i:334;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Different data flow";i:1;i:3;i:2;i:9149;}i:2;i:9149;}i:335;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:9149;}i:336;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9180;}i:337;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Multi-hop Flow";i:1;i:4;i:2;i:9180;}i:2;i:9180;}i:338;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:9180;}i:339;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9180;}i:340;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:"An event may travel through more than one agent before reaching final destination is called as Multi-hop Flow. ";}i:2;i:9204;}i:341;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9315;}i:342;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9315;}i:343;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:54:":employes:pengfei.liu:data_science:flume:multi_hop.png";i:1;s:0:"";i:2;N;i:3;s:3:"400";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:9317;}i:344;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9380;}i:345;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9382;}i:346;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Fan-out Flow";i:1;i:4;i:2;i:9382;}i:2;i:9382;}i:347;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:9382;}i:348;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9382;}i:349;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:95:"The dataflow from one source to multiple channels is known as fan-out flow. It is of two types:";}i:2;i:9404;}i:350;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9499;}i:351;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:9499;}i:352;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9499;}i:353;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9499;}i:354;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:" Replicating − The data flow where the data will be replicated in all the configured channels.";}i:2;i:9503;}i:355;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9599;}i:356;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9599;}i:357;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9599;}i:358;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9599;}i:359;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:128:" Multiplexing − The data flow where the data will be sent to a selected channel which is mentioned in the header of the event.";}i:2;i:9603;}i:360;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9731;}i:361;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9731;}i:362;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:9731;}i:363;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9731;}i:364;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:52:":employes:pengfei.liu:data_science:flume:fan-out.png";i:1;s:0:"";i:2;N;i:3;s:3:"400";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:9733;}i:365;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9794;}i:366;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9796;}i:367;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Fan-in Flow";i:1;i:4;i:2;i:9796;}i:2;i:9796;}i:368;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:9796;}i:369;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9796;}i:370;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:"The data flow in which the data will be transferred from many sources to one channel is known as fan-in flow.";}i:2;i:9817;}i:371;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9926;}i:372;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9926;}i:373;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:51:":employes:pengfei.liu:data_science:flume:fan-in.png";i:1;s:0:"";i:2;N;i:3;s:3:"400";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:9928;}i:374;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9988;}i:375;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9992;}i:376;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:9992;}}