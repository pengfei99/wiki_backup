a:264:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"The saga pattern";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:33;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Context";i:1;i:2;i:2;i:33;}i:2;i:33;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:33;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"You have applied the ";}i:2;i:53;}i:8;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:74:"employes:pengfei.liu:system_architecture:microservice:database_per_service";i:1;s:32:"The Database per Service pattern";}i:2;i:74;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:470:". Each service has its own database. Some business transactions, however, span multiple services, so you need a mechanism to ensure data consistency across services. For example, let's imagine that you are building an e-commerce store where customers have a credit limit. The application must ensure that a new order will not exceed the customer's credit limit. Orders and Customers are in different databases, the application cannot simply use a local ACID transaction.";}i:2;i:185;}i:10;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:655;}i:11;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:657;}i:12;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Solution";i:1;i:2;i:2;i:657;}i:2;i:657;}i:13;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:657;}i:14;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:657;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:447:"Implement each business transaction that spans multiple services as a saga. A saga is a sequence of local transactions. Each local transaction updates the database and publishes a message or event to trigger the next local transaction in the saga. If a local transaction fails because it violates a business rule then the saga executes a series of compensating transactions that undo the changes that were made by the preceding local transactions.";}i:2;i:679;}i:16;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1126;}i:17;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1128;}i:18;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Saga coordination";i:1;i:3;i:2;i:1128;}i:2;i:1128;}i:19;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1128;}i:20;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1128;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"There are two ways of saga coordination:";}i:2;i:1157;}i:22;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1197;}i:23;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1197;}i:24;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1197;}i:25;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1197;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:" Choreography: each local transaction publishes the domain events that trigger local transactions in other events.";}i:2;i:1201;}i:27;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1315;}i:28;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1315;}i:29;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1315;}i:30;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1315;}i:31;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:" Orchestration: an orchestrator (object) tells the participants what local transactions to execute.";}i:2;i:1319;}i:32;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1418;}i:33;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1418;}i:34;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1418;}i:35;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1420;}i:36;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Example";i:1;i:4;i:2;i:1420;}i:2;i:1420;}i:37;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:1420;}i:38;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1420;}i:39;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1437;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Choreography-based saga";}i:2;i:1439;}i:41;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1462;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:"
Let's reuse the e-commerce store example, if we use the choreography-based saga, to create an order, the system needs to do the following steps:";}i:2;i:1464;}i:43;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1609;}i:44;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:1609;}i:45;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1609;}i:46;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1609;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" The ";}i:2;i:1613;}i:48;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1618;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"order Service";}i:2;i:1620;}i:50;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1633;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:" creates an Order in a pending state and publishes an ";}i:2;i:1635;}i:52;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1689;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"OrderCreated";}i:2;i:1691;}i:54;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1703;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" event.";}i:2;i:1705;}i:56;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1712;}i:57;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1712;}i:58;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1712;}i:59;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1712;}i:60;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" The ";}i:2;i:1716;}i:61;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1721;}i:62;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"Customer Service";}i:2;i:1723;}i:63;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1739;}i:64;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" receives the ";}i:2;i:1741;}i:65;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1755;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"OrderCreated";}i:2;i:1757;}i:67;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1769;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:" event and attempts to reserve credit for that order. Based on the user credit, It publishes either a ";}i:2;i:1771;}i:69;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1873;}i:70;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Credit Reserved";}i:2;i:1875;}i:71;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1890;}i:72;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" event or a ";}i:2;i:1892;}i:73;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1904;}i:74;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"CreditLimitExceeded";}i:2;i:1906;}i:75;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1925;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" event.";}i:2;i:1927;}i:77;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1934;}i:78;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1934;}i:79;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1934;}i:80;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1934;}i:81;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" The ";}i:2;i:1938;}i:82;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1943;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"order Service";}i:2;i:1945;}i:84;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1958;}i:85;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:" receives the event and changes the state of the order to either approved or canceled.";}i:2;i:1960;}i:86;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2046;}i:87;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2046;}i:88;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:2046;}i:89;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2046;}i:90;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:"If we use the orchestration-based saga, the system needs to do the following steps:";}i:2;i:2048;}i:91;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2131;}i:92;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:2131;}i:93;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2131;}i:94;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2131;}i:95;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" The ";}i:2;i:2135;}i:96;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2140;}i:97;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Order Service";}i:2;i:2142;}i:98;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2155;}i:99;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" creates an Order in a pending state and creates a CreateOrderSaga (object)";}i:2;i:2157;}i:100;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2232;}i:101;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2232;}i:102;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2232;}i:103;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2232;}i:104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" The ";}i:2;i:2236;}i:105;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2241;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"CreateOrderSaga";}i:2;i:2243;}i:107;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2258;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" sends a ";}i:2;i:2260;}i:109;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2269;}i:110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"ReserveCredit";}i:2;i:2271;}i:111;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2284;}i:112;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" command to the ";}i:2;i:2286;}i:113;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2302;}i:114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"Customer Service";}i:2;i:2304;}i:115;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2320;}i:116;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2322;}i:117;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2322;}i:118;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2322;}i:119;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2322;}i:120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" The ";}i:2;i:2326;}i:121;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2331;}i:122;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"Customer Service";}i:2;i:2333;}i:123;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2349;}i:124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:" attempts to reserve credit for that Order and sends back a reply";}i:2;i:2351;}i:125;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2416;}i:126;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2416;}i:127;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2416;}i:128;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2416;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" The ";}i:2;i:2420;}i:130;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2425;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"CreateOrderSaga";}i:2;i:2427;}i:132;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2442;}i:133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" receives the reply and sends either an ";}i:2;i:2444;}i:134;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2484;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"ApproveOrder";}i:2;i:2486;}i:136;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2498;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:2500;}i:138;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2504;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"RejectOrder";}i:2;i:2506;}i:140;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2517;}i:141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" command to the ";}i:2;i:2519;}i:142;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2535;}i:143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Order Service";}i:2;i:2537;}i:144;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2550;}i:145;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2552;}i:146;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2552;}i:147;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2552;}i:148;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2552;}i:149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" The ";}i:2;i:2556;}i:150;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2561;}i:151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Order Service";}i:2;i:2563;}i:152;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2576;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:" changes the state of the order to either approved or canceled";}i:2;i:2578;}i:154;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2640;}i:155;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2640;}i:156;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:2640;}i:157;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2642;}i:158;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Conclusion";i:1;i:2;i:2;i:2642;}i:2;i:2642;}i:159;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:2642;}i:160;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2642;}i:161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"This pattern has the following benefits:";}i:2;i:2666;}i:162;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2706;}i:163;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2706;}i:164;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2706;}i:165;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2706;}i:166;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:" It enables an application to maintain data consistency across multiple services without using distributed transactions";}i:2;i:2710;}i:167;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2829;}i:168;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2829;}i:169;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:2829;}i:170;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2829;}i:171;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"It has the following drawbacks:";}i:2;i:2831;}i:172;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2862;}i:173;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2862;}i:174;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2862;}i:175;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2862;}i:176;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:155:" The programming model is more complex. For example, a developer must design compensating transactions that explicitly undo changes made earlier in a saga.";}i:2;i:2866;}i:177;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3021;}i:178;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3021;}i:179;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:3021;}i:180;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3021;}i:181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:319:"There are also the following issues to address:
In order to be reliable, a service must atomically update its database and publish a message/event. It cannot use the traditional mechanism of a distributed transaction that spans the database and the message broker. Instead, it must use one of the patterns listed below.";}i:2;i:3023;}i:182;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3342;}i:183;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3344;}i:184;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"Related patterns";i:1;i:3;i:2;i:3344;}i:2;i:3344;}i:185;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3344;}i:186;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3344;}i:187;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:74:"employes:pengfei.liu:system_architecture:microservice:database_per_service";i:1;s:32:"The Database per Service pattern";}i:2;i:3372;}i:188;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:" creates the need for this pattern
The following patterns are ways to atomically update state and publish messages/events:";}i:2;i:3483;}i:189;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3605;}i:190;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:3605;}i:191;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3605;}i:192;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3605;}i:193;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:3609;}i:194;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:68:"employes:pengfei.liu:system_architecture:microservice:event_sourcing";i:1;s:14:"Event sourcing";}i:2;i:3610;}i:195;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3697;}i:196;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3697;}i:197;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3697;}i:198;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3697;}i:199;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:3701;}i:200;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:72:"employes:pengfei.liu:system_architecture:microservice:application_events";i:1;s:28:"Applicaiton publishes events";}i:2;i:3702;}i:201;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3807;}i:202;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3807;}i:203;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:3807;}i:204;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3807;}i:205;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"A choreography-based saga can publish events using ";}i:2;i:3808;}i:206;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3859;}i:207;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Aggregates";}i:2;i:3861;}i:208;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3871;}i:209;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:3873;}i:210;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3878;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"Domain Events";}i:2;i:3880;}i:212;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3893;}i:213;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:3895;}i:214;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3896;}i:215;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3898;}i:216;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Code Example";i:1;i:2;i:2;i:3898;}i:2;i:3898;}i:217;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3898;}i:218;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3898;}i:219;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:"The following examples implement the customers and orders example in different ways:";}i:2;i:3924;}i:220;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4009;}i:221;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:4009;}i:222;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4009;}i:223;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4009;}i:224;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" Choreography-based saga(";}i:2;i:4013;}i:225;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:78:"https://github.com/eventuate-tram/eventuate-tram-examples-customers-and-orders";i:1;N;}i:2;i:4038;}i:226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:") where the services publish domain events using the ";}i:2;i:4116;}i:227;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4169;}i:228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"Eventuate Tram framework";}i:2;i:4171;}i:229;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4195;}i:230;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:" (";}i:2;i:4197;}i:231;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:53:"https://github.com/eventuate-tram/eventuate-tram-core";i:1;N;}i:2;i:4199;}i:232;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:")";}i:2;i:4252;}i:233;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4253;}i:234;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4253;}i:235;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4253;}i:236;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4253;}i:237;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" Orchestration-based saga(";}i:2;i:4257;}i:238;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:84:"https://github.com/eventuate-tram/eventuate-tram-sagas-examples-customers-and-orders";i:1;N;}i:2;i:4283;}i:239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:") where the Order Service uses a saga orchestrator implemented using the ";}i:2;i:4367;}i:240;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4440;}i:241;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"Eventuate Tram Sagas framework";}i:2;i:4442;}i:242;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4472;}i:243;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:" (";}i:2;i:4474;}i:244;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:54:"https://github.com/eventuate-tram/eventuate-tram-sagas";i:1;N;}i:2;i:4476;}i:245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:")";}i:2;i:4530;}i:246;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4531;}i:247;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4531;}i:248;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4531;}i:249;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4531;}i:250;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" Choreography and event sourcing-based saga(";}i:2;i:4535;}i:251;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:82:"https://github.com/eventuate-examples/eventuate-examples-java-customers-and-orders";i:1;N;}i:2;i:4579;}i:252;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:") where the services publish domain events using the ";}i:2;i:4661;}i:253;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4714;}i:254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"Eventuate event sourcing framework";}i:2;i:4716;}i:255;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4750;}i:256;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:" (";}i:2;i:4752;}i:257;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:20:"http://eventuate.io/";i:1;N;}i:2;i:4754;}i:258;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:")";}i:2;i:4774;}i:259;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4775;}i:260;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4775;}i:261;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:4775;}i:262;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4775;}i:263;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:4775;}}