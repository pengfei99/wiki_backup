
<h1 class="sectionedit1" id="java_io体系的学习总结">java IO体系的学习总结</h1>
<div class="level1">

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;java IO\u4f53\u7cfb\u7684\u5b66\u4e60\u603b\u7ed3&quot;,&quot;hid&quot;:&quot;java_io\u4f53\u7cfb\u7684\u5b66\u4e60\u603b\u7ed3&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:1,&quot;range&quot;:&quot;1-46&quot;} -->
<h2 class="sectionedit2" id="java_io流的概念_分类_类图">1.Java Io流的概念，分类，类图。</h2>
<div class="level2">

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1.Java Io\u6d41\u7684\u6982\u5ff5\uff0c\u5206\u7c7b\uff0c\u7c7b\u56fe\u3002&quot;,&quot;hid&quot;:&quot;java_io\u6d41\u7684\u6982\u5ff5_\u5206\u7c7b_\u7c7b\u56fe&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:2,&quot;range&quot;:&quot;47-102&quot;} -->
<h3 class="sectionedit3" id="java_io流的概念">1.1 Java Io流的概念</h3>
<div class="level3">

<p>
java的io是实现输入和输出的基础，可以方便的实现数据的输入和输出操作。在java中把不同的输入/输出源（键盘，文件，网络连接等）抽象表述为“流”(stream)。通过流的形式允许java程序使用相同的方式来访问不同的输入/输出源。stram是从起源（source）到接收的（sink）的有序数据。
</p>

<p>
注：java把所有的传统的流类型都放到在java io包下，用于实现输入和输出功能。
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1.1 Java Io\u6d41\u7684\u6982\u5ff5&quot;,&quot;hid&quot;:&quot;java_io\u6d41\u7684\u6982\u5ff5&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:3,&quot;range&quot;:&quot;103-617&quot;} -->
<h3 class="sectionedit4" id="io流的分类">1.2 Io流的分类：</h3>
<div class="level3">

<p>
按照不同的分类方式，可以把流分为不同的类型。常用的分类有三种：
</p>

</div>

<h4 id="按照流的流向分_可以分为输入流和输出流">1.2.1 按照流的流向分，可以分为输入流和输出流。</h4>
<div class="level4">
<ul>
<li class="level1"><div class="li"> 输入流： 只能从中读取数据，而不能向其写入数据。</div>
</li>
<li class="level1"><div class="li"> 输出流：只能向其写入数据，而不能向其读取数据。</div>
</li>
</ul>

<p>
此处的输入,输出涉及一个方向的问题，对于如图15.1所示的数据流向，数据从内存到硬盘，通常称为输出流——也就是说，这里的输入，输出都是从程序运行所在的内存的角度来划分的。
</p>

<p>
注：如果从硬盘的角度来考虑，图15.1所示的数据流应该是输入流才对；但划分输入/输出流时是从程序运行所在的内存的角度来考虑的，因此如图15.1所在的流时输出流。而不是输入流。
</p>

<p>
对于如图15.2所示的数据流向，数据从服务器通过网络流向客户端，在这种情况下,Server端的内存负责将数据输出到网络里，因此Server端的程序使用输出流；Client端的内存负责从网络中读取数据，因此Client端的程序应该使用输入流。
</p>

<p>
<a href="/lib/exe/detail.php?id=employes%3Apengfei.liu%3Ajava%3Aall_io%3Aio_learning&amp;media=employes:pengfei.liu:java:all_io:io_stream_direction.png" class="media" title="employes:pengfei.liu:java:all_io:io_stream_direction.png"><img src="/lib/exe/fetch.php?w=600&amp;tok=1aea92&amp;media=employes:pengfei.liu:java:all_io:io_stream_direction.png" class="media" alt="" width="600" /></a>
</p>

</div>

<h4 id="按照操作单元划分_可以划分为字节流_byte_stream_和字符流_character_stream">1.2.2 按照操作单元划分，可以划分为字节流(byte stream)和字符流(character stream)</h4>
<div class="level4">

<p>
字节流和字符流的用法几乎完成全一样，区别在于字节流和字符流所操作的数据单元不同，字节流操作的单元是数据单元是8位的字节，字符流操作的是数据单元为16位的字符。
</p>

<p>
字节流主要是由InputStream和outPutStream作为基类，而字符流则主要有Reader和Writer作为基类。
</p>

<p>
Note that Input/OutPutStream uses byte as the basic data entity. Reader/Writer uses char as the basic data entity.
</p>

<p>
<a href="/lib/exe/detail.php?id=employes%3Apengfei.liu%3Ajava%3Aall_io%3Aio_learning&amp;media=employes:pengfei.liu:java:all_io:io_stream_classification1.png" class="media" title="employes:pengfei.liu:java:all_io:io_stream_classification1.png"><img src="/lib/exe/fetch.php?w=600&amp;tok=6f06be&amp;media=employes:pengfei.liu:java:all_io:io_stream_classification1.png" class="media" alt="" width="600" /></a>
</p>

</div>

<h4 id="按照流的角色划分为节点流和处理流">1.2.3 按照流的角色划分为节点流和处理流。</h4>
<div class="level4">

<p>
可以从/向一个特定的IO设备（如磁盘，网络）读/写数据的流，称为节点流。节点流也被称为低级流。图15.3显示了节点流的示意图。从图15.3中可以看出，当使用节点流进行输入和输出时，程序直接连接到实际的数据源，和实际的输入/输出节点连接。
</p>

<p>
处理流则用于对一个已存在的流进行连接和封装，通过封装后的流来实现数据的读/写功能。处理流也被称为高级流。当使用处理流进行输入/输出时，程序并不会直接连接到实际的数据源，没有和实际的输入和输出节点连接。使用处理流的一个明显的好处是，只要使用相同的处理流，程序就可以采用完全相同的输入/输出代码来访问不同的数据源，随着处理流所包装的节点流的变化，程序实际所访问的数据源也相应的发生变化。
</p>

<p>
<a href="/lib/exe/detail.php?id=employes%3Apengfei.liu%3Ajava%3Aall_io%3Aio_learning&amp;media=employes:pengfei.liu:java:all_io:io_stream_classification2.png" class="media" title="employes:pengfei.liu:java:all_io:io_stream_classification2.png"><img src="/lib/exe/fetch.php?w=600&amp;tok=1c7bae&amp;media=employes:pengfei.liu:java:all_io:io_stream_classification2.png" class="media" alt="" width="600" /></a>
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1.2 Io\u6d41\u7684\u5206\u7c7b\uff1a&quot;,&quot;hid&quot;:&quot;io\u6d41\u7684\u5206\u7c7b&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:4,&quot;range&quot;:&quot;618-3527&quot;} -->
<h3 class="sectionedit5" id="流的原理浅析和常用的流的分类表">1.3 流的原理浅析和常用的流的分类表：</h3>
<div class="level3">

</div>

<h4 id="流的原理浅析">1.3.1 流的原理浅析:</h4>
<div class="level4">

<p>
java Io流共涉及40多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java Io流的40多个类都是从如下4个抽象类基类中派生出来的。
</p>

<p>
InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。
OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。
 
对于InputStream和Reader而言，它们把输入设备抽象成为一个”水管“，这个水管的每个“水滴”依次排列，如图15.5所示：
<a href="/lib/exe/detail.php?id=employes%3Apengfei.liu%3Ajava%3Aall_io%3Aio_learning&amp;media=employes:pengfei.liu:java:all_io:io_stream_theory.png" class="media" title="employes:pengfei.liu:java:all_io:io_stream_theory.png"><img src="/lib/exe/fetch.php?w=600&amp;tok=005771&amp;media=employes:pengfei.liu:java:all_io:io_stream_theory.png" class="media" alt="" width="600" /></a>
</p>

<p>
从图15.5可以看出，字节流和字符流的处理方式其实很相似，只是它们处理的输入/输出单位不同而已。输入流使用隐式的记录指针来表示当前正准备从哪个“水滴”开始读取，每当程序从InputStream或者Reader里面取出一个或者多个“水滴”后，记录指针自定向后移动；除此之外，InputStream和Reader里面都提供了一些方法来控制记录指针的移动。
</p>

<p>
对于OutputStream和Writer而言，它们同样把输出设备抽象成一个”水管“，只是这个水管里面没有任何水滴.
</p>

<p>
Java的处理流模型则体现了Java输入和输出流设计的灵活性。处理流的功能主要体现在以下两个方面。
</p>
<ul>
<li class="level1"><div class="li"> 性能的提高：主要以增加缓冲的方式来提供输入和输出的效率。</div>
</li>
<li class="level1"><div class="li"> 操作的便捷：处理流可能提供了一系列便捷的方法来一次输入和输出大批量的内容，而不是输入/输出一个或者多个“水滴”。</div>
</li>
</ul>

<p>
1.3.2 java输入/输出流体系中常用的流的分类表
</p>
<div class="table sectionedit6"><table class="inline">
	<thead>
	<tr class="row0">
		<th class="col0 leftalign">分类	</th><th class="col1">字节输入流</th><th class="col2 rightalign">	字节输出流</th><th class="col3 rightalign">	字符输入流</th><th class="col4 rightalign">	字符输出流</th>
	</tr>
	</thead>
	<tr class="row1">
		<td class="col0">抽象基类</td><td class="col1 leftalign">InputStream	</td><td class="col2 leftalign">OutputStream	</td><td class="col3">Reader</td><td class="col4"> Writer</td>
	</tr>
	<tr class="row2">
		<td class="col0">访问文件</td><td class="col1">FileInputStream</td><td class="col2">FileOutputStream</td><td class="col3">FileReader</td><td class="col4">FileWriter</td>
	</tr>
	<tr class="row3">
		<td class="col0">访问数组</td><td class="col1">ByteArrayInputStream</td><td class="col2">ByteArrayOutputStream</td><td class="col3">CharArrayReader</td><td class="col4">CharArrayWriter</td>
	</tr>
	<tr class="row4">
		<td class="col0">访问管道</td><td class="col1">PipedInputStream</td><td class="col2">PipedOutputStream</td><td class="col3">PipedReader</td><td class="col4">PipedWriter</td>
	</tr>
	<tr class="row5">
		<td class="col0">访问字符串</td><td class="col1"> null </td><td class="col2"> null </td><td class="col3">StringReader</td><td class="col4 rightalign">	StringWriter</td>
	</tr>
	<tr class="row6">
		<td class="col0 leftalign">缓冲流	</td><td class="col1">BufferedInputStream</td><td class="col2">BufferedOutputStream</td><td class="col3">BufferedReader</td><td class="col4">BufferedWriter</td>
	</tr>
	<tr class="row7">
		<td class="col0">转换流</td><td class="col1">null</td><td class="col2">null</td><td class="col3">InputStreamReader</td><td class="col4">OutputStreamWriter</td>
	</tr>
	<tr class="row8">
		<td class="col0">对象流</td><td class="col1">ObjectInputStream</td><td class="col2">ObjectOutputStream</td><td class="col3">null</td><td class="col4">null</td>
	</tr>
	<tr class="row9">
		<td class="col0">抽象基类</td><td class="col1">FilterInputStream</td><td class="col2">FilterOutputStream</td><td class="col3">FilterReader</td><td class="col4">FilterWriter</td>
	</tr>
	<tr class="row10">
		<td class="col0">打印流</td><td class="col1">null</td><td class="col2">PrintStream</td><td class="col3">null</td><td class="col4">PrintWriter</td>
	</tr>
	<tr class="row11">
		<td class="col0">推回输入流</td><td class="col1">PushbackInputStream</td><td class="col2">null</td><td class="col3">PushbackReader</td><td class="col4">null</td>
	</tr>
	<tr class="row12">
		<td class="col0">特殊流</td><td class="col1">DataInputStream</td><td class="col2">DataOutputStream</td><td class="col3">null</td><td class="col4">null</td>
	</tr>
</table></div>
<!-- EDIT{&quot;target&quot;:&quot;table&quot;,&quot;name&quot;:&quot;&quot;,&quot;hid&quot;:&quot;table&quot;,&quot;secid&quot;:6,&quot;range&quot;:&quot;5324-6197&quot;} -->
</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1.3 \u6d41\u7684\u539f\u7406\u6d45\u6790\u548c\u5e38\u7528\u7684\u6d41\u7684\u5206\u7c7b\u8868\uff1a&quot;,&quot;hid&quot;:&quot;\u6d41\u7684\u539f\u7406\u6d45\u6790\u548c\u5e38\u7528\u7684\u6d41\u7684\u5206\u7c7b\u8868&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:5,&quot;range&quot;:&quot;3528-6198&quot;} -->
<h2 class="sectionedit7" id="常用的io流的用法">2.常用的io流的用法</h2>
<div class="level2">

<p>
下面是整理的常用的Io流的特性及使用方法，只有清楚每个Io流的特性和方法。才能在不同的需求面前正确的选择对应的IO流进行开发。
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;2.\u5e38\u7528\u7684io\u6d41\u7684\u7528\u6cd5&quot;,&quot;hid&quot;:&quot;\u5e38\u7528\u7684io\u6d41\u7684\u7528\u6cd5&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:7,&quot;range&quot;:&quot;6199-6416&quot;} -->
<h3 class="sectionedit8" id="io体系的基类_inputstream_reader_outputstream_writer">2.1 Io体系的基类（InputStream/Reader，OutputStream/Writer）。</h3>
<div class="level3">

<p>
字节流和字符流的操作方式基本一致，只是操作的数据单元不同——字节流的操作单元是字节，字符流的操作单元是字符。所以字节流和字符流就整理在一起了。
</p>

</div>

<h4 id="inputstream_reader">2.1.1 InputStream/Reader</h4>
<div class="level4">

<p>
InputStream和Reader是所有输入流的抽象基类，本身并不能创建实例来执行输入，但它们将成为所有输入流的模板，所以它们的方法是所有输入流都可使用的方法。
</p>

<p>
<strong>在InputStream里面包含如下3个方法。</strong>
</p>
<ul>
<li class="level1"><div class="li"> int read(); 从输入流中读取单个字节（相当于从图15.5所示的水管中取出一滴水），返回所读取的字节数据（字节数据可直接转换为int类型）</div>
</li>
<li class="level1"><div class="li"> int read(byte[] b)从输入流中最多读取b.length个字节的数据，并将其存储在字节数组b中，返回实际读取的字节数。</div>
</li>
<li class="level1"><div class="li"> int read(byte[] b,int off,int len); 从输入流中最多读取len个字节的数据，并将其存储在数组b中，放入数组b中时，并不是从数组起点开始，而是从off位置开始，返回实际读取的字节数。</div>
</li>
</ul>

<p>
<strong>在Reader中包含如下3个方法。</strong>
</p>
<ul>
<li class="level1"><div class="li"> int read(); 从输入流中读取单个字符（相当于从图15.5所示的水管中取出一滴水），返回所读取的字符数据（字节数据可直接转换为int类型）。</div>
</li>
<li class="level1"><div class="li"> int read(char[] b)从输入流中最多读取b.length个字符的数据，并将其存储在字节数组b中，返回实际读取的字符数。</div>
</li>
<li class="level1"><div class="li"> int read(char[] b,int off,int len); 从输入流中最多读取len个字符的数据，并将其存储在数组b中，放入数组b中时，并不是从数组起点开始，而是从off位置开始，返回实际读取的字符数。</div>
</li>
</ul>

<p>
<strong>InputStream和Reader提供的一些移动指针的方法：</strong>
</p>
<ul>
<li class="level1"><div class="li"> void mark(int readAheadLimit); 在记录指针当前位置记录一个标记（mark）</div>
</li>
<li class="level1"><div class="li"> boolean markSupported(); 判断此输入流是否支持mark()操作，即是否支持记录标记。</div>
</li>
<li class="level1"><div class="li"> void reset(); 将此流的记录指针重新定位到上一次记录标记（mark）的位置。</div>
</li>
<li class="level1"><div class="li"> long skip(long n); 记录指针向前移动n个字节/字符。</div>
</li>
</ul>

</div>

<h4 id="outputstream和writer">2.1.2 OutputStream和Writer</h4>
<div class="level4">

<p>
OutputStream和Writer的用法也非常相似,两个流都提供了如下三个方法：
</p>
<ul>
<li class="level1"><div class="li"> void write(int c); 将指定的字节/字符输出到输出流中，其中c即可以代表字节，也可以代表字符。</div>
</li>
<li class="level1"><div class="li"> void write(byte[]/char[] buf); 将字节数组/字符数组中的数据输出到指定输出流中。</div>
</li>
<li class="level1"><div class="li"> void write(byte[]/char[] buf, int off,int len ); 将字节数组/字符数组中从off位置开始，长度为len的字节/字符输出到输出流中。</div>
</li>
</ul>

<p>
因为字符流直接以字符作为操作单位，所以Writer可以用字符串来代替字符数组，即以String对象作为参数。Writer里面还包含如下两个方法。
</p>
<ul>
<li class="level1"><div class="li"> void write(String str); 将str字符串里包含的字符输出到指定输出流中。</div>
</li>
<li class="level1"><div class="li"> void write (String str, int off, int len); 将str字符串里面从off位置开始，长度为len的字符输出到指定输出流中。</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;2.1 Io\u4f53\u7cfb\u7684\u57fa\u7c7b\uff08InputStream\/Reader\uff0cOutputStream\/Writer\uff09\u3002&quot;,&quot;hid&quot;:&quot;io\u4f53\u7cfb\u7684\u57fa\u7c7b_inputstream_reader_outputstream_writer&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:8,&quot;range&quot;:&quot;6417-9569&quot;} -->
<h3 class="sectionedit9" id="io体系的基类文件流的使用_fileinputstream_filereader_fileoutputstream_filewriter">2.2 Io体系的基类文件流的使用(FileInputStream/FileReader ，FileOutputStream/FileWriter)</h3>
<div class="level3">

<p>
前面说过InputStream和Reader都是抽象类，本身不能创建实例，但它们分别有一个用于读取文件的输入流：FileInputStream和FileReader，它们都是节点流, 会直接和指定文件关联。
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;2.2 Io\u4f53\u7cfb\u7684\u57fa\u7c7b\u6587\u4ef6\u6d41\u7684\u4f7f\u7528(FileInputStream\/FileReader \uff0cFileOutputStream\/FileWriter)&quot;,&quot;hid&quot;:&quot;io\u4f53\u7cfb\u7684\u57fa\u7c7b\u6587\u4ef6\u6d41\u7684\u4f7f\u7528_fileinputstream_filereader_fileoutputstream_filewriter&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:9,&quot;range&quot;:&quot;9570-9903&quot;} -->
<h3 class="sectionedit10" id="转换流的使用_inputstreamreader_outputstreamwriter">2.3 转换流的使用（InputStreamReader/OutputStreamWriter）</h3>
<div class="level3">

<p>
下面以获取键盘输入为例来介绍转换流的用法。java使用System.in代表输入。即键盘输入，但这个标准输入流是InputStream类的实例，使用不太方便，而且键盘输入内容都是文本内容，所以可以使用InputStreamReader将其包装成BufferedReader,利用BufferedReader的readLine()方法可以一次读取一行内容，如下代码所示:
</p>
<pre class="code java"><span class="kw1">public</span> <span class="kw1">class</span> InputStreamReaderTest <span class="br0">&#123;</span>
    <span class="kw1">public</span>  <span class="kw1">static</span> <span class="kw4">void</span> main<span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+string"><span class="kw3">String</span></a><span class="br0">&#91;</span><span class="br0">&#93;</span> args<span class="br0">&#41;</span><span class="kw1">throws</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+ioexception"><span class="kw3">IOException</span></a> <span class="br0">&#123;</span>
        <span class="kw1">try</span> <span class="br0">&#123;</span>
            <span class="co1">// 将System.in对象转化为Reader对象</span>
            <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+inputstreamreader"><span class="kw3">InputStreamReader</span></a> reader<span class="sy0">=</span><span class="kw1">new</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+inputstreamreader"><span class="kw3">InputStreamReader</span></a><span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+system"><span class="kw3">System</span></a>.<span class="me1">in</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="co1">//将普通的Reader包装成BufferedReader</span>
            <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+bufferedreader"><span class="kw3">BufferedReader</span></a> bufferedReader<span class="sy0">=</span><span class="kw1">new</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+bufferedreader"><span class="kw3">BufferedReader</span></a><span class="br0">&#40;</span>reader<span class="br0">&#41;</span><span class="sy0">;</span>
           <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+string"><span class="kw3">String</span></a> buffer<span class="sy0">=</span><span class="kw2">null</span><span class="sy0">;</span>
           <span class="kw1">while</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>buffer<span class="sy0">=</span>bufferedReader.<span class="me1">readLine</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">!=</span><span class="kw2">null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
            <span class="co1">// 如果读取到的字符串为“exit”,则程序退出</span>
               <span class="kw1">if</span><span class="br0">&#40;</span>buffer.<span class="me1">equals</span><span class="br0">&#40;</span><span class="st0">&quot;exit&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
                   <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+system"><span class="kw3">System</span></a>.<span class="me1">exit</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
               <span class="br0">&#125;</span>
               <span class="co1">//打印读取的内容</span>
               <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+system"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">print</span><span class="br0">&#40;</span><span class="st0">&quot;输入内容：&quot;</span><span class="sy0">+</span>buffer<span class="br0">&#41;</span><span class="sy0">;</span>
           <span class="br0">&#125;</span>
        <span class="br0">&#125;</span><span class="kw1">catch</span> <span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+ioexception"><span class="kw3">IOException</span></a> e<span class="br0">&#41;</span><span class="br0">&#123;</span>
            e.<span class="me1">printStackTrace</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span><span class="kw1">finally</span> <span class="br0">&#123;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#125;</span></pre>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;2.3 \u8f6c\u6362\u6d41\u7684\u4f7f\u7528\uff08InputStreamReader\/OutputStreamWriter\uff09&quot;,&quot;hid&quot;:&quot;\u8f6c\u6362\u6d41\u7684\u4f7f\u7528_inputstreamreader_outputstreamwriter&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:10,&quot;range&quot;:&quot;9904-11229&quot;} -->
<h3 class="sectionedit11" id="对象流的使用_objectinputstream_objectoutputstream">2.4 对象流的使用（ObjectInputStream/ObjectOutputStream</h3>
<div class="level3">

<p>
If we want to read or write object to a file, we should use ObjectInputStream/OutputStream. When use them to write object, it serialize the object to byte. When we use them to read, it deserialize the byte to object.
</p>

<p>
Write object example
</p>
<pre class="code java"><span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> writeObject<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
        <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+outputstream"><span class="kw3">OutputStream</span></a> outputStream<span class="sy0">=</span><span class="kw2">null</span><span class="sy0">;</span>
        <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+bufferedoutputstream"><span class="kw3">BufferedOutputStream</span></a> buf<span class="sy0">=</span><span class="kw2">null</span><span class="sy0">;</span>
        <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+objectoutputstream"><span class="kw3">ObjectOutputStream</span></a> obj<span class="sy0">=</span><span class="kw2">null</span><span class="sy0">;</span>
        <span class="kw1">try</span> <span class="br0">&#123;</span>
            <span class="co1">//序列化文件輸出流</span>
            outputStream<span class="sy0">=</span><span class="kw1">new</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+fileoutputstream"><span class="kw3">FileOutputStream</span></a><span class="br0">&#40;</span><span class="st0">&quot;E:<span class="es0">\\</span>learnproject<span class="es0">\\</span>Iotest<span class="es0">\\</span>lib<span class="es0">\\</span>src<span class="es0">\\</span>main<span class="es0">\\</span>java<span class="es0">\\</span>com<span class="es0">\\</span>myfile.tmp&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="co1">//构建缓冲流</span>
            buf<span class="sy0">=</span><span class="kw1">new</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+bufferedoutputstream"><span class="kw3">BufferedOutputStream</span></a><span class="br0">&#40;</span>outputStream<span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="co1">//构建字符输出的对象流</span>
            obj<span class="sy0">=</span><span class="kw1">new</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+objectoutputstream"><span class="kw3">ObjectOutputStream</span></a><span class="br0">&#40;</span>buf<span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="co1">//序列化数据写入</span>
            obj.<span class="me1">writeObject</span><span class="br0">&#40;</span><span class="kw1">new</span> Person<span class="br0">&#40;</span><span class="st0">&quot;A&quot;</span>, <span class="nu0">21</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><span class="co1">//Person对象</span>
            <span class="co1">//关闭流</span>
            obj.<span class="me1">close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span> <span class="kw1">catch</span> <span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+filenotfoundexception"><span class="kw3">FileNotFoundException</span></a> e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
            e.<span class="me1">printStackTrace</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span> <span class="kw1">catch</span> <span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+ioexception"><span class="kw3">IOException</span></a> e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
            e.<span class="me1">printStackTrace</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#125;</span></pre>

<p>
Read object example
</p>
<pre class="code java"><span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> readObject<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">throws</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+ioexception"><span class="kw3">IOException</span></a> <span class="br0">&#123;</span>
        <span class="kw1">try</span> <span class="br0">&#123;</span>
            <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+inputstream"><span class="kw3">InputStream</span></a> inputStream<span class="sy0">=</span><span class="kw1">new</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+fileinputstream"><span class="kw3">FileInputStream</span></a><span class="br0">&#40;</span><span class="st0">&quot;E:<span class="es0">\\</span>learnproject<span class="es0">\\</span>Iotest<span class="es0">\\</span>lib<span class="es0">\\</span>src<span class="es0">\\</span>main<span class="es0">\\</span>java<span class="es0">\\</span>com<span class="es0">\\</span>myfile.tmp&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="co1">//构建缓冲流</span>
            <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+bufferedinputstream"><span class="kw3">BufferedInputStream</span></a> buf<span class="sy0">=</span><span class="kw1">new</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+bufferedinputstream"><span class="kw3">BufferedInputStream</span></a><span class="br0">&#40;</span>inputStream<span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="co1">//构建字符输入的对象流</span>
            <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+objectinputstream"><span class="kw3">ObjectInputStream</span></a> obj<span class="sy0">=</span><span class="kw1">new</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+objectinputstream"><span class="kw3">ObjectInputStream</span></a><span class="br0">&#40;</span>buf<span class="br0">&#41;</span><span class="sy0">;</span>
            Person tempPerson<span class="sy0">=</span><span class="br0">&#40;</span>Person<span class="br0">&#41;</span>obj.<span class="me1">readObject</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+system"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">&#40;</span><span class="st0">&quot;Person对象为：&quot;</span><span class="sy0">+</span>tempPerson<span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="co1">//关闭流</span>
            obj.<span class="me1">close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            buf.<span class="me1">close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            inputStream.<span class="me1">close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span> <span class="kw1">catch</span> <span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+filenotfoundexception"><span class="kw3">FileNotFoundException</span></a> e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
            e.<span class="me1">printStackTrace</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span> <span class="kw1">catch</span> <span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+ioexception"><span class="kw3">IOException</span></a> e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
            e.<span class="me1">printStackTrace</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span> <span class="kw1">catch</span> <span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+classnotfoundexception"><span class="kw3">ClassNotFoundException</span></a> e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
            e.<span class="me1">printStackTrace</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#125;</span></pre>

<p>
IMportant note:
1.读取顺序和写入顺序一定要一致，不然会读取出错。
2.<strong>在对象属性前面加transient关键字，则该对象的属性不会被序列化。</strong>
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;2.4 \u5bf9\u8c61\u6d41\u7684\u4f7f\u7528\uff08ObjectInputStream\/ObjectOutputStream&quot;,&quot;hid&quot;:&quot;\u5bf9\u8c61\u6d41\u7684\u4f7f\u7528_objectinputstream_objectoutputstream&quot;,&quot;codeblockOffset&quot;:1,&quot;secid&quot;:11,&quot;range&quot;:&quot;11230-13458&quot;} -->
<h2 class="sectionedit12" id="何为nio_和传统io有何区别">4.何为NIO,和传统Io有何区别？</h2>
<div class="level2">

<p>
我们使用InputStream从输入流中读取数据时，如果没有读取到有效的数据，程序将在此处阻塞该线程的执行。其实传统的输入里和输出流都是阻塞式的进行输入和输出。 不仅如此，传统的输入流、输出流都是通过字节的移动来处理的（即使我们不直接处理字节流，但底层实现还是依赖于字节处理），也就是说，面向流的输入和输出一次只能处理一个字节，因此面向流的输入和输出系统效率通常不高。
    
从JDk1.4开始，java提供了一系列改进的输入和输出处理的新功能，这些功能被统称为新IO(NIO)。新增了许多用于处理输入和输出的类，这些类都被放在java.nio包及其子包下，并且对原io的很多类都以NIO为基础进行了改写。新增了满足NIO的功能。
</p>

<p>
NIO采用了内存映射对象的方式来处理输入和输出，NIO将文件或者文件的一块区域映射到内存中，这样就可以像访问内存一样来访问文件了。通过这种方式来进行输入/输出比传统的输入和输出要快的多。
</p>

<p>
JDk1.4使用NIO改写了传统Io后，传统Io的读写速度和NIO差不了太多。
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;4.\u4f55\u4e3aNIO,\u548c\u4f20\u7edfIo\u6709\u4f55\u533a\u522b\uff1f&quot;,&quot;hid&quot;:&quot;\u4f55\u4e3anio_\u548c\u4f20\u7edfio\u6709\u4f55\u533a\u522b&quot;,&quot;codeblockOffset&quot;:3,&quot;secid&quot;:12,&quot;range&quot;:&quot;13459-14719&quot;} -->
<h2 class="sectionedit13" id="在开发中正确使用io流">5.在开发中正确使用Io流</h2>
<div class="level2">

<p>
    了解了java io的整体类结构和每个类的一下特性后，我们可以在开发的过程中根据需要灵活的使用不同的Io流进行开发。下面是我整理2点原则:
</p>
<ul>
<li class="level1"><div class="li"> 如果是操作二进制文件那我们就使用字节流，如果操作的是文本文件那我们就使用字符流。</div>
</li>
<li class="level1"><div class="li"> 尽可能的多使用处理流，这会使我们的代码更加灵活，复用性更好。</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;5.\u5728\u5f00\u53d1\u4e2d\u6b63\u786e\u4f7f\u7528Io\u6d41&quot;,&quot;hid&quot;:&quot;\u5728\u5f00\u53d1\u4e2d\u6b63\u786e\u4f7f\u7528io\u6d41&quot;,&quot;codeblockOffset&quot;:3,&quot;secid&quot;:13,&quot;range&quot;:&quot;14720-15180&quot;} -->
<h1 class="sectionedit14" id="appendixdifference_between_byte_and_char">Appendix: Difference between byte and char</h1>
<div class="level1">
<ol>
<li class="level1"><div class="li"> The first and foremost difference between byte and char is that byte is a signed data type while char is an unsigned data type. In signed data type first bit always represents a sign of the number.</div>
</li>
<li class="level1"><div class="li"> Another difference between char and byte is that char(16 bit)is larger data type than a byte(8 bit). The range of byte is between -128 to 127 but the range of char is from 0 to 65535.</div>
</li>
<li class="level1"><div class="li"> You can initialize a char variable using character literal e.g. char ch = &#039;c&#039;, in this case, <abbr title="American Standard Code for Information Interchange">ASCII</abbr> value of character &#039;c&#039; will be stored into char variable “ch”.</div>
</li>
<li class="level1"><div class="li"> The wrapper class corresponding to byte primitive is java.lang.Byte and the wrapper class corresponding to char primitive is java.lang.Character class.</div>
</li>
</ol>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Appendix: Difference between byte and char&quot;,&quot;hid&quot;:&quot;appendixdifference_between_byte_and_char&quot;,&quot;codeblockOffset&quot;:3,&quot;secid&quot;:14,&quot;range&quot;:&quot;15181-&quot;} -->