
<h1 class="sectionedit1" id="java_job_interview_questions">Java job interview questions</h1>
<div class="level1">

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Java job interview questions&quot;,&quot;hid&quot;:&quot;java_job_interview_questions&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:1,&quot;range&quot;:&quot;1-44&quot;} -->
<h2 class="sectionedit2" id="the_basics_of_java_jvm_and_compile_process">The basics of JAVA, jvm, and compile process</h2>
<div class="level2">

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;The basics of JAVA, jvm, and compile process&quot;,&quot;hid&quot;:&quot;the_basics_of_java_jvm_and_compile_process&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:2,&quot;range&quot;:&quot;45-104&quot;} -->
<h3 class="sectionedit3" id="java_is_a_compile_or_interpret_language">1. Java is a compile or interpret language?</h3>
<div class="level3">

<p>
1. Java source code (use javac)→ Java bytecode
2. Run bytecode on java run time environment
</p>

<p>
There are three way to run bytecode. 
</p>
<ul>
<li class="level1"><div class="li"> JVM interpret java bytecode line by line</div>
</li>
<li class="level1"><div class="li"> The JIT(Just in time compiler) compiler is enabled by default, and is activated when a Java method is called. The JIT compiler compiles the bytecode of that method into native machine code, compiling it “just in time” to run. When a method has been compiled, the JVM calls the compiled code of that method directly instead of interpreting it</div>
</li>
<li class="level1"><div class="li"> RTSJ (Real time Specification for JAVA) is another type of java runtime environment. This is designed for real time programming. IBM WebSphere Real Time is an example</div>
</li>
</ul>

<p>
Most of the java programe use the hotspot jvm (include a jvm and jit). RSTJ is used for real time devices only.
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1. Java is a compile or interpret language?&quot;,&quot;hid&quot;:&quot;java_is_a_compile_or_interpret_language&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:3,&quot;range&quot;:&quot;105-969&quot;} -->
<h3 class="sectionedit4" id="what_is_a_jvm_and_hotspot">2. What is a JVM and hotspot?</h3>
<div class="level3">

<p>
The JVM is by definition a virtual machine, that is a software machine that simulates what a real machine does. Like real machines it has an instruction set, a virtual computer architecture and an execution model. It is capable of running code written with this virtual instruction set, pretty much like a real machine can run machine code.
</p>

<p>
HotSpot is an an implementation of the JVM concept, originally developed by Sun and now owned by Oracle. There are other implementations of the JVM specification, like JRockit, IBM J9, among many others.
</p>

<p>
The OpenJDK is a project under which an opensource implementation of the HotSpot (and many other things e.g compiler, JDK APIs, etc) is developed.
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;2. What is a JVM and hotspot?&quot;,&quot;hid&quot;:&quot;what_is_a_jvm_and_hotspot&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:4,&quot;range&quot;:&quot;970-1705&quot;} -->
<h3 class="sectionedit5" id="what_is_a_java_aot_compiler">3. What is a JAVA AOT compiler?</h3>
<div class="level3">

<p>
AOT is stand for ahead of time.
</p>

<p>
To make a code run on a pc, you need to have runtime environment to run the code and warp system calls to the os.
</p>

<p>
All programs have a runtime environment. Standard lib for C that wraps system calls to the operating system. Objective-C has its runtime that wraps all of its message passing.
</p>

<p>
With Java, the runtime is the JVM. Most of the Java implementations that people are familiar with are similar to the HotSpot JVM which is a byte code interpreter and JIT compiler.
</p>

<p>
This doesn&#039;t have to be the only implementation. There is absolutely nothing saying you can&#039;t build a standard lib-esque runtime for Java and compile the code to native machine code and run that within the runtime that handles calls for new objects into mallocs and file access into system calls on the machine. And thats what the Ahead Of Time (AOT rather than JIT) compiler does. Call that runtime what you will… you could call it a JVM implementation (and it does follow the JVM specification) or a runtime environment or standard lib for Java. Its there and it does essentially the same thing.
</p>

<p>
It could be done either by reimplementing javac to target the native machine (that&#039;s kind of what GCJ did). Or it could be done with translating the byte code generated by javac into machine (or byte) code for another machine - that&#039;s what Android does. Based on Wikipedia that&#039;s what Excelsior JET does too (“The compiler transforms the portable Java byte code into optimized executables for the desired hardware and operating system (<abbr title="Operating System">OS</abbr>)”), and the same is true for RoboVM.
</p>

<p>
There are additional complications with Java that means this is very hard to do as an exclusive approach. Dynamic loading of classes (class.forName()) or proxied objects require dynamics that AOT compilers do not easily provide and so their respective JVMs must also include either a JIT compiler (Excelsior JET) or an interpreter (GCJ) to handle classes that couldn&#039;t be precompiled into native.
</p>

<p>
Remember, the JVM is a specification, with many implementations. The C standard library is also a specification with many different implementations.
</p>

<p>
With Java8, a fair bit of work has been done on AOT compilation. At best, one can only summarize AOT in general within the confines of a textbox. However, in the JVM Language Summit for 2015 (August of 2015), there was a presentation: Java Goes AOT (youtube video). This video is 40 minutes long and goes into many of the deeper technical aspects and performance benchmarks.
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;3. What is a JAVA AOT compiler?&quot;,&quot;hid&quot;:&quot;what_is_a_java_aot_compiler&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:5,&quot;range&quot;:&quot;1706-4256&quot;} -->
<h3 class="sectionedit6" id="what_is_classpath">4. what is Classpath?</h3>
<div class="level3">

<p>
Classpath is a parameter in the Java Virtual Machine or the Java compiler that specifies the location of user-defined classes and packages. The parameter may be set either on the command-line or through an environment variable.
</p>

<p>
Similar to the classic dynamic loading behavior, when executing Java programs, the Java Virtual Machine finds and loads classes lazily (it loads the bytecode of a class only when the class is first used). The classpath tells Java where to look in the filesystem for files defining these classes.
</p>

<p>
The virtual machine searches for and loads classes in this order:
</p>
<ol>
<li class="level1"><div class="li"> bootstrap classes: the classes that are fundamental to the Java Platform (comprising the public classes of the Java Class Library, and the private classes that are necessary for this library to be functional).</div>
</li>
<li class="level1"><div class="li"> extension classes: packages that are in the extension directory of the JRE or JDK, jre/lib/ext/</div>
</li>
<li class="level1"><div class="li"> user-defined packages and libraries</div>
</li>
</ol>

<p>
By default only the packages of the JDK standard <abbr title="Application Programming Interface">API</abbr> and extension packages are accessible without needing to set where to find them. The path for all user-defined packages and libraries must be set in the command-line (or in the Manifest associated with the Jar file containing the classes).
</p>

</div>

<h4 id="set_class_path_in_a_java_app">Set class path in a java app</h4>
<div class="level4">

<p>
Suppose we have a package called org.mypackage containing the classes:
</p>
<ul>
<li class="level1"><div class="li"> HelloWorld (main class)</div>
</li>
<li class="level1"><div class="li"> SupportClass</div>
</li>
<li class="level1"><div class="li"> UtilClass</div>
</li>
</ul>

<p>
and the files defining this package are stored physically under the directory /home/user/myprogram (on Linux).
</p>

<p>
The file structure looks like this:
</p>
<pre class="code">/home/user/myprogram/
            |
            ---&gt; org/  
                  |
                  ---&gt; mypackage/
                           |
                           ---&gt; HelloWorld.class       
                           ---&gt; SupportClass.class   
                           ---&gt; UtilClass.class </pre>

<p>
When we invoke Java, we specify the name of the application to run: org.mypackage.HelloWorld. However we must also tell Java where to look for the files and directories defining our package. So to launch the program, we use the following command:
</p>
<pre class="code"># here -cp means classpath not copy, it sets the path to the packages used in the program
# org.mypackage.HelloWorld is the name of the main class
java -cp /home/user/myprogram org.mypackage.HelloWorld </pre>

<p>
To avoid typing -cp in all java command, we can also set the class path through an environment variable.
</p>

<p>
In linux <abbr title="Operating System">OS</abbr>:
</p>
<pre class="code"># set the classpath to /home/user/myprogram
export CLASSPATH=/home/user/myprogram

# If you already have some classpath set, you can do
export CLASSPATH=$CLASSPATH:/home/user/myprogram

# If you want to include the current directory, you can do
export CLASSPATH=/home/user/myprogram:.

# If your program requires an exterior jar file, you can include it also by setting classpath.
# For example, if I have a jar file in /home/user/ext/log4j-1.2.16.jar. And my program requires it.
export CLASSPATh=$CLASSPATH:/home/user/ext/log4j-1.2.16.jar
java org.mypackage.HelloWorld

# We can do the same with in line classpath setting
java -cp /home/user/ext/log4j-1.2.16.jar org.mypackage.HelloWorld

# Starting from java6, we can use wildcard to includes all jar files of one directory
java -classpath &#039;.:/home/user/ext/*&#039; org.mypackage.HelloWorld
</pre>

</div>

<h4 id="set_class_path_in_a_jar_file">Set class path in a jar file</h4>
<div class="level4">

<p>
Suppose that we have already encapsulated the helloworld app in a jar file(jar creation: <a href="https://docs.oracle.com/javase/tutorial/deployment/jar/build.html" class="urlextern" title="https://docs.oracle.com/javase/tutorial/deployment/jar/build.html" rel="nofollow">https://docs.oracle.com/javase/tutorial/deployment/jar/build.html</a>). And it requires supportLib.jar
The directory structure is as follows:
</p>
<pre class="code">/home/user/myprogram
      |
      ---&gt; helloWorld.jar 
      |
      ---&gt; lib/ 
            |
            ---&gt; supportLib1.jar
            ---&gt; supportLib2.jar</pre>

<p>
The manifest file defined in helloWorld.jar has this definition:
</p>
<pre class="code">Main-Class: org.mypackage.HelloWorld
Class-Path: lib/supportLib1.jar lib/supportLib2.jar</pre>

<p>
The manifest file should end with either a newline or carriage return.
</p>

<p>
The program is launched with the following command:
</p>
<pre class="code">java -jar /home/user/myprogram/helloWorld.jar [app arguments]</pre>

<p>
This automatically starts org.mypackage.HelloWorld specified in class Main-Class with the arguments. The user cannot replace this class name using the invocation java -jar. Class-Path describes the location of supportLib1.jar and supportLib2 relative to the location of the library helloWorld.jar. Neither absolute file path, which is permitted in -classpath parameter on the command line, nor jar-internal paths are supported. This means that if the main class file is contained in a jar, org/mypackage/HelloWorld.class must be a valid path on the root within the jar.
</p>

<p>
Note that we use space to separate multiple jar dependencies in manifest file classpath definition.
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;4. what is Classpath?&quot;,&quot;hid&quot;:&quot;what_is_classpath&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:6,&quot;range&quot;:&quot;4257-9098&quot;} -->
<h3 class="sectionedit7" id="stringbuilder_vs_stringbuffer">5. StringBuilder vs StringBuffer</h3>
<div class="level3">
<div class="table sectionedit8"><table class="inline">
	<thead>
	<tr class="row0">
		<th class="col0">StringBuilder</th><th class="col1 rightalign">  StringBuffer</th>
	</tr>
	</thead>
	<tr class="row1">
		<td class="col0">Fast</td><td class="col1">Slow</td>
	</tr>
	<tr class="row2">
		<td class="col0">Not thread safe</td><td class="col1"> thread safe</td>
	</tr>
	<tr class="row3">
		<td class="col0">Not synchronized</td><td class="col1"> synchronized</td>
	</tr>
</table></div>
<!-- EDIT{&quot;target&quot;:&quot;table&quot;,&quot;name&quot;:&quot;&quot;,&quot;hid&quot;:&quot;table&quot;,&quot;secid&quot;:8,&quot;range&quot;:&quot;9143-9249&quot;} -->
</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;5. StringBuilder vs StringBuffer&quot;,&quot;hid&quot;:&quot;stringbuilder_vs_stringbuffer&quot;,&quot;codeblockOffset&quot;:6,&quot;secid&quot;:7,&quot;range&quot;:&quot;9099-9252&quot;} -->
<h2 class="sectionedit9" id="java_language_syntax_basics">Java language syntax basics</h2>
<div class="level2">

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Java language syntax basics&quot;,&quot;hid&quot;:&quot;java_language_syntax_basics&quot;,&quot;codeblockOffset&quot;:6,&quot;secid&quot;:9,&quot;range&quot;:&quot;9253-9293&quot;} -->
<h3 class="sectionedit10" id="what_s_the_diff_between_final_finally_and_finalize">1. What&#039;s the diff between final, finally and finalize</h3>
<div class="level3">

<p>
1. Final is a keyword to apply restrictions on class, method and variable
</p>
<ul>
<li class="level1"><div class="li"> Final variable value can&#039;t be changed</div>
</li>
<li class="level1"><div class="li"> Final method can&#039;t be overriden</div>
</li>
<li class="level1"><div class="li"> Final class can&#039;t be inherited</div>
</li>
</ul>

<p>
2. Finally is a block to place important code, it will be executed whether exception is handled or not.
</p>

<p>
3. Finalize is a method which is used to perform clean up processing just before object is garbage collected.
</p>
<pre class="code file java"><span class="kw1">final</span> <span class="kw4">int</span> x<span class="sy0">=</span><span class="nu0">100</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">try</span><span class="br0">&#123;</span>  
<span class="kw4">int</span> x<span class="sy0">=</span><span class="nu0">300</span><span class="sy0">;</span>  
<span class="br0">&#125;</span>
<span class="kw1">catch</span><span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+exception"><span class="kw3">Exception</span></a> e<span class="br0">&#41;</span><span class="br0">&#123;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+system"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">&#40;</span>e<span class="br0">&#41;</span><span class="sy0">;</span><span class="br0">&#125;</span>  
<span class="kw1">finally</span><span class="br0">&#123;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+system"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">&#40;</span><span class="st0">&quot;finally block is executed&quot;</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">class</span> FinalizeExample<span class="br0">&#123;</span>  
<span class="kw1">public</span> <span class="kw4">void</span> finalize<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+system"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">&#40;</span><span class="st0">&quot;finalize called&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><span class="br0">&#125;</span>  
<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> main<span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+string"><span class="kw3">String</span></a><span class="br0">&#91;</span><span class="br0">&#93;</span> args<span class="br0">&#41;</span><span class="br0">&#123;</span>  
FinalizeExample f1<span class="sy0">=</span><span class="kw1">new</span> FinalizeExample<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>  
FinalizeExample f2<span class="sy0">=</span><span class="kw1">new</span> FinalizeExample<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>  
f1<span class="sy0">=</span><span class="kw2">null</span><span class="sy0">;</span>  
f2<span class="sy0">=</span><span class="kw2">null</span><span class="sy0">;</span>  
<a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+system"><span class="kw3">System</span></a>.<span class="me1">gc</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>  
<span class="br0">&#125;</span><span class="br0">&#125;</span>  </pre>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1. What&#039;s the diff between final, finally and finalize&quot;,&quot;hid&quot;:&quot;what_s_the_diff_between_final_finally_and_finalize&quot;,&quot;codeblockOffset&quot;:6,&quot;secid&quot;:10,&quot;range&quot;:&quot;9294-10191&quot;} -->
<h2 class="sectionedit11" id="the_basics_of_java_data_structure">The basics of JAVA data structure</h2>
<div class="level2">

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;The basics of JAVA data structure&quot;,&quot;hid&quot;:&quot;the_basics_of_java_data_structure&quot;,&quot;codeblockOffset&quot;:7,&quot;secid&quot;:11,&quot;range&quot;:&quot;10192-10238&quot;} -->
<h3 class="sectionedit12" id="difference_between_arraylist_linkedlist_and_vector">1. Difference between ArrayList, LinkedList and Vector</h3>
<div class="level3">

<p>
<a href="/lib/exe/detail.php?id=employes%3Apengfei.liu%3Ajava%3Ainterview_questions&amp;media=employes:pengfei.liu:java:java-collection-hierarchy.jpeg" class="media" title="employes:pengfei.liu:java:java-collection-hierarchy.jpeg"><img src="/lib/exe/fetch.php?w=400&amp;tok=52c2de&amp;media=employes:pengfei.liu:java:java-collection-hierarchy.jpeg" class="media" alt="" width="400" /></a>
</p>

<p>
From the hierarchy diagram, they all implement List interface. Their main difference is their implementation which causes different performance for different operations.
</p>
<ul>
<li class="level1"><div class="li"> ArrayList, is implemented as a resizable array. As more elements are added to ArrayList, its size is increased dynamically. </div>
</li>
<li class="level1"><div class="li"> LinkedList is implemented as a double linked list. Its performance on add and remove is better than Arraylist, but worse on get and set methods. LinkedList, however, also implements Queue interface which adds more methods than ArrayList and Vector, such as offer(), peek(), poll(), etc</div>
</li>
<li class="level1"><div class="li"> Vector is similar with ArrayList, but it is synchronized. ArrayList is a better choice if your program is thread-safe. Vector and ArrayList require space as more elements are added. Vector each time doubles its array size, while ArrayList grow 50% of its size each time. </div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1. Difference between ArrayList, LinkedList and Vector&quot;,&quot;hid&quot;:&quot;difference_between_arraylist_linkedlist_and_vector&quot;,&quot;codeblockOffset&quot;:7,&quot;secid&quot;:12,&quot;range&quot;:&quot;10239-11241&quot;} -->
<h2 class="sectionedit13" id="the_basics_of_java_multithread">The basics of JAVA multithread</h2>
<div class="level2">

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;The basics of JAVA multithread&quot;,&quot;hid&quot;:&quot;the_basics_of_java_multithread&quot;,&quot;codeblockOffset&quot;:7,&quot;secid&quot;:13,&quot;range&quot;:&quot;11242-11285&quot;} -->
<h3 class="sectionedit14" id="thread_safety_in_java">1. Thread safety in JAVA</h3>
<div class="level3">
<dl class="file">
<dt><a href="/doku.php?do=export_code&amp;id=employes:pengfei.liu:java:interview_questions&amp;codeblock=7" title="Download Snippet" class="mediafile mf_java">ThreadSafety.java</a></dt>
<dd><pre class="code file java"><span class="kw1">package</span> <span class="co2">org.pengfei.basic</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">class</span> ThreadSafety <span class="br0">&#123;</span>
&nbsp;
    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> main<span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+string"><span class="kw3">String</span></a><span class="br0">&#91;</span><span class="br0">&#93;</span> args<span class="br0">&#41;</span> <span class="kw1">throws</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+interruptedexception"><span class="kw3">InterruptedException</span></a> <span class="br0">&#123;</span>
&nbsp;
        ProcessingThread pt <span class="sy0">=</span> <span class="kw1">new</span> ProcessingThread<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+thread"><span class="kw3">Thread</span></a> t1 <span class="sy0">=</span> <span class="kw1">new</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+thread"><span class="kw3">Thread</span></a><span class="br0">&#40;</span>pt, <span class="st0">&quot;t1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        t1.<span class="me1">start</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+thread"><span class="kw3">Thread</span></a> t2 <span class="sy0">=</span> <span class="kw1">new</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+thread"><span class="kw3">Thread</span></a><span class="br0">&#40;</span>pt, <span class="st0">&quot;t2&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        t2.<span class="me1">start</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//wait for threads to finish processing</span>
        t1.<span class="me1">join</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        t2.<span class="me1">join</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+system"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">&#40;</span><span class="st0">&quot;Processing count=&quot;</span><span class="sy0">+</span>pt.<span class="me1">getCount</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">class</span> ProcessingThread <span class="kw1">implements</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+runnable"><span class="kw3">Runnable</span></a><span class="br0">&#123;</span>
    <span class="kw1">private</span> <span class="kw4">int</span> count<span class="sy0">;</span>
&nbsp;
    @Override
    <span class="kw1">public</span> <span class="kw4">void</span> run<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw1">for</span><span class="br0">&#40;</span><span class="kw4">int</span> i<span class="sy0">=</span><span class="nu0">1</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">5</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
            processSomething<span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy0">;</span>
            count<span class="sy0">++;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw1">public</span> <span class="kw4">int</span> getCount<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw1">return</span> <span class="kw1">this</span>.<span class="me1">count</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw1">private</span> <span class="kw4">void</span> processSomething<span class="br0">&#40;</span><span class="kw4">int</span> i<span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="co1">// processing some job</span>
        <span class="kw1">try</span> <span class="br0">&#123;</span>
            <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+thread"><span class="kw3">Thread</span></a>.<span class="me1">sleep</span><span class="br0">&#40;</span>i<span class="sy0">*</span><span class="nu0">1000</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span> <span class="kw1">catch</span> <span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+interruptedexception"><span class="kw3">InterruptedException</span></a> e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
            e.<span class="me1">printStackTrace</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span></pre>
</dd></dl>

<p>
The above code should show count=8, because each thread count 4 times and we have 2 thread. But, if you run the program, the possible result is 7,8,9. This happens because the count++ is not an atomic operation and two threads are not synchronized, these causeing the data corruption.
</p>

<p>
Thread safety in java is the process to make our program safe to use in multithreaded environment, there are different ways through which we can make our program thread safe.
</p>
<ul>
<li class="level1"><div class="li"> Synchronization is the easiest and most widely used tool for thread safety in java.</div>
</li>
<li class="level1"><div class="li"> Use of Atomic Wrapper classes from java.util.concurrent.atomic package. For example AtomicInteger</div>
</li>
<li class="level1"><div class="li"> Use of locks from java.util.concurrent.locks package.</div>
</li>
<li class="level1"><div class="li"> Using thread safe collection classes, check this post for usage of ConcurrentHashMap for thread safety.</div>
</li>
<li class="level1"><div class="li"> Using volatile keyword with variables to make every thread read the data from memory, not read from thread cache.</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1. Thread safety in JAVA&quot;,&quot;hid&quot;:&quot;thread_safety_in_java&quot;,&quot;codeblockOffset&quot;:7,&quot;secid&quot;:14,&quot;range&quot;:&quot;11286-13255&quot;} -->
<h2 class="sectionedit15" id="the_basics_of_java_design_pattern">The basics of JAVA design pattern</h2>
<div class="level2">

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;The basics of JAVA design pattern&quot;,&quot;hid&quot;:&quot;the_basics_of_java_design_pattern&quot;,&quot;codeblockOffset&quot;:8,&quot;secid&quot;:15,&quot;range&quot;:&quot;13256-13301&quot;} -->
<h3 class="sectionedit16" id="what_s_the_theory_of_dynamic_proxies">1. What&#039;s the theory of Dynamic proxies</h3>
<div class="level3">

<p>
proxies are fronts or wrappers that pass function invocation through their own facilities (usually onto real methods)  potentially adding some functionality.
</p>

<p>
Dynamic proxies allow one single class with one single method to service multiple method calls to arbitrary classes with an arbitrary number of methods. A dynamic proxy can be thought of as a kind of Facade, but one that can pretend to be an implementation of any interface. Under the cover, it routes all method invocations to a single handler  the invoke() method.
</p>

<p>
An more detail exmaple <a href="/doku.php?id=employes:pengfei.liu:java:design_pattern:dynamicproxy" class="wikilink1" title="employes:pengfei.liu:java:design_pattern:dynamicproxy">Dynamic Proxy design pattern</a>
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;1. What&#039;s the theory of Dynamic proxies&quot;,&quot;hid&quot;:&quot;what_s_the_theory_of_dynamic_proxies&quot;,&quot;codeblockOffset&quot;:8,&quot;secid&quot;:16,&quot;range&quot;:&quot;13302-13990&quot;} -->
<h3 class="sectionedit17" id="what_is_java_reflection">2. What is java reflection?</h3>
<div class="level3">

<p>
Reflection in Java is a very powerful concept and it’s of little use in normal programming but it’s the backbone for most of the Java, J2EE frameworks. Some of the frameworks that use java reflection are:
</p>
<ul>
<li class="level1"><div class="li"> JUnit  uses reflection to parse @Test annotation to get the test methods and then invoke it.</div>
</li>
<li class="level1"><div class="li"> Spring  dependency injection, read more at Spring Dependency Injection</div>
</li>
<li class="level1"><div class="li"> Tomcat web container to forward the request to correct module by parsing their web.xml files and request <abbr title="Uniform Resource Identifier">URI</abbr>.</div>
</li>
<li class="level1"><div class="li"> Eclipse auto completion of method names</div>
</li>
<li class="level1"><div class="li"> Struts</div>
</li>
<li class="level1"><div class="li"> Hibernate</div>
</li>
</ul>

<p>
The list is endless and they all use java reflection because all these frameworks have no knowledge and access of user defined classes, interfaces, their methods etc.
</p>

<p>
We should not use reflection in normal programming where we already have access to the classes and interfaces because of following drawbacks.
</p>
<ul>
<li class="level1"><div class="li"> Poor Performance  Since java reflection resolve the types dynamically, it involves processing like scanning the classpath to find the class to load, causing slow performance.</div>
</li>
<li class="level1"><div class="li"> Security Restrictions  Reflection requires runtime permissions that might not be available for system running under security manager. This can cause you application to fail at runtime because of security manager.</div>
</li>
<li class="level1"><div class="li"> Security Issues  Using reflection we can access part of code that we are not supposed to access, for example we can access private fields of a class and change it’s value. This can be a serious security threat and cause your application to behave abnormally.</div>
</li>
<li class="level1"><div class="li"> High Maintenance  Reflection code is hard to understand and debug, also any issues with the code can’t be found at compile time because the classes might not be available, making it less flexible and hard to maintain.</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;2. What is java reflection?&quot;,&quot;hid&quot;:&quot;what_is_java_reflection&quot;,&quot;codeblockOffset&quot;:8,&quot;secid&quot;:17,&quot;range&quot;:&quot;13991-&quot;} -->