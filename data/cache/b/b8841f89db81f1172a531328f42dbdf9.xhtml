
<h1 class="sectionedit1" id="protocole_de_creation_d_un_projet_django">Protocole de création d&#039;un projet Django</h1>
<div class="level1">

<p>
Informations avant de se plonger tête baissée dans le protocole :
</p>
<ul>
<li class="level1"><div class="li"> la version de django utilisée pour les projets BIOASTER est la 1.10. Se consulter si besoin de passer à au-dessus/au-dessous.</div>
</li>
<li class="level1"><div class="li"> le <a href="https://docs.djangoproject.com/en/1.10/" class="urlextern" title="https://docs.djangoproject.com/en/1.10/"  rel="nofollow"> tutoriel officiel</a> est très bien fait et la majorité des notes de cette page sont issues de ce tuto.</div>
</li>
<li class="level1"><div class="li"> la version de python a prendre par défaut pour tout nouveau projet est la version 3.x (sauf si problème de lib exotiques pas encore passées en python3).</div>
</li>
</ul>

<p>
Prérequis au protocole :
</p>
<ul>
<li class="level1"><div class="li"> avoir <a href="/ut6/projets_internes/bp_python" class="wikilink1" title="ut6:projets_internes:bp_python"> pyenv et virtualenv/virtualenv-wrapper</a> d&#039;installés sur l&#039;environnement de travail</div>
</li>
<li class="level1"><div class="li"> avoir créé le pyenv + virtualenv de son projet</div>
</li>
<li class="level1"><div class="li"> avoir réalisé le pip install django et vérifier que tout est là où il faut et dans la version qu&#039;il faut : <pre class="prettyprint">python -m django --version</pre></div>
</li>
</ul>

</div>
<!-- EDIT1 SECTION "Protocole de création d'un projet Django" [1-942] -->
<h2 class="sectionedit2" id="creation_du_projet">Creation du projet</h2>
<div class="level2">

<p>
Une simple commande se chargera de créer votre dossier projet et tout ce qu&#039;il faut dedans comme il faut :
</p>
<pre class="prettyprint">django-admin startproject mysite</pre>
<p>
Vous aurez alors une architecture semblable à cela dans votre dossier monprojet/ :
</p>
<pre class="prettyprint">
monprojet/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        wsgi.py
</pre>
<p>
Votre projet est instancié, à partir de là vous pouvez lancer le serveur de développement de cette façon :
</p>
<pre class="prettyprint">
$ python manage.py runserver
</pre>
<p>
Si tout est ok, vous aurez un retour semblable à cela (NB : ignorer pour le moment les warnings concernant les migrations) :
</p>
<pre class="prettyprint">
Performing system checks...

System check identified no issues (0 silenced).

You have 13 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run &#039;python manage.py migrate&#039; to apply them.

September 26, 2016 - 07:40:29
Django version 1.10.1, using settings &#039;monprojet.settings&#039;
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
</pre>
</div>
<!-- EDIT2 SECTION "Creation du projet" [943-2088] -->
<h2 class="sectionedit3" id="creation_des_applications_du_projet">Creation des applications du projet</h2>
<div class="level2">

<p>
Il va maintenant falloir créer les différentes applications de votre projet (== Bundles pour Symfony).
Pour créer une application, il suffit d&#039;executer la commande suivante :
</p>
<pre class="prettyprint">
$ python manage.py startapp monapplication
</pre>
<p>
Vous aurez alors dans le dossier monapplication/ sous vos yeux ébahis quelque chose ressemblant fortement à cela :
</p>
<pre class="prettyprint">
monapplication/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py
</pre>
</div>
<!-- EDIT3 SECTION "Creation des applications du projet" [2089-2640] -->
<h2 class="sectionedit4" id="creation_de_la_base_de_donnees_du_projet">Creation de la base de données du projet</h2>
<div class="level2">

<p>
Django propose un réglage par défaut en SQLite. Si vous désirez changez cela il faudra mettre les mains dans monprojet/settings.py à ce niveau là :
</p>
<pre class="prettyprint">
DATABASES = {
    &#039;default&#039;: {
        &#039;ENGINE&#039;: &#039;django.db.backends.sqlite3&#039;,
        &#039;NAME&#039;: os.path.join(BASE_DIR, &#039;db.sqlite3&#039;),
    }
}
</pre>
<p>
Pour une base de données Postgresql la configuration ressemblera à cela :
</p>
<pre class="prettyprint">
DATABASES = {
    &#039;default&#039;: {
        &#039;ENGINE&#039;: &#039;django.db.backends.postgresql_psycopg2&#039;,
        &#039;NAME&#039;: &#039;masuperdb&#039;,
        &#039;USER&#039;: &#039;totoledba&#039;,
        &#039;PASSWORD&#039;: &#039;&#039;,
        &#039;HOST&#039;: &#039;localhost&#039;,
        &#039;PORT&#039;: &#039;&#039;,
    }
}
</pre>
<p>
Normalement si vous suivez vous l&#039;aurez compris en lisant l&#039;argument de la clé ENGINE, il va falloir installer psycopg2 pour que la jointure python-psql se déroule bien.
Pour cela, pip install est votre ami :
</p>
<pre class="prettyprint">
$ pip install psycopg2
</pre>
<p>
Il va falloir créer la dite base de données :
</p>
<pre class="prettyprint">
$ createdb -e -O totoledba masuperdb
</pre>
<p>
Puis lui appliquer les migrations qui ont été détecté par le serveur de développement grâce à la commande migrate de Django. La commande migrate examine le réglage INSTALLED_APPS et crée les tables de base de données nécessaires en fonction des réglages de base de données dans votre fichier mysite/settings.py et des migrations de base de données contenues dans l’application
</p>
<pre class="prettyprint">
$ python manage.py migrate
</pre>
<p>
Vous aurez un retour console similaire à cela :
</p>
<pre class="prettyprint">
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying sessions.0001_initial... OK
</pre>
<p>
Et une base de données qui devrait ressembler à cela :
</p>
<pre class="prettyprint">

masuperdb=# \dt
                   List of relations
 Schema |            Name            | Type  |  Owner   
--------+----------------------------+-------+----------
 public | auth_group                 | table | totoledba
 public | auth_group_permissions     | table | totoledba
 public | auth_permission            | table | totoledba
 public | auth_user                  | table | totoledba
 public | auth_user_groups           | table | totoledba
 public | auth_user_user_permissions | table | totoledba
 public | django_admin_log           | table | totoledba
 public | django_content_type        | table | totoledba
 public | django_migrations          | table | totoledba
 public | django_session             | table | totoledba
(10 rows)
</pre>
</div>
<!-- EDIT4 SECTION "Creation de la base de données du projet" [2641-5764] -->
<h2 class="sectionedit5" id="migration_de_la_base_de_donnees_du_projet">Migration de la base de données du projet</h2>
<div class="level2">

<p>
Mais si vous avez bien suivi, vous remarquerez qu&#039;il n&#039;y a rien concernant d&#039;éventuelles tables que nous aurions pu renseigner dans monapplication/
Pas de panique, nous y venons ! Il s&#039;agit ici de décrire le processus de migration selon Django.
</p>
<ol>
<li class="level1"><div class="li"> Vous faites vos changements dans le models.py de votre/vos application(s)</div>
</li>
<li class="level1"><div class="li"> à la création de votre application, un monapplication/apps.py est créé également, il contient la classe MonapplicationConfig. Il faudra alors nourrir la clé INSTALLED_APPS se trouvant dans monprojet/settings.py en rajoutant en argument la liaison vers votre nouvelle application de cette facon : <pre class="prettyprint"> INSTALLED_APPS = [
    &#039;monapplication.apps.MonapplicationConfig&#039;,
    ...,
    ]
</pre></div>
</li>
<li class="level1"><div class="li"> Django ayant la vision sur votre nouvelle application, vous pouvez maintenant lui demander de générer la migration : <pre class="prettyprint">$ python manage.py makemigrations monapplication</pre></div>
</li>
<li class="level1"><div class="li"> Si les informations renvoyées sur le terminal ne sont pas assez verbeuses ou explicites pour vous, vous pouvez aller jeter un oeil dans le dossier migrations/xxxx_initial.py de votre application en question. Ou bien vous pouvez taper la commande suivante qui vous affichera le SQL qui sera executé à la prochaine commande migrate (dans cet exemple 0001 étant l&#039;itération de migration relative à votre application): <pre class="prettyprint">python manage.py sqlmigrate monapplication 0001</pre></div>
</li>
<li class="level1"><div class="li"> Si vous n&#039;êtes pas d&#039;accord avec ce que propose la migration ou que vous avez fait une erreur dans votre code, supprimer le fichier xxxx_initial.py généré dans monapplication/migrations/ et recommencer le protocole de migration à partir du point 1</div>
</li>
<li class="level1"><div class="li"> Quand tout est ok, vous aller pouvoir jouer la dernière commande de migration, celle qui impactera votre base de données. Soyez donc sûr de vos changements arrivé à cette étape : <pre class="prettyprint">$ python manage.py migrate</pre></div>
</li>
</ol>

</div>
<!-- EDIT5 SECTION "Migration de la base de données du projet" [5765-] -->