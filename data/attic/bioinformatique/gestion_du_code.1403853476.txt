Lors de la réunion du 26/06/2010, deux usages sont identifiés:
  - Développement de fonctions ou d'outils réutilisables dans tous les projets (p.ex. codes sous Matlab et R). Ces codes peuvent faire parti d'un pot commun.
    * <color red>**[TLC]** +1, en fait +1000 ! Je ne savais même pas qu'on pouvait travailler sans modules, //librairies// et code partagé !?</color>
  - Développement de scripts d'analyses qui chaînent des fonctions ou des outils (p.ex un flux de génomique). Ces codes sont spécifiques à chaque projet. 

  * **Proposition no 1**\\ Le code est documenté en début de script avec les informations suivantes : nom de l'auteur, date de création, a quoi sert le code, comment on l'utilise.
    * <color red>**[TLC]** Un des bénéfices annexes du //versionning// : le nom de(s) (l')auteur(s) et les dates de création/modification sont déjà inclus.</color>
    * <color red>**[TLC]** Pour la documentation, je propose d'utiliser un format standard comme celui de [[https://en.wikipedia.org/wiki/Doxygen#Example_code|Doxygen]].</color>
    * <color red>**[TLC]** Pour le manuel d'utilisation, merci de fournir un ''-h'' pour chaque script (encore mieux, un ''man'')</color> :-D
  * **Proposition no 2**\\ Les fonctions et les outils sont versionnées depuis l'espace de travail ([[si/outils/bazaar|bazaar est en test]]). Le code validée est copié dans l'espace projet. A priori, même les flux d'analyses codés dans les scripts sont versionnés.
    * <color red>**[TLC]** On développe en local (PC perso) ou sur un serveur de dev, puis on l'envoie sur le serveur de prod avec un "simple" ''bzr push''.</color>
    * <color red>**[TLC]** A priori on pourrait faire un truc plus sympa (et plus pédagogique) avec du //code review// (je suis en train de tester [[http://reviewboard.org|ReviewBoard]])</color>
  * **Proposition no 3**\\ A la fin d'un projet, il faudra copier l'ensemble des versions dans le projet.
    * <color red>**[TLC]** Si il est versionné avec un DVCS (donc pas SVN) il contient déjà toutes les versions !</color>
  * **Proposition no 4**\\ Il est nécessaire de suivre la version des binaires (p.ex. la version de R, de Python, etc.). Ceci peut être fait avec [[http://modules.sourceforge.net/|Environment Modules]].
    * <color red>**[TLC]** On ne peut pas garantir avec ''modules'' que la version sera disponible dans 5 ans.</color>

Points à étudier :
  * Faut-il utiliser Git ou Bazaar ?
    * <color red>**[TLC]** Git est peut-être plus "flexible" mais expose du même coup détails d'implémentation, faisant ainsi monter la difficulté d'apprentissage et les chances d'erreurs. Malgré ça il n'apporte aucune fonctionnalité supplémentaire qui pourrait nous intéresser.</color>
  * Faut-il utiliser Env. Modules ou autre choses ?
    * <color red>**[TLC]** Je n'étais pas convaincu par ''modules'' au début... mais maintenant je vois vraiment l'intérêt. En plus c'est simple à utiliser.</color>
  * Faut-il un repository général à BIOASTER pour Git/Bzr ?
    * <color red>**[TLC]** Je ne suis pas sûr d'avoir compris... un SEUL... ou un commun + d'autres par projet ? Pour moi la première solution est à éviter absolument !!</color>
  * Faut-il un suivie de logiciel générale à BIOASTER avec de fait un système d'installation et de mise à jour général ?
    * <color red>**[TLC]** Euh... //use case?//</color>