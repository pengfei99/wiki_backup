====== Cadre de développement web ======

^Critères                   ^^Solutions                                                                                   ^^^^^
^Fonctionnalité ^Pondération ^CakePHP            ^Symfony            ^Laravel            ^CherryPy                ^Django ^
|Documentation  |            |http://cakephp.org |http://symfony.com |http://laravel.com |http://www.cherrypy.org |https://www.djangoproject.com |
|Licence        |            |                   |                   |                   |                        | |
|Langage        |            |PHP                |PHP                |PHP                |Python                  |Python |
|Difficulté     |            |facile             |moyen              |moyen/difficile    |facile                  | |
|Installation   |            |manuelle           |composer           |composer           |package                 | |
|Backoffice     |            |non                |[[https://github.com/symfony2admingenerator/AdmingeneratorGeneratorBundle|AdmingeneratorGeneratorBundle]]           |?           |?                 |oui ([[https://riccardo.forina.me/bootstrap-your-django-admin-in-3-minutes/|bootstrapable]])|
|ORM            |            |simple             |[[http://symfony.com/doc/current/book/doctrine.html|Doctrine]] |[[http://laravel.com/docs/4.2/eloquent|Eloquent]]|[[http://www.sqlalchemy.org/library.html#tutorials|SQLAlchemy]]| |
|Migration      |            |[[https://pypi.python.org/pypi/yoyo-migrations|YoyoMigrations]] | [[http://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html|Doctrine]] | [[http://laravel.com/docs/4.2/migrations|Eloquent]] | [[http://sqlalchemy-migrate.readthedocs.org/en/latest/versioning.html|SQLAlchemy]]| |
|**M**odel      | | | | | | |
|**V**iew       |            |[[http://book.cakephp.org/2.0/en/views.html|PHP]] |[[http://twig.sensiolabs.org/|Twig]] (Django ?) |[[http://laravel.com/docs/4.2/templates|Blade]] |[[http://www.makotemplates.org|Mako]] | |
|**C**ontroller |            |                   | | | | |
|Organisation du code       | |classe, simple |classe |classe |? |fonction, bordélique ? |
|Routing        |            |classe/méthode     |statique, anntotion|pas intuitif !     |classe/méthode, @expose| |
|REST API       | | | | | | |


====== Django vs Symfony ======

===== Routes =====


===== Modèles =====


===== Contrôleurs =====

Dans Django, le code est rangé dans des ''Applications'' qui contiennent des ''fonctions|classes''. 
<code python polls/views.py>
from django.views import generic

from polls.models import Choice, Question

class IndexView(generic.ListView):
    template_name = 'polls/index.html'
    context_object_name = 'latest_question_list'
</code>

Dans Symfony, le code est rangé en ''Bundles'' puis en ''Classes'' qui contiennent des ''méthodes''.
<code php src/AppBundle/Controller/HelloController.php> 
namespace AppBundle\Controller;

use Symfony\Component\HttpFoundation\Response;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;

class HelloController
{
    /**
     * @Route("/hello/{name}", name="hello")
     */
    public function indexAction($name)
    {
        return new Response('<html><body>Hello '.$name.'!</body></html>');
    }
}
</code>

===== Vues =====
