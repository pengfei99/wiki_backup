====== Symfony ======

[[http://symfony.com|Symfony]] est un ensemble de composants réutilisables pour PHP qui permet de déployer rapidement des applications web. 

===== Créer un projet =====

Avant de démarrer un projet, assurez vous de connaitre [[developpement_de_projet|les bonnes pratiques de développement de projet]].

Installer l'outils ''symfony'' :

    $ curl -LsS http://symfony.com/installer > symfony.phar
    $ mv symfony.phar ~/bin/symfony
    $ chmod a+x ~/bin/symfony

Créer le squelette de l'application :

    $ symfony new mon_application

Supprimer le bundle de démo :

    A default bundle, AcmeDemoBundle, shows you Symfony2 in action. After playing with it, you can remove it by following these steps:
     * delete the src/Acme directory;
     * remove the routing entries referencing AcmeBundle in app/config/routing_dev.yml;
     * remove the AcmeBundle from the registered bundles in app/AppKernel.php.

===== Connecter une base de données =====

    $ composer require propel/propel-bundle "~2.0@dev"

<code php app/AppKernel.php>
$bundles = array(
    // …
    new Propel\PropelBundle\PropelBundle(),
);
</code>

<code yml app/config/parameters.yml>
parameters:
    database_driver: pdo_mysql
    database_host: 127.0.0.1
    database_port: null
    database_name: mon_application
    database_user: utilisateur
    database_password: mon_mot_de_passe
    mailer_transport: smtp
    mailer_host: 127.0.0.1
    mailer_user: null
    mailer_password: null
    locale: en
    secret: xyz
</code>

<code yml app/config/config.yml>
propel:
    dbal:
        driver:               %database_driver%
        user:                 %database_user%
        password:             %database_password%
        dsn:                  %database_driver%:host=%database_host%;dbname=%database_name%;charset=UTF8
        options:              {}
        attributes:           {}
</code>

    $ mkdir -p src/AppBundle/Resources/config

<code xml src/AppBundle/Resources/config/schema.xml>
<?xml version="1.0" encoding="UTF-8"?>
<database name="default" namespace="AppBundle\Model" defaultIdMethod="native">
</database>
</code>

    $ php app/console propel:database:create
    Use connection named default in dev environment.
    Database mon_application has been created.
    $ php app/console propel:build

===== Travailler avec la base de données =====

    $ vim src/AppBundle/Resources/config/schema.xml

<code xml src/AppBundle/Resources/config/schema.xml>
<?xml version="1.0" encoding="UTF-8"?>
<database name="default" namespace="AppBundle\Model" defaultIdMethod="native">

    <table name="user">
        <column name="id" type="integer" required="true" primaryKey="true" autoIncrement="true" />
        <column name="first_name" type="varchar" size="100" />
        <column name="last_name" type="varchar" size="100" />
    </table>

</database>
</code>

    $ php app/console propel:model:build
    >>        AppBundle    Generated model classes from schema.xml
    $ php app/console propel:migration:generate-diff
    …
    "PropelMigration_1426166067.php" file successfully created in […] /app/propel/migrations
    …
    $ php app/console propel:migration:status
    $ php app/console propel:migration:migrate

Pensez à ''commit'' le schéma et le code généré dans ''app/propel/migrations/'' et ''src/AppBundle/Model/''.

===== Charger des données =====

Pour des données "normales" à insérer dans la base après sa création on peut utiliser les ''fixtures'' de Propel :

    $ mkdir src/AppBundle/Resources/fixtures/

<code yml src/AppBundle/Resources/fixtures/001-users.yml>
AppBundle\Model\User:
    u1:
        first_name: Jean
        last_name: Dupond
    u2:
        first_name: Marie
        last_name: Dupont
</code>

    $ php app/console propel:fixtures:load @AppBundle

Pour générer automatiquement de fausses données, il vaut mieux utiliser [[https://github.com/willdurand/BazingaFakerBundle|le bundle approprié]] :

    $ composer require "willdurand/faker-bundle" "@stable"

<code php app/AppKernel.php>
if (in_array($this->getEnvironment(), array('dev', 'test'))) {
    // …
    $bundles[] = new Bazinga\Bundle\FakerBundle\BazingaFakerBundle();
}
</code>

<code yml app/config/config_dev.yml>
bazinga_faker:
    seed:       1234
    locale:     fr_FR
    entities:
        AppBundle\Model\User:
            number: 5
</code>

    $ php app/console faker:populate


<WRAP round todo>
\\
En cours…
</WRAP>

<WRAP round important >
Après de nombreux essais, je ne réussis toujours pas à faire fonctionner ''Propel'' avec ''SQLite''. Cela me gène car j'aime faire les //dév// avec ''SQLite''.\\
En pratique, ce n'est pas un problème car de toute façon la //prod// est en ''MySQL'' ou autre SGBD.
</WRAP>


===== Bonne pratiques =====

Cette liste de bonnes pratiques est tirée de [[http://symfony.com/doc/current/best_practices/index.html|la page "best practices" de Symfony]].

  * [[http://symfony.com/doc/current/best_practices/introduction.html|Introduction]]
    * you should not refactor your existing applications to comply with these best practices.

  * [[http://symfony.com/doc/current/best_practices/creating-the-project.html|Creating the project]]
    * Create only one bundle called AppBundle for your application logic
    * There is no need to prefix the AppBundle with your own vendor (e.g. AcmeAppBundle), because this application bundle is never going to be shared.
    * ''$ php app/console generate:bundle --namespace=AppBundle --dir=src --format=annotation --no-interaction''
    * app/Resources/, stores all the templates and the translation files

  * [[http://symfony.com/doc/current/best_practices/configuration.html|Configuration]]
    * Define the infrastructure-related configuration options in the app/config/parameters.yml file.
    * Define all your application's parameters in the app/config/parameters.yml.dist file.
    * Define the application behavior related configuration options in the app/config/config.yml file.
    * Use constants to define configuration options that rarely change.
    * Moving Sensitive Options Outside of Symfony Entirely

  * [[http://symfony.com/doc/current/best_practices/business-logic.html|Business Logic]]
    * "Services: Naming and Format"

  * [[http://symfony.com/doc/current/best_practices/controllers.html|Controllers]]
    * Symfony follows the philosophy of "thin controllers and fat models"
    * Use the ParamConverter trick to automatically query for Doctrine|Propel entities when it's simple and convenient.
    * Pre and Post Hooks

  * [[http://symfony.com/doc/current/best_practices/templates.html|Templates]]
    * Store all your application's templates in app/Resources/views/ directory.
    * Define your Twig extensions in the AppBundle/Twig/ directory and configure them using the app/config/services.yml file.
    * ex: a custom md2html Twig filter

  * [[http://symfony.com/doc/current/best_practices/forms.html|Forms]]
    * Define your forms as PHP classes… EntityType and createForm()
    * http://propelorm.org/Propel/cookbook/symfony2/mastering-symfony2-forms-with-propel.html
    * Add buttons in the templates, not in the form classes or the controllers.
    * Handling Form Submits […] we recommend using $form->isSubmitted() in the if statement for clarity.
    * (Always redirect after post!)

  * [[http://symfony.com/doc/current/best_practices/i18n.html|I18n]]
    * Use the XLIFF format for your translation files.
    * Always use keys for translations instead of content strings.
  
  * [[http://symfony.com/doc/current/best_practices/security.html|Security]]
    * Use the bcrypt encoder for encoding your users' passwords.
    * Whenever possible, use the @Security annotation
    * If your security logic is complex and can't be centralized into a method like isAuthor(), you should leverage custom voters.
    * with Propel http://propelorm.org/documentation/cookbook/symfony2/the-symfony2-security-component-and-propel.html

  * [[http://symfony.com/doc/current/best_practices/web-assets.html|Web-assets]]
    * Store your assets in the web/ directory.
    * Use Assetic to compile, combine and minimize web assets

  * [[http://symfony.com/doc/current/best_practices/tests.html|Tests]]
    * Define a functional test that at least checks if your application pages are successfully loading.

===== Divers =====

  * [[http://symfony.com/doc/current/book/routing.html|Routing]]
    * @Route("/blog/{page}", defaults={"page": 1}, requirements={"page": "\d+"})
    * @Method("POST")

  * [[http://symfony.com/doc/current/cookbook/assetic/jpeg_optimize.html|JPEG optimize]]

  * [[http://symfony.com/doc/current/book/testing.html|Testing]]

  * [[https://github.com/fzaninotto/Faker|Faker]]
    * Populating Entities Using an ORM
