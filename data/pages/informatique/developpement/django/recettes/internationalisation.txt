====== Internationalisation avec Django ======
===== Avant Propos =====


L'internationalisation (ou i18n) consiste à rendre tous les messages d'une application variables afin de pouvoir facilement les traduire sans avoir à regarder le code source d'un soft.
Ce tuto propose de mettre en place l'i18n pour un projet django et prendra comme exemple la branche ''feature-4'' du projet NoE. 

===== Mettre la variable locale dans les routes =====

La variable locale est une variable spéciale, elle se trouve dans l'URL d'un site et contient la langue que l'utilisateur souhaite afficher. Cela permet d'avoir des adresses du type ''monsite.com/fr'' ''monsite.com/en'' ''monsite.com/de'' etc.
==== Paramétrer le fichier settings.py ====
Paramétrez votre fichier settings.py de la façon suivante :
<code python>
# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/
LANGUAGE_CODE = 'en-us' #langue par défaut ie. si on écrit monsite.com dans la barre d'adresse, l'url sera remplacé par monsite.com/en
TIME_ZONE = 'Europe/Paris'
USE_I18N = True
USE_L10N = True
USE_TZ = True

TEMPLATES = [
    {
        ...
        'OPTIONS': {
            'context_processors': [
                ...
                'django.template.context_processors.i18n',
            ],
        },
    },
]

MIDDLEWARE_CLASSES = (
    ...
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    ...
)
</code>
Et paramétrez votre fichier ''urls.py'' de la façon suivante :
<code python>
from django.conf.urls.i18n import i18n_patterns

urlpatterns = i18n_patterns(
    url(r'^profile/', include('bauser.urls')),
    url(r'^auth/',include('auth_shib.urls')),
    url(r'^', include('core.urls')),
    url(r'^admin/', admin.site.urls),
)
</code>

Uniquement les URLs préfixées par la fonction ''i18n_patterns'' commenceront par la variable ''locale'' (''fr'', ''en'', ''de'' etc.). Dans l'exemple ci-dessus c'est le cas pour toutes les routes. Si certaines routes devraient ne pas être préfixées par la variable locale, alors il faut les déclarer au préalables dans la liste ''urlspatterns''. Par exemple ci-dessous nous voulons pouvoir appeler ''monsite.com/admin'' et pas ''monsite.com/fr/admin'' tout en gardant la variable locale pour les autres routes.

<code python>
from django.conf.urls.i18n import i18n_patterns

urlpatterns = [
    url(r'^admin/', admin.site.urls),
]

urlpatterns += i18n_patterns(
    url(r'^profile/', include('bauser.urls')),
    url(r'^auth/',include('auth_shib.urls')),
    url(r'^', include('core.urls')),
)
</code>

=== Exemple avec NoE ===
cf [[https://gitlab.in2p3.fr/bioaster/NoE/commit/9c9b617ecfda046ce631f32cba6c5c90cbef1bf2|[feature-4 9c9b617]]]

===== Configurer des fichiers de traductions =====

Il n'existe pas [[http://stackoverflow.com/questions/19174173/what-is-the-right-location-for-my-django-translation-files|d'endroit précis]] où mettre les fichiers de traduction. Nous choisirons de les mettre dans ''core/locale''.
Ainsi dans le fichier ''settings.py'' nous devons rajouter :
<code python>
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'core/locale'),
)
</code>

Si on veut autoriser que certaines langues dans notre application il faut définir les settings suivants  

<code python>
LANGUAGES = [
  ('fr', ugettext_lazy('French')),
  ('en', ugettext_lazy('English')),
]
</code>

===== Workflow =====
À chaque nouveau message (ou nouvel 'id') il faut que django l'ajoute dans le fichier plat (.po). Par la suite nous pouvons le compiler en .mo.
Le workflow est donc le suivant :
Nouveau message dans le code (vues ou controller) -> déclaration du nouveau message dans le .po -> compilation -> .mo
La commande pour créer les messages est ''python manage.py makemessages -l $LANG'' où ''$LANG'' peut être ''fr'' par exemple.
La commande pour compiler les messages crées est python ''manage.py compilemessages''

===== Traduire un message à partir du controller =====
Nous partirons du principe que nos IDs sont anglais et nous voulons les traduire en français.

Tout d'abord, définissez la route dans votre ''controller'' :
<code python>
# Translation tests
from django.http import HttpResponse
from django.utils.translation import ugettext
def translation_test(request):
    output = ugettext("Welcome to my site.")
    return HttpResponse(output)
</code> 
Vérifiez que vous avez bien défini la variable ''LOCALE_PATHS'' dans ''settings.py'' puis tapez : 
<code bash>
python manage.py makemessages -l fr
</code>
Puis éditez le fichier .po ainsi crée ( ''core/locale/fr/LC_MESSAGES/django.po'' ) afin de rajouter la traduction de "Welcome to my site.". Enfin, compilez votre fichier .po récemment modifié avec la commande : ''python manage.py compilemessages''

Bien sûr il faut configurer ''urls.py'' pour pouvoir appeler la méthode ''translation_test'' de votre controller :
<code python>
urlpatterns = i18n_patterns(
    url(r'^test/$', samples.translation_test, name='just_a_test'),
)
</code>

=== Exemple avec NoE ===
cf [[https://gitlab.in2p3.fr/bioaster/NoE/commit/16ffe8baaf1a6ffc4d94d5bcf7ad35682cbd137a|[feature-4 16ffe8b]]]
Testez par vous-même :
[[http://localhost:8000/en/test/|http://localhost:8000/en/test/]] et [[http://localhost:8000/fr/test/|http://localhost:8000/fr/test/]]

===== Traduire un message à partir du gabarit =====
Tout d'abord votre fichier template doit contenir ''{% load i18n %}'', même si il hérite d'un fichier chargeant lui-même le module ''i18n''.

Utilisez ensuite la balise trans dans votre fichier gabarit : ''{% trans "homepage" %}'' générer vos messages puis compilez-les avec les commandes django (cf [[informatique:developpement:django:recettes:internationalisation#workflow|workflow]]) et voilà !

Plus d'info sur comment jouer avec la traduction dans vos templates [[https://docs.djangoproject.com/fr/1.10/topics/i18n/translation/|ici]].

=== Exemple avec NoE ===
cf [[https://gitlab.in2p3.fr/bioaster/NoE/commit/2644fd04643edcf01dccdc24ce884ef65317a94b|[feature-4 2644fd0]]] : 'Homepage' est traduit dans la barre de navigation.

=== Commandes pour installation de l'application ===

Se placer à la racine du projet et taper : \\
<Code> python manage.py compilemessages </Code> \\

Pour les Mac users : \\
Il se peut qu'une erreur apparaisse. \\
Exemple : ''CommandError: Can't find msgfmt. Make sure you have GNU gettext tools 0.15 or newer installed.''\\
S'assurer que gettext est installé via un <Code>brew search gettext</Code>puis lancer cette commande : <Code>brew link gettext --force</Code> and "Voilà !" :)

===== Sources =====
! Attention les sources ne sont pas forcément toutes à jours !
  * https://docs.djangoproject.com/fr/1.10/topics/i18n/
  * https://docs.djangoproject.com/fr/1.10/topics/i18n/translation/
  * http://stackoverflow.com/questions/16768809/django-internationalization-minimal-example
  * http://www.marinamele.com/taskbuster-django-tutorial/internationalization-localization-languages-time-zones
  * http://www.stackoverflow.com/questions/19174173/what-is-the-right-location-for-my-django-translation-files
  * http://stackoverflow.com/questions/32536665/django-translation-not-working-in-my-case
  * http://stackoverflow.com/questions/39801933/should-i-recompile-po-files-to-mo-on-the-server-in-deployment-or-deploy-mo
  * http://stackoverflow.com/questions/974645/should-i-check-in-mo-files
