====== Lesson04 SQL advanced information ======


===== 4.1 Alias =====

An alias assigns a table or a column a temporary name in a query. The aliases only exist during the execution of the query.

<code>
# General format
SELECT column_name/expression AS alias_name FROM table [AS] alias_name

# Example
# a sql command without alias
SELECT first_name || ' ' || last_name FROM customer ORDER BY first_name || ' ' || last_name;
# the same command with alias
SELECT first_name || ' ' || last_name AS full_name FROM customer AS c ORDER BY full_name;
</code>

===== 4.2 Data control language (DCL) =====

DCL commands are used to enforce database security in multiple user database environments. Only Database Administrator's or owner's of the database object can provide/remove privileges on a database object.

There are two commands:
  * Grant -> Gives privileges to a user on a database object
  * Revoke -> Takes back privileges which are granted to the users

We have **Roles** in sql, It's easier to grant or revoke privileges to the users through a role rather than assigning a privilege directly to every user.

==== 4.2.1 Grant examples ====

<code>
# General format
Grant <privilege_name> on <object_name> to {PUBLIC|user_name|role_name} [WITH GRANT OPTION] 

# Example give user jack the select rights on the table employee
GRANT SELECT ON employee TO jack;
</code>

privilege_name could be:
  * select, 
  * insert, 
  * update, 
  * delete, 
  * truncate temporary, 
  * trigger create, 
  * connect, 
  * usage, 
  * execute,
  * ALL [privileges]

object_name could be:
  * table,
  * column, 
  * view, 
  * foreign table,
  * sequence, 
  * database, 
  * foreign-data wrapper, 
  * foreign server, 
  * function,
  * procedure, 
  * procedural language,
  * schema, 
  * tablespace.

==== 4.2.2 Revoke Example ====

<code>
Revoke <privilege_name> on <object_name> from {PUBLIC|user_name|role_name}
</code>

For the privilege_name, object_name, see the above Grant Example.

==== 4.2.3 Use role to manage privilege ====

To assign privileges to the user by using a role, we need to follow the following procedure.

  - CREATE ROLE <role_name>
  - GRANT <object_name> TO <role_name>
  - GRANT <role_name> TO <user_name> 

If we want to remove a role, we need to the following procedure.
  - REVOKE <object_name> FROM <role_name>
  - DROP ROLE <role_name>

===== 4.3 Transaction Control language (TCL) =====

TCL commands are used to manage transactions in the database. These are used to manage the changes made to the data in a table by DML statements. It also allows statements to be grouped together into logical transactions.

It has four commands:
  * COMMIT: Perform/Execute a transaction (apply the operations on the objects). All changes made by the transaction become visible to others and are guaranteed to be durable.
  * ROLLBACK: Rollbacks a transaction in case of any error occurs (restore to a previously defined state to recover).
  * SAVEPOINT: Sets a savepoint/restore point within a transaction (selectively discard parts of a transaction).
  * SET TRANSACTION: Specify characteristics for the transaction (isolation level access mode (R/W or R/O), and the deferrable mode).

===== 4.3.1 Transaction =====

When you execute the following INSERT statement: //INSERT INTO accounts(name,balance) VALUES('Bob',10000);// A new row is inserted into the accounts table immediately. In this case, you did not know when the transaction began and had no chance to intercept the change such as undoing it if something goes wrong.

A database transaction is a single unit of work which may consist of one or more operations accomplished in a logical order. Each transaction begins with a specific task and ends when all the tasks in the group successfully complete. If any of the tasks fail, the transaction fails. Therefore, a transaction has only two results: **SUCCESS** or **FAILURE**.

===== 4.3.2 COMMIT =====

**COMMIT** is used to save changes invoked by a transaction to the database. All changes made by the transaction become visible to others and are guaranteed to be durable if a crash occurs. To commit the current transaction and make all changes permanent, we use **COMMIT;**

==== Example ====

<code>
BEGIN;
UPDATE accounts SET balance = balance + 1000 WHERE id = 2;
COMMIT;
</code>

Note: The sql standard specifies two forms **COMMIT** and **COMMIT WORK**. In some IDE such as pgAdmin, it has autocommit Session Parameter.

===== 4.3.2 ROLLBACK =====

ROLLBACK aborts the current transaction. This command rolls back the current transaction and causes all the updates
made by the transaction to be discarded. To abort all changes: **ROLLBACK;**

==== Example ====

The following code will not do any changes on the database
<code>
BEGIN;
UPDATE accounts SET balance = balance + 1000 WHERE id = 2;
ROLLBACK;
</code>

Note: The SQL standard specifies two forms ROLLBACK and ROLLBACK WORK.

===== 4.3.3 SAVEPOINT =====

SAVEPOINT defines a new savepoint within the current transaction. A savepoint is a special mark inside a transaction that allows all commands that are executed after it was established to be rolled back, restoring the transaction state to what it was at the time of the savepoint. The following code establishes a savepoint:

<code>
BEGIN;
INSERT INTO table1 VALUES (1);
SAVEPOINT my_savepoint;
INSERT INTO table1 VALUES (2);
ROLLBACK TO SAVEPOINT my_savepoint;
INSERT INTO table1 VALUES (3);
RELEASE SAVEPOINT my_savepoint;
COMMIT;
</code>

===== 4.3.4 SET TRANSACTION =====

SET TRANSACTION set the characteristics of the current transaction. This command sets the characteristics of the current transaction. The available transaction characteristics are:
  * the transaction isolation level
  * the transaction access mode (read/write or read-only)
  * the deferrable mode

==== SET TRANSACTION ISOLATION LEVEL ====

<code>
SET TRANSACTION ISOLATION LEVEL [SERIALIZABLE | REPEATABLE READ | READ COMMITTED | READ UNCOMMITTED];
</code>

Note: These commands are defined in the SQL standard, except for the DEFERRABLE transaction mode. In the SQL standard, there is one other transaction characteristic that can be set with these commands: the size of the diagnostics area. This concept is specific to embedded SQL, and therefore is not implemented in standard RDBMS,

  * **READ COMMITTED**: A statement can only read rows committed before it began. This is the default.
  * **READ UNCOMMITTED**: Statements can read rows that have been modified by other transactions but not yet committed.
  * **REPEATABLE READ**: All statements of the current transaction can only see rows committed before the first query or data-modification statement was executed in this transaction.
  * **SERIALIZABLE**: 1. Statements cannot read data that has been modified but not yet committed by other transactions. 2. No other transactions can modify data that has been read by the current transaction until the current transaction completes. 3. Other transactions cannot insert new rows with key values that would fall in the range of keys read by any statements in the current transaction until the current transaction completes.

Note: The transaction isolation level cannot be changed after the first query or data modification
statement (SELECT, INSERT, DELETE, UPDATE, FETCH, or COPY) of a transaction has been executed.

==== Set transaction access mode ====

The transaction access mode determines whether the transaction is **read/write** or **read-only**. Read/write is the default. When a transaction is read-only, the following SQL commands are disallowed: INSERT, UPDATE, DELETE, and COPY FROM if the table they would write to is not a temporary table; all CREATE, ALTER, and DROP commands; COMMENT, GRANT, REVOKE, TRUNCATE; and
EXPLAIN ANALYZE and EXECUTE if the command they would execute is among those listed. This is a high-level notion of read-only that does not prevent all writes to disk.


==== Set deferrable mode ====

The DEFERRABLE transaction property has no effect unless the transaction is also SERIALIZABLE and READ ONLY. When all three of these properties are selected for a transaction, the transaction may block when first acquiring its snapshot, after which it is able to run without the normal overhead of a SERIALIZABLE transaction and without any risk of contributing to or being canceled by a serialization failure. This mode is well suited for long-running reports or backups.


===== 4.4 Advanced types =====

==== 4.4.1 Integer ====

Attempts to store values outside of the allowed range will result in an error.

==== 4.4.2 Numeric/Decimal ====

The type numeric can store numbers with a very large number of digits. It is especially recommended for storing monetary amounts and other quantities where exactness is required. In addition to ordinary numeric values, the numeric type allows the special value NaN, meaning “not-a-number”. Any operation on NaN yields another NaN.

When rounding values, the numeric type rounds ties away from zero, while the real and double precision types round ties to the nearest even number (depending on CPU architecture).

==== 4.4.3 Real/Double precision ====

Behaviors depend on the underlying processor, operating system, and compiler. If you require exact storage and calculations (such as for monetary amounts), use the numeric type instead.

Comparing two floating-point values for equality might not always work as expected. Values that are too large or too small will cause an error:
  * Rounding might take place if the precision of an input number is too high.
  * Numbers too close to zero that are not representable as distinct from zero will cause an underflow error.

In addition to ordinary numeric values, the floating-point types have several special values:
  * Infinity
  * -Infinity
  * NaN

IEEE754 specifies that NaN should not compare equal to any other floating point value. PostgreSQL treats NaN values as equal, and greater than all non-NaN values.

==== 4.4.4 smallserial, serial, bigserial ====

A NOT NULL constraint is applied to ensure that a null value cannot be inserted. You would also want to attach a UNIQUE or PRIMARY KEY constraint to prevent duplicate values from being inserted by accident. To insert the next value, this can be done either by excluding the column from the list of columns in the INSERT statement or through the use of the DEFAULT keyword. Another way is to use the SQL-standard identity column feature, described at CREATE TABLE ()

==== 4.4.5 Date/Time ====

The doc of date/time of the PostgreSQL https://www.postgresql.org/docs/current/datatype-datetime.html

==== 4.4.6 User-defined Data type (UDT) ====

User-defined Data Type (UDT) is introduced on SQL:1999, then extended on SQL:2011.

UDT is a data type that derived from an existing data type. You can use UDTs to extend the built-in types already available and create your own customized data types. There are two different types of UDT:
  * Distinct Type: A distinct type is a UDT that shares its internal representation with an existing built-in data type (its "source" type).
  * Structured Type: is a UDT that has a structure that is defined in the database. It contains a sequence of named attributes, each of which has a data type.

=== Distinct type creation example ===
<code>
# create a distinct type DollarUs with a decimal 9 digit before, and 2 digit after
CREATE DISTINCT TYPE DollarUS AS DECIMAL (9,2);

# create a table with distinct type
CREATE TABLE orders (
OrderID INTEGER PRIMARY KEY,
CustomerID INTEGER,
NetAmount DollarUS,
Tax DollarUS,
TotalAmount DollarUS,
);
</code>

=== Structured type creation example ===

<code>
# create a structure type
CREATE TYPE film_summary AS (
film_id INT,
title VARCHAR,
release_year YEAR
);

# create a table with structure type
CREATE TABLE film_box_office (
film_info film_summary,
total_income Long,
);

# Insert a value into the table film_box_office
INSERT INTO film_box_office(film_info,total_income) VALUES(ROW(1,'Forrest Gump',1994),9999999);

# Access structure type value
SELECT film_info.title FORM file_box_office WHERE film_info.release_year>'2000';


</code>

==== 4.4.7 Domain ====

A domain is a data type with optional constraints (e.g. NOT NULL, CHECK…)
  * A domain has a unique name within the schema scope.
  * A domain is useful for centralizing management of fields with common constraints.

For example, some tables might contain the text columns that require a CHECK constraint to ensure values are not null and also do not contain space.

<code>
CREATE DOMAIN contact AS VARCHAR NOT NULL CHECK (value !~ '\s');

CREATE TABLE mail_list (
id serial PRIMARY KEY,
first_name contact,
last_name contact,
email VARCHAR NOT NULL
);
</code>

==== 4.4.8 Sequences ====

A sequence is a special kind of database object that generates a sequence of integers. This involves creating and initializing a new special single-row table. 

<code>
# command for creating a sequence
CREATE [ TEMPORARY | TEMP ] SEQUENCE [ IF NOT EXISTS ] name
[ INCREMENT [ BY ] increment ]
[ MINVALUE minvalue | NO MINVALUE ]
[ MAXVALUE maxvalue | NO MAXVALUE ]
[ START [ WITH ] start ]

# command for examining the parameters and the current state of a sequence.
SELECT * FROM <sequence-name>;

# command for remove a sequence
DROP SEQUENCE <sequence-name>;
</code>

After a sequence is created, functions **nextval**, **currval**, and **setval** are used to operate on the sequence.

=== Postgresql SERIAL ===

PostgreSQL SERIAL pseudo-type is used to create an auto-increment column in a database table. It is a sequence used as a primary key column.

<code>
# Example of using serial type in a table
CREATE TABLE test(
id SERIAL,
…
);
</code>

When a serial type is used in a table, PostgreSQL will perform the following:
  * Creates a sequence object and set the next value generated by the sequence as the default value for the column.
  * Adds the NOT NULL constraint to the column because a sequence always generates an integer, which is a non-null value.
  * Assigns the owner of the sequence to the id column; as a result, the sequence object is deleted when the id column or table is dropped

Note: In mysql, we use auto_increment.

==== 4.4.9 NULL ====

NULL is a state not a value. 

<code>
# Because Null is not a data value, but a marker for an absent value, using mathematical operators on Null gives an unknown result
10 x NULL returns NULL
'Fish ' || NULL || 'Chips‘  returns NULL
SELECT 10 = NULL returns Unknown

# Null can return values if the absent value is not relevant to the outcome of the operation
SELECT NULL OR TRUE returns TRUE
</code>

Common mistakes when dealing with NULL

<code>
# comparison of the i column with Null always returns Unknown, as a result, the following query will always return zero rows.
SELECT * ZERO FROM t ROWS WHERE i = NULL;

# Rows where num is NULL will not be returned, the following query will not return rows with num is null
SELECT * FROM sometable WHERE num <> 1;

# Rows where string is NULL will not be returned.
SELECT * FROM sometable WHERE LENGTH(string) < 20;
</code>

===== 4.5 With Clause =====

The WITH Clause Provides a way to write auxiliary statements for use in a larger query. It helps in breaking down complicated and large queries into simpler forms, which are easily readable. It can be thought of as defining temporary tables that exist just for one query.

<code>
# The general form looks like:
With <temporary-tabName>(<column-name>) as (select statement which fills the temporary tables' columns),
select statement which can use temporary table
# note that, the temporary table can be used in from or where in the second select statement
</code>
==== With cluase example ====

Suppose we have a table with three columns(e.g. employeeId, name, salary), we want to get all employees whose salary is above average.
 
<code>
# The following sql query use with the clause to get the average salary first, then do a select by comparing the average salary.
WITH temporaryTable(averageValue) as
    (SELECT avg(Salary)
    from Employee), 
        SELECT EmployeeID,Name, Salary 
        FROM Employee, temporaryTable 
        WHERE Employee.Salary > temporaryTable.averageValue;
</code>
