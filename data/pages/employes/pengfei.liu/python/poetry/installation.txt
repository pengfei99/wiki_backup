====== 0. Introduction ======

**poetry** is a tool to handle 
  * dependency installation
  * Python project structure management
  * building and packaging of Python packages. 

It only needs one file to do all of that:**pyproject.toml**.

In other words, poetry uses pyproject.toml to replace 
  * setup.py
  * requirements.txt
  * setup.cfg
  * MANIFEST.in
  * the newly added Pipfile.

Below is an example of the pyproject.toml

<file .toml pyproject.toml>
[tool.poetry]
name = "my-package"
version = "0.1.0"
description = "The description of the package"

license = "MIT"

authors = [
    "SÃ©bastien Eustace <sebastien@eustace.io>"
]

readme = 'README.md'  # Markdown files are supported

repository = "https://github.com/python-poetry/poetry"
homepage = "https://github.com/python-poetry/poetry"

keywords = ['packaging', 'poetry']

[tool.poetry.dependencies]
python = "~2.7 || ^3.2"  # Compatible python versions must be declared here
toml = "^0.9"
# Dependencies with extras
requests = { version = "^2.13", extras = [ "security" ] }
# Python specific dependencies with prereleases allowed
pathlib2 = { version = "^2.2", python = "~2.7", allow-prereleases = true }
# Git dependencies
cleo = { git = "https://github.com/sdispater/cleo.git", branch = "master" }

# Optional dependencies (extras)
pendulum = { version = "^1.4", optional = true }

[tool.poetry.dev-dependencies]
pytest = "^3.0"
pytest-cov = "^2.4"

[tool.poetry.scripts]
my-script = 'my_package:main'
</file>


There are some things we can notice in this file:
  * It tries to enforce semantic versioning as the best practice in version naming.
  * You can specify the readme, included and excluded files: no more MANIFEST.in. poetry will also use VCS ignore files (like .gitignore) to populate the exclude section.
  * Keywords (up to 5) can be specified and will act as tags on the packaging site.
  * The dependencies sections support caret, tilde, wildcard, inequality and multiple requirements.
  * You must specify the python versions for which your package is compatible.

poetry will also detect if you are inside a virtualenv and install the packages accordingly. So, poetry can be installed globally and used everywhere.

poetry also comes with a full-fledged dependency resolution library.
====== 1. Install poetry ======
Please check https://pypi.org/project/poetry/ for more details.

Below is the instruction of how to install poetry on Ubuntu 20.01

<code>
# because ubuntu only provide python2 and python3 as python executable
# You can also run below command in a virtual env(e.g. conda or pyenv)
$ curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3


# The above command will install the poetry under ~/.poetry
# Update your current shell
$ source $HOME/.poetry/env

# update poetry
poetry self update

</code>

===== 1.1 Enable tab completion for Bash =====
<code>
# If Below command does not work 
poetry completions bash > /etc/bash_completion.d/poetry.bash-completion

# Generate the bash script
poetry completions bash

# and copy the generated script in the following file.
sudo vim /etc/bash_completion.d/poetry.bash-completion
</code>

===== 1.2 Test your poetry installation =====

<code>
$ poetry

# It should print following lines 
Poetry version 1.1.6

USAGE
  poetry [-h] [-q] [-v [<...>]] [-V] [--ansi] [--no-ansi] [-n] <command> [<arg1>] ... [<argN>]

ARGUMENTS
  <command>              The command to execute
  <arg>                  The arguments of the command

GLOBAL OPTIONS
  -h (--help)            Display this help message
</code>

====== 2. Create a python project with poetry ======


<code>
# Create a new project with name PythonTest
poetry new PythonTest
</code>

This will create the PythonTest project with these contents:

<code>
PythonTest
  pythontest
    __init__.py
  pyproject.toml
  README.rst
  tests
    __init__.py
    test_pythontest.py
</code>

===== 2.1 Add dependencies =====

<code>
# Here we want to add pyspark as project dependencies
$ poetry add pyspark
</code>

After you enter the above command, you will see that Poetry automatically created a virtual environment. And it starts to install the project dependencies on this virtual environment.

Even though we just ask poetry to install pyspark, but you will see it installs at least 10 packages. Because pyspark depends on other libraries like py4j. Poetry needs to add everything PySpark depends on to the project as well.

By default, Poetry installs pytest on your project. As pytest requires **py, importlib-metadata, and pluggy**, so those dependencies are added to the virtual environment too. 

==== 2.1.1 Poetry lock file ====


The **poetry add pyspark** command also creates a **poetry.lock** file. This file contains all the version details of your project dependencies. It can help your team to always test against the same dependency versions. However, this lock file will not have any effect on other projects that depend on it. It only has an effect on the main project. You may commit it or not, it will not affect your project too much.

==== 2.1.2 Add dependencies for developement ====

Some packages are only useful for development(e.g. testing framework dependencies). So we can add them as development dependencies, and they will be omitted when we build the project for production. 

For example, chispa is a framework for testing pyspark functions. So we add it only for developement.
<code>
poetry add chispa --dev

# In the pyproject.toml file, you will see the difference between normal and dev dependencies

[tool.poetry.dependencies]
python = "^3.8"
pyspark = "^3.1.1"
quinn = "^0.9.0"

[tool.poetry.dev-dependencies]
pytest = "^5.2"
chispa = "^0.8.2"
</code>

==== 2.1.3 Add dependencies by editing pyproject.toml====

You can change dependencies by editing pyproject.toml directly. But the poetry lock file will not be modified automatically. To update the lock file, you need to do the following command

<code>
# update poetry lock file by using the pyproject.toml
poetry update
</code>
===== 2.2 Pycharm integration =====

If you want to edit a poetry project via Pycharm. You need to do two things
  * Install poetry plugin
  * Configure your project python interpreter to use the virtual env generated by the poetry.

==== 2.2.1 Install poetry plugin ====

Click on File-> Settings-> Plugin. Then in the Search bar, type poetry. Install the found plugin.

==== 2.2.2 Configure project python interpreter  ====

Click on File-> Settings -> Project:<your-project-name> -> python interpreter

Click on add then choose poetry Environment. Note that poetry requires a python binary to run. So you need to specify a python binary path. For example, in linux you can get your current python bin

<code>
$ which python
# You can get python bin path of a conda env 
$ conda activate <env-name>
$ which python
</code> 

==== 2.2.3 Change default python test framework ====

Pycharm uses **unittest** as the default testing framework. But poetry framework uses **pytest** as the default testing framework. So you need to change the pycharm setting to enable pytest.

Click on File-> Settings -> Tools -> Python Integration Tools -> Testing -> Default Test runner :
Then choose pytest.

==== 2.2.4 Generate test class from python function source ====

Right-click on the function which you want to test -> Go to-> Test

If you already write the Test class, pycharm will jump to the test page. If you don't have a test class, it will generate one.

===== 2.3 Run a script in poetry project =====

<code>
# To run your script simply use 
$ poetry run python your_script.py.

# Likewise if you have command line tools such as pytest, you can run them using 
$ poetry run pytest.
</code>

===== 2.4 Add poetry support to an existing python project =====

<code>
# Go to the root folder of your python project
$ cd pre-existing-project

# Add poetry support
$ poetry init
</code>

====== 3. Import a poetry project to a new environment ======

===== 3.1 Import project and install dependencies via poetry =====


<code>
# Get the source of the project
git clone <project-url>

# Go to your project folder where it contains **pyproject.toml**
cd /path/to/your/project

# install your project dependencies to new environment
poetry install
</code>


===== 3.2 Run project in the newly created env =====

<code>
$ poetry run python your_script.py
# 1. **poetry run python** will produce a python virtual environment
# 2. **your_script.py** will be exectued in the virtual environment
</code>

===== 3.3 Create a Jupyter kernel based on the poetry virtual env =====

<code>
poetry run python -m ipykernel install --name spark_streaming_cv --user

# -m ipykernel: the -m flag runs a library as a script. In our case, it's **ipykernel**.
# --name spark_streaming_cv: is the name of the generated kernel
# --user: indicates where to store the kernel, without this option, ipykernel will try to 
#         store the kernel in '/usr/local/share/jupyter/kernels/'. With it, ipykernel will try to  
#         store the kernel in '~/.local/share/jupyter/kernels/'. In plain english, --user means this
#         kernel is only available for current user.
</code>

After the above command, you should see a new kernel in your jupyter kernel list.

===== 3.4 Remove a kernel =====

<code>
#  list existing kernel,
$ jupyter kernelspec list

# you can remove a kernel by using the general code "jupyter kernelspec remove <kernel-name>"
# Below is an example 
$ jupyter kernelspec remove spark_streaming_cv

</code>

===== 3.5 Change the name of a kernel =====

<code>
$ jupyter kernelspec list 
# Above command will show the detail of a kernel, you can find the folder of the kernel where it is located in

# In that folder, open up file kernel.json and edit option "display_name"

</code>

====== Appendix ======

===== Common Error =====

==== distutils.util module not found ====

If you see below error message when running poetry, it means your ubuntu miss the system package **python3-distutils**
<code>
ModuleNotFoundError: No module named 'distutils.util'
</code>

**Solution:**
<code>
sudo apt-get install python3-distutils
</code>

