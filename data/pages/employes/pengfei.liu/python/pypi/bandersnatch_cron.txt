====== The bandersnatch cron job  ======


The below steps are the mandatory steps in the cron job scripts:
  - Activate the virtual env that runs the `bandersnatch` and the `dependencies checker`
  - Run the dependencies checker to get the complete list of the packages with dependencies
  - Start the bandersnatch mirror process
  - zip the downloaded packages and index build.

===== 1. The cron job requirement =====


The cron job requires the complete installation of the bandersnatch and the conf file is provided. Below shows the requirements
which the installation needs to respect. 

  * has a valid venv that contains all the dependencies
  * has the required folders
  * has the dependencies checker script

==== 1.1 The required folders ====

If you followed the previous tutorial to install the bandersnatch, your directory should be organized as below:

<code>
pypi
    ├── bin: contains the dependencies checker script
    ├── conf: contains the bandersnatch conf
    ├── data: contains the mirrored packages and index 
    ├── export: the zipped release tagged with release date
    ├── log: corn job log
    └── venv: contains the venv that allows the scripts to run

</code>

==== 1.2 The required system dependencies ====

The corn job requires **zip** to build the release, so you need to install it

<code>
sudo apt install zip -y
</code>

==== 1.3 The dependencies checker ====

As I explained before, the Bandersnatch does not check the required dependencies for the mirrored package, so we write a script that can calculate the dependencies and update the Bandersnatch config file automatically. 

The repo git is here: https://github.com/CASD-EU/PyPiDepDetective


This script requires below package to run, so you need to install it in the bandersnatch venv

<code bash>
# change uid to bandersnatch
sudo su bandersnatch

# activate the venv if it's not activated
source ~/pypi/venv/bandersnatch/bin/activate

# install the packages
pip install requests johnnydep

# copy the above script in to below file
vim ~/pypi/bin/detective.py

# Test the script
python3 ~/pypi/bin/detective.py -h

# If you see the help page of the script, it means the installation is successful
</code>

===== 2. The corn job script =====

Now you have everything you need to run the below cron job script. 

<file bash pypi_build_release.sh>
uid=bandersnatch
root_path=/home/bandersnatch/pypi
log_file_path="${root_path}/log/bandersnatch_cron_log.out"
# repo_path contains all the downloaded packages and index build. It's specified in the bandersnatch.conf
# if you modify here, don't forget to update the bandersnatch.conf
repo_path="${root_path}/data/web"
export_repo_path="${root_path}/export"
release_date="$(date '+%Y%m%d')"

# set up log redirection
exec 3>&1 4>&2
trap 'exec 2>&4 1>&3' 0 1 2 3
exec 1>>"${log_file_path}" 2>&1

# Everything below will go to the file 'bandersnatch_cron_log.out':
# step 1 : Activate the virtual env
source "${root_path}/venv/bandersnatch/bin/activate"

# check python version
py_version = $(python -V 2>&1 | grep -Po '(?<=Python )(.+)')
if [[ -z "$py_version" ]]
then
    echo "No Python installed. Stop all"
    exit 1
fi

# step 2: Run the dependencies checker with the given bandersnatch conf file
python3 "${root_path}/bin/detective.py ${root_path}/conf/bandersnatch.conf"

# step 3: start the mirror process
bandersnatch -c "${root_path}/conf/bandersnatch.conf" mirror

# step 4: zip all the data and build a release
zip -r "${export_repo_path}/pypi-${release_date}.zip" "${repo_path}"

# step 5: show finish success
echo "Build release pypi-${release_date}.zip successfully"
</file>

===== 3. Test the corn job script  =====

==== 3.1 To test the script without crontab ====


<code bash>
sudo su bandersnatch

bash /path/to/pypi_build_release.sh
</code>

==== 3.2 To test the script with crontab ====

There are two possible way to set up the cron job:
  - set up cron job as root
  - set up cron job as bandersnatch

=== 3.2.1 As root ===

If you run the cron job in the root crontab, you need to add the uid bandersnatch to specify that the script need to run with uid bandersnatch

<code>
# the script will run at 6:00 am every Saturday
0 6 * * 6 bandersnatch /path/to/pypi_build_release.sh
</code>

=== 3.2.2 As bandersnatch ===

If you run the cron job in the bandersnatch crontab, you don't need to add the uid bandersnatch

<code>
# the script will run at 6:00 am every Saturday
0 6 * * 6 /path/to/pypi_build_release.sh
</code>





