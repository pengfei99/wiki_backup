====== java IO体系的学习总结 ======



===== 1.Java Io流的概念，分类，类图。 =====

==== 1.1 Java Io流的概念 ====

java的io是实现输入和输出的基础，可以方便的实现数据的输入和输出操作。在java中把不同的输入/输出源（键盘，文件，网络连接等）抽象表述为“流”(stream)。通过流的形式允许java程序使用相同的方式来访问不同的输入/输出源。stram是从起源（source）到接收的（sink）的有序数据。

注：java把所有的传统的流类型都放到在java io包下，用于实现输入和输出功能。

==== 1.2 Io流的分类： ====

按照不同的分类方式，可以把流分为不同的类型。常用的分类有三种：

=== 1.2.1 按照流的流向分，可以分为输入流和输出流。 ===

  * 输入流： 只能从中读取数据，而不能向其写入数据。
  * 输出流：只能向其写入数据，而不能向其读取数据。

此处的输入,输出涉及一个方向的问题，对于如图15.1所示的数据流向，数据从内存到硬盘，通常称为输出流——也就是说，这里的输入，输出都是从程序运行所在的内存的角度来划分的。

注：如果从硬盘的角度来考虑，图15.1所示的数据流应该是输入流才对；但划分输入/输出流时是从程序运行所在的内存的角度来考虑的，因此如图15.1所在的流时输出流。而不是输入流。

对于如图15.2所示的数据流向，数据从服务器通过网络流向客户端，在这种情况下,Server端的内存负责将数据输出到网络里，因此Server端的程序使用输出流；Client端的内存负责从网络中读取数据，因此Client端的程序应该使用输入流。

{{:employes:pengfei.liu:java:all_io:io_stream_direction.png?600|}}

=== 1.2.2 按照操作单元划分，可以划分为字节流(byte stream)和字符流(character stream) ===

字节流和字符流的用法几乎完成全一样，区别在于字节流和字符流所操作的数据单元不同，字节流操作的单元是数据单元是8位的字节，字符流操作的是数据单元为16位的字符。

字节流主要是由InputStream和outPutStream作为基类，而字符流则主要有Reader和Writer作为基类。

Note that Input/OutPutStream uses byte as the basic data entity. Reader/Writer uses char as the basic data entity.



{{:employes:pengfei.liu:java:all_io:io_stream_classification1.png?600|}}

=== 1.2.3 按照流的角色划分为节点流和处理流。 ===

可以从/向一个特定的IO设备（如磁盘，网络）读/写数据的流，称为节点流。节点流也被称为低级流。图15.3显示了节点流的示意图。从图15.3中可以看出，当使用节点流进行输入和输出时，程序直接连接到实际的数据源，和实际的输入/输出节点连接。

处理流则用于对一个已存在的流进行连接和封装，通过封装后的流来实现数据的读/写功能。处理流也被称为高级流。当使用处理流进行输入/输出时，程序并不会直接连接到实际的数据源，没有和实际的输入和输出节点连接。使用处理流的一个明显的好处是，只要使用相同的处理流，程序就可以采用完全相同的输入/输出代码来访问不同的数据源，随着处理流所包装的节点流的变化，程序实际所访问的数据源也相应的发生变化。

{{:employes:pengfei.liu:java:all_io:io_stream_classification2.png?600|}}
==== 1.3 流的原理浅析和常用的流的分类表： ====

=== 1.3.1 流的原理浅析: ===

java Io流共涉及40多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java Io流的40多个类都是从如下4个抽象类基类中派生出来的。

InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。
OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。
 
对于InputStream和Reader而言，它们把输入设备抽象成为一个”水管“，这个水管的每个“水滴”依次排列，如图15.5所示：
{{:employes:pengfei.liu:java:all_io:io_stream_theory.png?600|}}

从图15.5可以看出，字节流和字符流的处理方式其实很相似，只是它们处理的输入/输出单位不同而已。输入流使用隐式的记录指针来表示当前正准备从哪个“水滴”开始读取，每当程序从InputStream或者Reader里面取出一个或者多个“水滴”后，记录指针自定向后移动；除此之外，InputStream和Reader里面都提供了一些方法来控制记录指针的移动。

对于OutputStream和Writer而言，它们同样把输出设备抽象成一个”水管“，只是这个水管里面没有任何水滴.


Java的处理流模型则体现了Java输入和输出流设计的灵活性。处理流的功能主要体现在以下两个方面。

  * 性能的提高：主要以增加缓冲的方式来提供输入和输出的效率。
  * 操作的便捷：处理流可能提供了一系列便捷的方法来一次输入和输出大批量的内容，而不是输入/输出一个或者多个“水滴”。

1.3.2 java输入/输出流体系中常用的流的分类表

^分类	^字节输入流^	字节输出流^	字符输入流^	字符输出流^
|抽象基类|InputStream	|OutputStream	|Reader| Writer|
|访问文件|FileInputStream|FileOutputStream|FileReader|FileWriter|
|访问数组|ByteArrayInputStream|ByteArrayOutputStream|CharArrayReader|CharArrayWriter|
|访问管道|PipedInputStream|PipedOutputStream|PipedReader|PipedWriter|
|访问字符串| null | null |StringReader|	StringWriter|
|缓冲流	|BufferedInputStream|BufferedOutputStream|BufferedReader|BufferedWriter|
|转换流|null|null|InputStreamReader|OutputStreamWriter|
|对象流|ObjectInputStream|ObjectOutputStream|null|null|		
|抽象基类|FilterInputStream|FilterOutputStream|FilterReader|FilterWriter|
|打印流|null|PrintStream|null|PrintWriter|
|推回输入流|PushbackInputStream|null|PushbackReader|null|	
|特殊流|DataInputStream|DataOutputStream|null|null|

===== 2.常用的io流的用法 =====

下面是整理的常用的Io流的特性及使用方法，只有清楚每个Io流的特性和方法。才能在不同的需求面前正确的选择对应的IO流进行开发。

==== 2.1 Io体系的基类（InputStream/Reader，OutputStream/Writer）。 ====

字节流和字符流的操作方式基本一致，只是操作的数据单元不同——字节流的操作单元是字节，字符流的操作单元是字符。所以字节流和字符流就整理在一起了。

=== 2.1.1 InputStream/Reader ===

InputStream和Reader是所有输入流的抽象基类，本身并不能创建实例来执行输入，但它们将成为所有输入流的模板，所以它们的方法是所有输入流都可使用的方法。

**在InputStream里面包含如下3个方法。**

  * int read(); 从输入流中读取单个字节（相当于从图15.5所示的水管中取出一滴水），返回所读取的字节数据（字节数据可直接转换为int类型）
  * int read(byte[] b)从输入流中最多读取b.length个字节的数据，并将其存储在字节数组b中，返回实际读取的字节数。
  * int read(byte[] b,int off,int len); 从输入流中最多读取len个字节的数据，并将其存储在数组b中，放入数组b中时，并不是从数组起点开始，而是从off位置开始，返回实际读取的字节数。

**在Reader中包含如下3个方法。**

  * int read(); 从输入流中读取单个字符（相当于从图15.5所示的水管中取出一滴水），返回所读取的字符数据（字节数据可直接转换为int类型）。
  * int read(char[] b)从输入流中最多读取b.length个字符的数据，并将其存储在字节数组b中，返回实际读取的字符数。
  * int read(char[] b,int off,int len); 从输入流中最多读取len个字符的数据，并将其存储在数组b中，放入数组b中时，并不是从数组起点开始，而是从off位置开始，返回实际读取的字符数。

**InputStream和Reader提供的一些移动指针的方法：**

  * void mark(int readAheadLimit); 在记录指针当前位置记录一个标记（mark）
  * boolean markSupported(); 判断此输入流是否支持mark()操作，即是否支持记录标记。
  * void reset(); 将此流的记录指针重新定位到上一次记录标记（mark）的位置。
  * long skip(long n); 记录指针向前移动n个字节/字符。

=== 2.1.2 OutputStream和Writer ===

OutputStream和Writer的用法也非常相似,两个流都提供了如下三个方法：

  * void write(int c); 将指定的字节/字符输出到输出流中，其中c即可以代表字节，也可以代表字符。
  * void write(byte[]/char[] buf); 将字节数组/字符数组中的数据输出到指定输出流中。
  * void write(byte[]/char[] buf, int off,int len ); 将字节数组/字符数组中从off位置开始，长度为len的字节/字符输出到输出流中。

因为字符流直接以字符作为操作单位，所以Writer可以用字符串来代替字符数组，即以String对象作为参数。Writer里面还包含如下两个方法。
  * void write(String str); 将str字符串里包含的字符输出到指定输出流中。
  * void write (String str, int off, int len); 将str字符串里面从off位置开始，长度为len的字符输出到指定输出流中。

==== 2.2 Io体系的基类文件流的使用(FileInputStream/FileReader ，FileOutputStream/FileWriter) ====

前面说过InputStream和Reader都是抽象类，本身不能创建实例，但它们分别有一个用于读取文件的输入流：FileInputStream和FileReader，它们都是节点流, 会直接和指定文件关联。


==== 2.3 转换流的使用（InputStreamReader/OutputStreamWriter） ====

下面以获取键盘输入为例来介绍转换流的用法。java使用System.in代表输入。即键盘输入，但这个标准输入流是InputStream类的实例，使用不太方便，而且键盘输入内容都是文本内容，所以可以使用InputStreamReader将其包装成BufferedReader,利用BufferedReader的readLine()方法可以一次读取一行内容，如下代码所示:

<code java>
public class InputStreamReaderTest {
    public  static void main(String[] args)throws IOException {
        try {
            // 将System.in对象转化为Reader对象
            InputStreamReader reader=new InputStreamReader(System.in);
            //将普通的Reader包装成BufferedReader
            BufferedReader bufferedReader=new BufferedReader(reader);
           String buffer=null;
           while ((buffer=bufferedReader.readLine())!=null){
            // 如果读取到的字符串为“exit”,则程序退出
               if(buffer.equals("exit")){
                   System.exit(1);
               }
               //打印读取的内容
               System.out.print("输入内容："+buffer);
           }
        }catch (IOException e){
            e.printStackTrace();
        }finally {
        }
    }

</code>

==== 2.4 对象流的使用（ObjectInputStream/ObjectOutputStream ====

If we want to read or write object to a file, we should use ObjectInputStream/OutputStream. When use them to write object, it serialize the object to byte. When we use them to read, it deserialize the byte to object.

Write object example
<code java>
public static void writeObject(){
        OutputStream outputStream=null;
        BufferedOutputStream buf=null;
        ObjectOutputStream obj=null;
        try {
            //序列化文件輸出流
            outputStream=new FileOutputStream("E:\\learnproject\\Iotest\\lib\\src\\main\\java\\com\\myfile.tmp");
            //构建缓冲流
            buf=new BufferedOutputStream(outputStream);
            //构建字符输出的对象流
            obj=new ObjectOutputStream(buf);
            //序列化数据写入
            obj.writeObject(new Person("A", 21));//Person对象
            //关闭流
            obj.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

</code>

Read object example
<code java>
public static void readObject() throws IOException {
        try {
            InputStream inputStream=new FileInputStream("E:\\learnproject\\Iotest\\lib\\src\\main\\java\\com\\myfile.tmp");
            //构建缓冲流
            BufferedInputStream buf=new BufferedInputStream(inputStream);
            //构建字符输入的对象流
            ObjectInputStream obj=new ObjectInputStream(buf);
            Person tempPerson=(Person)obj.readObject();
            System.out.println("Person对象为："+tempPerson);
            //关闭流
            obj.close();
            buf.close();
            inputStream.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

</code>

IMportant note:
1.读取顺序和写入顺序一定要一致，不然会读取出错。
2.**在对象属性前面加transient关键字，则该对象的属性不会被序列化。**

===== 4.何为NIO,和传统Io有何区别？ =====

我们使用InputStream从输入流中读取数据时，如果没有读取到有效的数据，程序将在此处阻塞该线程的执行。其实传统的输入里和输出流都是阻塞式的进行输入和输出。 不仅如此，传统的输入流、输出流都是通过字节的移动来处理的（即使我们不直接处理字节流，但底层实现还是依赖于字节处理），也就是说，面向流的输入和输出一次只能处理一个字节，因此面向流的输入和输出系统效率通常不高。
    
从JDk1.4开始，java提供了一系列改进的输入和输出处理的新功能，这些功能被统称为新IO(NIO)。新增了许多用于处理输入和输出的类，这些类都被放在java.nio包及其子包下，并且对原io的很多类都以NIO为基础进行了改写。新增了满足NIO的功能。

NIO采用了内存映射对象的方式来处理输入和输出，NIO将文件或者文件的一块区域映射到内存中，这样就可以像访问内存一样来访问文件了。通过这种方式来进行输入/输出比传统的输入和输出要快的多。

JDk1.4使用NIO改写了传统Io后，传统Io的读写速度和NIO差不了太多。

===== 5.在开发中正确使用Io流 =====

    了解了java io的整体类结构和每个类的一下特性后，我们可以在开发的过程中根据需要灵活的使用不同的Io流进行开发。下面是我整理2点原则:

  * 如果是操作二进制文件那我们就使用字节流，如果操作的是文本文件那我们就使用字符流。
  * 尽可能的多使用处理流，这会使我们的代码更加灵活，复用性更好。

====== Appendix: Difference between byte and char ======

  - The first and foremost difference between byte and char is that byte is a signed data type while char is an unsigned data type. In signed data type first bit always represents a sign of the number.
  - Another difference between char and byte is that char(16 bit)is larger data type than a byte(8 bit). The range of byte is between -128 to 127 but the range of char is from 0 to 65535.
  - You can initialize a char variable using character literal e.g. char ch = 'c', in this case, ASCII value of character 'c' will be stored into char variable "ch".
  - The wrapper class corresponding to byte primitive is java.lang.Byte and the wrapper class corresponding to char primitive is java.lang.Character class.



