====== NIO学习总结 ======

===== 1.Java NIO 概览 =====


==== 1.1 NIO简介: ====

Java NIO 是 java 1.4, 之后新出的一套IO接口NIO中的N可以理解为Non-blocking，不单纯是New。

==== 1.2 NIO的特性/NIO与IO区别: ====


1)IO是面向流的，NIO是面向缓冲区的；
2)IO流是阻塞的，NIO流是不阻塞的;
3)NIO有选择器，而IO没有。

==== 1.3 读数据和写数据方式: ====


从通道(channel)进行数据读取 ：创建一个缓冲区(buffer)，然后请求通道读取数据。
从通道进行数据写入 ：创建一个缓冲区，填充数据，并要求通道写入数据。

==== 1.3 NIO核心组件简单介绍 ====

  * Channels
  * Buffers
  * Selectors

===== 2. Java NIO 之 Buffer(缓冲区) =====


==== 2.1 Buffer(缓冲区)介绍: ====

  * Java NIO Buffers用于和NIO Channel交互。 我们从Channel中读取数据到buffers里，从Buffer把数据写入到Channels；
  * Buffer本质上就是一块内存区；
  * 一个Buffer有三个属性是必须掌握的，分别是：capacity容量、position位置、limit限制。


==== 2.2 Buffer的常见方法 ====

  * Buffer clear(): empty buffer
  * Buffer compact(): 将所有未读的数据拷贝到Buffer起始处。然后将position设到最后一个未读元素后面。limit属性设置成capacity。现在Buffer准备好写数据了，但是不会覆盖未读的数据。
  * Buffer flip(): Reset limit to the current pointer position, then reset the pointer to 0  
  * Buffer rewind(): Reset pointer to 0
  * Buffer position(int newPosition): set pointer to the given position
  * mark() and reset(): mark标记Buffer中的一个特定position, 调用Buffer.reset()方法恢复到这个position


==== 2.3 Buffer的使用方式/方法介绍 ====

分配缓冲区（Allocating a Buffer）:

<code java>
//以ByteBuffer为例子 写入数据到缓冲区（Writing Data to a Buffer）
ByteBuffer buf = ByteBuffer.allocate(28); 
</code>


写数据到Buffer有两种方法：
<code java>
1. 从Channel中写数据到Buffer： 
int bytesRead = inChannel.read(buf); //read into buffer.

2. 通过put写数据： buf.put(127);
</code>
==== 2.4 Buffer常用方法测试 ====

说实话，NIO编程真的难，通过后面这个测试例子，你可能才能勉强理解前面说的Buffer方法的作用。

===== 3. Java NIO 之 Channel（通道） =====


==== 3.1 Channel（通道）介绍 ====

通常来说NIO中的所有IO都是从 Channel（通道） 开始的。

NIO Channel通道和流的区别：
  * 通道可以读也可以写，流一般来说是单向的（只能读或者写，所以之前我们用流进行IO操作的时候需要分别创建一个输入流和一个输出流）。
  * 通道可以异步读写。
  * 通道总是基于缓冲区Buffer来读写。

Java NIO中最重要的几个Channel的实现：
  * FileChannel： 用于文件的数据读写
  * DatagramChannel： 用于UDP的数据读写
  * SocketChannel： 用于TCP的数据读写，一般是客户端实现
  * ServerSocketChannel: 允许我们监听TCP链接请求，每个请求会创建会一个SocketChannel，一般是服务器实现
==== 3.2 FileChannel的使用 ====
Because FileChannel是抽象类, normally, we need to use the getChannel() method of InputStream ， OutputStream 或 RandomAccessFile 获取FileChannel. 

We can also convert other channels to FileChannel, for example, ByteChannel. They both implemented the SeekableByteChannel interface.

使用FileChannel读取数据到Buffer（缓冲区）以及利用Buffer（缓冲区）写入数据到FileChannel：

<code java>
public class FileChannelTxt{

    public static void main(String args[]) throws IOException{

//1.创建一个RandomAccessFile（随机访问文件）对象，        
RandomAccessFile raf=new RandomAccessFile("D:\\niodata.txt", "rw");

//通过RandomAccessFile对象的getChannel()方法。FileChannel是抽象类。        
FileChannel inChannel =raf.getChannel();

//2.创建一个读数据缓冲区对象
ByteBuffer buf=ByteBuffer.allocate(48);

//3.从通道中读取数据
int bytesRead = inChannel.read(buf);

//创建一个写数据缓冲区对象
ByteBuffer buf2=ByteBuffer.allocate(48);

//write data to buffer, then write buffer to channel
buf2.put("filechannel test".getBytes());
buf2.flip();
inChannel.write(buf);
  
while(bytesRead !=-1){

System.out.println("Read "+bytesRead);

//Buffer有两种模式，写模式和读模式。在写模式下调用flip()之后，Buffer从写模式变成读模式。
buf.flip();
   
//如果还有未读内容    
while(buf.hasRemaining()){
System.out.print((char)buf.get());

}

            
//清空缓存区
buf.clear();
bytesRead =inChannel.read(buf);
}
   
//关闭RandomAccessFile（随机访问文件）对象
raf.close();
}
}
</code>
==== 3.3 SocketChannel和ServerSocketChannel的使用 ====

利用SocketChannel和ServerSocketChannel实现客户端与服务器端简单通信：

SocketChannel 用于创建基于tcp协议的客户端对象，通过 connect()方法 ，SocketChannel对象可以连接到其他tcp服务器程序。

SeverSocketChannel use accept() method to accept connexion from client side.

For code example, please check Lesson01/Section05_Exploring_NIO/ChannelBasedIOExample.exp8(); 
==== ️3.4 DatagramChannel的使用 ====

DataGramChannel，类似于java 网络编程的DatagramSocket类；使用UDP进行网络传输， UDP是无连接，面向数据报文段的协议，对传输的数据不保证安全与完整 ；和上面介绍的SocketChannel和ServerSocketChannel的使用方法类似，所以这里就简单介绍一下如何使用

1. get a DataGramChannel
<code java>
//1.通过DatagramChannel的open()方法创建一个DatagramChannel对象
DatagramChannel datagramChannel = DatagramChannel.open();
        
//绑定一个port（端口）
datagramChannel.bind(new InetSocketAddress(1234));
</code>


2. 接收
<code java>
ByteBuffer buf =ByteBuffer.allocate(48);
buf.clear();
channel.receive(buf);
</code>

3. 发送消息
由于UDP下，服务端和客户端通信并不需要建立连接，只需要知道对方地址即可发出消息，但是是否发送成功或者成功被接收到是没有保证的;发送消息通过send方法发出，改方法返回一个int值，表示成功发送的字节数

这个例子发送一串字符：“datagramchannel”到主机名为”localhost”服务器的端口1234上。
<code java>
ByteBuffer buf =ByteBuffer.allocate(48);
buf.clear();
buf.put("datagramchannel".getBytes());
buf.flip();
int send = channel.send(buffer, new InetSocketAddress("localhost",1234));
</code>

==== 3.5 Scatter / Gather ====

Channel 提供了一种被称为 Scatter/Gather 的新功能，也称为本地矢量 I/O。Scatter/Gather 是指在多个缓冲区上实现一个简单的 I/O 操作。正确使用 Scatter / Gather可以明显提高性能。

大多数现代操作系统都支持本地矢量I/O（native vectored I/O）操作。当您在一个通道上请求一个Scatter/Gather操作时，该请求会被翻译为适当的本地调用来直接填充或抽取缓冲区，减少或避免了缓冲区拷贝和系统调用；

Scatter/Gather应该使用直接的ByteBuffers以从本地I/O获取最大性能优势。

  * Scatter: 从一个Channel读取的信息分散到N个缓冲区中(Buffer).
  * Gather: 将N个Buffer里面内容按照顺序发送到一个Channel.

Important note: 无论是scatter还是gather操作，都是按照buffer在数组中的顺序来依次读取或写入的
=== 3.5.1 Scattering Reads===

"scattering read"是把数据从单个Channel写入到多个buffer

<code java>
ByteBuffer header = ByteBuffer.allocate(128);
ByteBuffer body = ByteBuffer.allocate(1024);
//read()方法内部会负责把数据按顺序写进传入的buffer数组内。一个buffer写满后，接着写到下一个buffer中。
//举个例子，假如通道中有200个字节数据，那么header会被写入128个字节数据，body会被写入72个字节数据；
ByteBuffer[] bufferArray ={header,body};
channel.read(bufferArray);
</code>

=== 3.5.2 Gathering Writes===

"gathering write"把多个buffer的数据写入到同一个channel中
<code java>
ByteBuffer header = ByteBuffer.allocate(128);
ByteBuffer body = ByteBuffer.allocate(1024);
ByteBuffer[] bufferArray ={header,body};
//write()方法内部会负责把数据按顺序写入到channel中。
//并不是所有数据都写入到通道，写入的数据要根据position和limit的值来判断，只有position和limit之间的数据才会被写入；
// 举个例子，假如以上header缓冲区中有128个字节数据，但此时position=0，limit=58；那么只有下标索引为0-57的数据才会被写入到通道中。
channel.write(bufferArray);
</code>


==== 3.6 通道之间的数据传输 ====


在Java NIO中如果一个channel是FileChannel类型的，那么他可以直接把数据传输到另一个channel。
  * transferFrom() :transferFrom方法把数据从通道源传输到FileChannel
  * transferTo() :transferTo方法把FileChannel数据传输到另一个channel

=== 3.6.1 transferFrom ===

FileChannel的transferFrom()方法可以将数据从源通道传输到FileChannel中

<code java>
RandomAccessFile fromFile = new RandomAccessFile("fromFile.txt", "rw");  
FileChannel      fromChannel = fromFile.getChannel();  
 
RandomAccessFile toFile = new RandomAccessFile("toFile.txt", "rw");  
FileChannel      toChannel = toFile.getChannel();  
 
long position = 0;  
long count = fromChannel.size();  
 
toChannel.transferFrom(position, count, fromChannel);  
</code>

方法的输入参数position表示从position处开始向目标文件写入数据，count表示最多传输的字节数。如果源通道的剩余空间小于 count 个字节，则所传输的字节数要小于请求的字节数。

此外要注意，在SoketChannel的实现中，SocketChannel只会传输此刻准备好的数据（可能不足count字节）。因此，SocketChannel可能不会将请求的所有数据(count个字节)全部传输到FileChannel中。

=== 3.6.2 transferTo ===

<code java>
RandomAccessFile fromFile = new RandomAccessFile("fromFile.txt", "rw");  
FileChannel      fromChannel = fromFile.getChannel();  
 
RandomAccessFile toFile = new RandomAccessFile("toFile.txt", "rw");  
FileChannel      toChannel = toFile.getChannel();  
 
long position = 0;  
long count = fromChannel.size();  
 
fromChannel.transferTo(position, count, toChannel);  
</code>


===== 4. Selector =====

Selector 一般称 为选择器 ，当然你也可以翻译为 多路复用器 。它是Java NIO核心组件中的一个，用于检查一个或多个NIO Channel（通道）的状态是否处于可读、可写。如此可以实现单线程管理多个channels,也就是可以管理多个网络链接。

使用Selector的好处在于： 使用更少的线程来就可以来处理通道了， 相比使用多个线程，避免了线程上下文切换带来的开销。

==== 4.1 Use a Selector ====

=== 4.1.1 create a selector ===

<code java>

Selector selector = Selector.open();

</code>

=== 4.1.2 register a channel to a selector ===

<code java>

// channel must be not blocking
channel.configureBlocking(false);
// register() 方法的第二个参数 specifies the event(e.g. Connect, Accept, Read, Write) which the watcher will monitor
// in our case we monitor only read event 
SelectionKey key=channel.register(selector, Selectionkey.OP_READ)
</code>

FileChannel can't be used by a Selector, because it does not extend the abstract class SelectableChannel. So it does not have the method abstract SelectableChannel configureBlocking(boolean block). 

SelectableChannel抽象类的configureBlocking（） 方法是由 AbstractSelectableChannel抽象类实现的，SocketChannel、ServerSocketChannel、DatagramChannel都是直接继承了 AbstractSelectableChannel抽象类。

SelectionKey的四个常量:
  * SelectionKey.OP_CONNECT
  * SelectionKey.OP_ACCEPT
  * SelectionKey.OP_READ
  * SelectionKey.OP_WRITE

通道触发了一个事件意思是该事件已经就绪。比如某个Channel成功连接到另一个服务器称为“connect就绪 ”。一个Server Socket Channel准备好接收新进入的连接称为“accept就绪”。一个有数据可读的通道可以说是“ 读就绪 ”。等待写数据的通道可以说是“ 写就绪 ”。
<code java>
//如果你对不止一种事件感兴趣，使用或运算符即可 
int interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;
</code>

=== 4.1.3 SelectionKey ===

Once a channel is registered to a selector, A selectionKey is created, which offers following information

<code>
//返回SelectionKey的attachment，attachment可以在注册channel的时候指定。
key.attachment(); 

// 返回该SelectionKey对应的channel。
key.channel();
 
// 返回该SelectionKey对应的Selector。
key.selector();

//返回代表需要Selector监控的IO操作的bit mask
key.interestOps(); 

// 返回一个bit mask，代表在相应channel上可以进行的IO操作。
key.readyOps(); 

</code>

我们可以通过以下方法来判断Selector是否对Channel的某种事件感兴趣
<code java>
int interestSet = selectionKey.interestOps();
 

boolean isInterestedInAccept =(interestSet & SelectionKey.OP_ACCEPT) == SelectionKey.OP_ACCEPT；

boolean isInterestedInConnect = interestSet & SelectionKey.OP_CONNECT;

boolean isInterestedInRead = interestSet & SelectionKey.OP_READ;

boolean isInterestedInWrite = interestSet & SelectionKey.OP_WRITE;
</code>

我们可以通过以下方法来判断Channel这些操作是否就绪

<code java>
//创建ready集合的方法
int readySet = selectionKey.readyOps();

//检查这些操作是否就绪的方法
key.isAcceptable(); //是否可读，是返回 true
boolean isWritable()：//是否可写，是返回 true
boolean isConnectable()：//是否可连接，是返回 true
boolean isAcceptable ()：//是否可接收，是返回 true
</code>

可以将一个对象或者更多信息附着到SelectionKey上，这样就能方便的识别某个给定的通道。例如，可以附加 与通道一起使用的Buffer，或是包含聚集数据的某个对象。使用方法如下：

<code java> 
// during registration
SelectionKey key = channel.register(selector, SelectionKey.OP_READ,theObject);
// after registration
key.attach(theObject);
Object attachedObj =key.attachment();
</code>

==== 4.2 从Selector中选择channel(Selecting Channels via a Selector) ====

=== 4.2.1 Three different types of SelectionKey ===

In a Selector, we can find three different types of SelectionKey

  * 已注册的键的集合(Registered key set): 所有与选择器关联的通道所生成的键的集合称为已经注册的键的集合。并不是所有注册过的键都仍然有效。这个集合通过 keys() 方法返回，并且可能是空的。这个已注册的键的集合不是可以直接修改的；试图这么做的话将引发java.lang.UnsupportedOperationException。
  * 已选择的键的集合(Selected key set): 所有与选择器关联的通道所生成的键的集合称为已经注册的键的集合。并不是所有注册过的键都仍然有效。这个集合通过 keys() 方法返回，并且可能是空的。这个已注册的键的集合不是可以直接修改的；试图这么做的话将引发java.lang.UnsupportedOperationException。
  * 已取消的键的集合(Cancelled key set): 已注册的键的集合的子集，这个集合包含了 cancel() 方法被调用过的键(这个键已经被无效化)，但它们还没有被注销。这个集合是选择器对象的私有成员，因而无法直接访问。

注意：当键被取消（ 可以通过isValid( ) 方法来判断）时，它将被放在相关的选择器的已取消的键的集合里。注册不会立即被取消，但键会立即失效。当再次调用 select( ) 方法时（或者一个正在进行的select()调用结束时），已取消的键的集合中的被取消的键将被清理掉，并且相应的注销也将完成。通道会被注销，而新的SelectionKey将被返回。当通道关闭时，所有相关的键会自动取消（记住，一个通道可以被注册到多个选择器上）。当选择器关闭时，所有被注册到该选择器的通道都将被注销，并且相关的键将立即被无效化（取消）。一旦键被无效化，调用它的与选择相关的方法就将抛出CancelledKeyException。

=== 4.2.2 select()方法介绍===

在刚初始化的Selector对象中，这三个集合都是空的。 通过Selector的select（）方法可以选择已经准备就绪的通道 （这些通道包含你感兴趣的的事件）。比如你对读就绪的通道感兴趣，那么select（）方法就会返回读事件已经就绪的那些通道。下面是Selector几个重载的select()方法：
  * int select()：阻塞到至少有一个通道在你注册的事件上就绪了。
  * int select(long timeout)：和select()一样，但最长阻塞时间为timeout毫秒。
  * int selectNow()：非阻塞，只要有通道就绪就立刻返回。

**select()方法返回的int值表示有多少通道已经就绪,是自上次调用select()方法后有多少通道变成就绪状态。之前在select（）调用时进入就绪的通道不会在本次调用中被记入，而在前一次select（）调用进入就绪但现在已经不在处于就绪的通道也不会被记入**。例如：首次调用select()方法，如果有一个通道变成就绪状态，返回了1，若再次调用select()方法，如果另一个通道就绪了，它会再次返回1。如果对第一个就绪的channel没有做任何操作，现在就有两个就绪的通道，但在每次select()方法调用之间，只有一个通道就绪了。

**一旦调用select()方法，并且返回值不为0时，则 可以通过调用Selector的selectedKeys()方法来访问已选择键集合**

=== 4.2.3 停止选择的方法 ===
选择器执行选择的过程，系统底层会依次询问每个通道是否已经就绪，这个过程可能会造成调用线程进入阻塞状态,那么我们有以下三种方式可以唤醒在select（）方法中阻塞的线程。

  * wakeup()方法 ：通过调用Selector对象的wakeup（）方法让处在阻塞状态的select()方法立刻返回 该方法使得选择器上的第一个还没有返回的选择操作立即返回。如果当前没有进行中的选择操作，那么下一次对select()方法的一次调用将立即返回。
  * close()方法 ：通过close（）方法关闭Selector， 该方法使得任何一个在选择操作中阻塞的线程都被唤醒（类似wakeup（）），同时使得注册到该Selector的所有Channel被注销，所有的键将被取消，但是Channel本身并不会关闭。

For code example, please visit my gitup Lesson01_Section05_Exploring_NIO   ChannelBasedIOExample.exp9();

===== 5. Java NIO之Path和Files =====

==== 5.1 文件I/O基石：Path： ====

  * 创建一个Path
  * File和Path之间的转换，File和URI之间的转换
  * 获取Path的相关信息
  * 移除Path中的冗余项

==== 5.2 拥抱Files类： ====

  * Files.exists() 检测文件路径是否存在
  * Files.createFile() 创建文件
  * Files.createDirectories()和Files.createDirectory()创建文件夹
  * Files.delete()方法 可以删除一个文件或目录
  * Files.copy()方法可以吧一个文件从一个地址复制到另一个位置
  * 获取文件属性
  * 遍历一个文件夹
  * Files.walkFileTree()遍历整个目录