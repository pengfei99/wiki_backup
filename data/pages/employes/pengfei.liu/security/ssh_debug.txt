====== SSH debug ======

====== Set up SSH keys on Centos7 ======

===== 1. Generate ssh key paire =====

If you already have a ssh key paire, you can skip this step.

<code>
# By default, ssh-keygen will create a 2048-bit RSA key pair, which is secure enough for most use cases (you may optionally pass in the -b 4096 flag to create a larger 4096-bit key).
ssh-keygen

</code>

After entering the command, you should see the following prompt:

<code>
Output
Generating public/private rsa key pair.
Enter file in which to save the key (/your_home/.ssh/id_rsa):
</code>

Press ENTER to save the key pair into the .ssh/ subdirectory in your home directory, or specify an alternate path.

If you had previously generated an SSH key pair, you may see the following prompt:

<code>
Output
/home/your_home/.ssh/id_rsa already exists.
Overwrite (y/n)?
</code>

If you choose to overwrite the key on disk, you will not be able to authenticate using the previous key anymore. Be very careful when selecting yes, as this is a destructive process that cannot be reversed.

You should then see the following prompt:

<code>
Output
Enter passphrase (empty for no passphrase):
</code>

===== 2. Copy the Public Key to Centos7 Server =====

<code>
# It's recommended to use the ssh-copy-id command to copy the public key
ssh-copy-id -i .ssh/id_rsa pliu@159.84.108.191

# To do this, you must have password access to the server, if you don't give -i option, it will find automatically the id_rsa.pub key and upload it to the server 
</code>

If you don't have the ssh-copy-id, you need to copy the public key manully

</code>
# create the folder .ssh
mkdir -p ~/.ssh
chown pliu:pliu -R ~/.ssh
chmod 0700 -R ~/.ssh

# copy the public key
vim authorized_keys
chown pliu:pliu authorized_keys
chmod 0600 -R authorized_keys
</code>

====== Common problems ======

===== 1. Can't login after adding authorized_keys =====
You have done all the above steps, but it still doesn't work 

==== 1.1 Check first acl of .ssh and authorized_keys ====

<code>

# check the right of .ssh and authorized_keys
chmod -R 0700 .ssh 
chmod 0600 authorized_keys

</code>

==== 1.2 Check if your uid is in the allowusers and allowgroups ====

<code>
# Check sshd_config
vim /etc/ssh/sshd_config
#  check if pliu is in the AllowUsers or his group in AllowGroups
</code>

==== 1.3 run sshd on debug mode ====

<code>
systemctl stop sshd

# The following command start openssh daemon in standalone debug mode and messages will be displayed on the screen. You may specify up to three -d for increased output verbosity.

/sbin/sshd -p <listening port> -D -d -e

# if you want sshd still runs on 22, you can just skip -p <listening port>
# 

# Be careful, when u do this, don't deconnect, because you will not be able to reconnect.
</code>



 
 