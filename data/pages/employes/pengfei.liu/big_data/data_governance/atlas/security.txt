======= Atlas Security configuration =======

===== 1. Authentication =====


Atlas supports three different authentications by default:

  * File Authentication
  * LDAP Authentication
  * Kerberos
  * Keycloack (in version 2.0 or more)

If you want to use one of the above authentication types, you need to configure **atlas-application.properties** file which is under **/usr/hdp/current/atlas-server/conf**

<code>
# set true if you want to active one authentication method
atlas.authentication.method.kerberos=true|false
atlas.authentication.method.ldap=true|false
atlas.authentication.method.file=true|false

</code>

==== 1.1 File authentication ====
In the **atlas-application.properties** file, put the following lines

<code>
# Specify that you want to use file authentication
atlas.authentication.method.file=true

# The default file for user login and pwd is under /usr/hdp/current/atlas-server/conf/users-credentials.properties. If you want to specify another file, change the file path of the following command
atlas.authentication.method.file.filename=${sys:atlas.home}/conf/users-credentials.properties

</code>


# The users credentials file should have below format
<code>
username=group::sha256-password

# For example 
admin=ADMIN::e7cf3ef4f17c3999a94f2c6f612e8a888e5b1026878e4e19398b23bd38ec221a

</code>
Users group can be either **ROLE_ADMIN, ROLE_DATA_STEWARD OR ROLE_DATA_SCIENTIST**


You can use the following command to generate the password hash

<code>
echo -n "Password" | sha256sum
e7cf3ef4f17c3999a94f2c6f612e8a888e5b1026878e4e19398b23bd38ec221a  -
</code>

==== 1.2 Kerberos authentication ====

To enable the authentication in Kerberos mode in Atlas, set the property atlas.authentication.method.kerberos to true in atlas-application.properties
<code>
atlas.authentication.method.kerberos = true

# kerberos config
atlas.authentication.method.kerberos.principal=<principal>/<fqdn>@EXAMPLE.COM
atlas.authentication.method.kerberos.keytab = /<key tab filepath>.keytab
atlas.authentication.method.kerberos.name.rules = RULE:[2:$1@$0](atlas@EXAMPLE.COM)s/.*/atlas/
</code>

==== 1.3 Ldap authentication ====

To enable the authentication in LDAP mode in Atlas, set the property atlas.authentication.method.ldap to true and also set Ldap type to property **atlas.authentication.method.ldap.type** to **LDAP** or **AD** in atlas-application.properties. Use AD if connecting to Active Directory.

<code>
atlas.authentication.method.ldap=true
atlas.authentication.method.ldap.type=ldap|ad
</code>

=== 1.3.1 Active Directory ===

<code>
atlas.authentication.method.ldap.ad.domain= example.com
atlas.authentication.method.ldap.ad.url=ldap://<AD server ip>:389
atlas.authentication.method.ldap.ad.base.dn=DC=example,DC=com
atlas.authentication.method.ldap.ad.bind.dn=CN=Administrator,CN=Users,DC=example,DC=com
atlas.authentication.method.ldap.ad.bind.password=<password>
atlas.authentication.method.ldap.ad.referral=ignore
atlas.authentication.method.ldap.ad.user.searchfilter=(sAMAccountName={0})
atlas.authentication.method.ldap.ad.default.role=ROLE_USER
</code>

=== 1.3.2 LDAP Directory ===

<code>
atlas.authentication.method.ldap.url=ldap://<Ldap server ip>:389
atlas.authentication.method.ldap.userDNpattern=uid={0],ou=users,dc=example,dc=com
atlas.authentication.method.ldap.groupSearchBase=dc=example,dc=com
atlas.authentication.method.ldap.groupSearchFilter=(member=cn={0},ou=users,dc=example,dc=com
atlas.authentication.method.ldap.groupRoleAttribute=cn
atlas.authentication.method.ldap.base.dn=dc=example,dc=com
atlas.authentication.method.ldap.bind.dn=cn=Manager,dc=example,dc=com
atlas.authentication.method.ldap.bind.password=<password>
atlas.authentication.method.ldap.referral=ignore
atlas.authentication.method.ldap.user.searchfilter=(uid={0})
atlas.authentication.method.ldap.default.role=ROLE_USER
</code>

==== 1.4 keycloak ====

<code>
# enable keycloak
atlas.authentication.method.keycloak=true
# add keycloak config file
atlas.authentication.method.keycloak.file=/opt/apache-atlas-2.1.0/conf/keycloak.json
#
atlas.authentication.method.keycloak.ugi-groups=false

</code>

<file .json keycloak.json>
{
  "realm": "sspcloud",
  "auth-server-url": "https://auth.lab.sspcloud.fr/auth",
  "ssl-required": "external",
  "resource": "atlas",
  "public-client": true,
  "confidential-port": 0,
  "principal-attribute": "preferred_username",
  "autodetect-bearer-only": true
}

</file>

===== 4. Authorization =====
Atlas supports two authorization methods
  * Simple
  * Ranger

To set authorization in atlas, update the **atlas.authorizer.impl** properties in **atlas-application.properties**
<code>
atlas.authorizer.impl=simple | ranger | <Qualified Authorizer Class Name>
</code>

==== 4.1 Simple Authorizer ====

In Simple Authorizer the policy store file is configured locally. The path of policy store file is set in atlas.auth.policy.file property of atlas-application.properties

<code>
atlas.authorizer.impl=simple
# add a file authorizer
atlas.auth.policy.file={{conf_dir}}/policy-store.txt
# add a json authorizer
atlas.authorizer.simple.authz.policy.file={{conf_dir}}/sspcloud-auth-policy.json
</code>

=== 4.1.1 Text file authorizer (deprecated since version 2.0)===

The policy store file format is as follows:

<code>
# General format
Policy_Name;;User_Name:Operations_Allowed;;Group_Name:Operations_Allowed;;Resource_Type:Resource_Name

# Example of an admin policy, admin can do everything
adminPolicy;;admin:rwud;;ROLE_ADMIN:rwud;;type:*,entity:*,operation:*,taxonomy:*,term:*
</code>

Note : The **User_Name**, **Group_Name** and **Operations_Allowed** are comma(,) separated lists.

Authorizer Resource Types:

  * Operation
  * Type
  * Entity
  * Taxonomy
  * Term
  * Unknown

Operations_Allowed are r = read, w = write, u = update, d = delete

=== 4.1.2 json file authorizer ===

<file .json sspcloud_authorization_policy.json>
{
  "roles": {
    "ROLE_ADMIN": {
      "adminPermissions": [
        {
          "privileges": [
            ".*"
          ]
        }
      ],
      "typePermissions": [
        {
          "privileges": [
            ".*"
          ],
          "typeCategories": [
            ".*"
          ],
          "typeNames": [
            ".*"
          ]
        }
      ],
      "entityPermissions": [
        {
          "privileges": [
            ".*"
          ],
          "entityTypes": [
            ".*"
          ],
          "entityIds": [
            ".*"
          ],
          "classifications": [
            ".*"
          ],
          "labels": [
            ".*"
          ],
          "businessMetadata": [
            ".*"
          ],
          "attributes": [
            ".*"
          ]
        }
      ],
      "relationshipPermissions": [
        {
          "privileges": [
            ".*"
          ],
          "relationshipTypes": [
            ".*"
          ],
          "end1EntityType": [
            ".*"
          ],
          "end1EntityId": [
            ".*"
          ],
          "end1EntityClassification": [
            ".*"
          ],
          "end2EntityType": [
            ".*"
          ],
          "end2EntityId": [
            ".*"
          ],
          "end2EntityClassification": [
            ".*"
          ]
        }
      ]
    },
    "DATA_SCIENTIST": {
      "entityPermissions": [
        {
          "privileges": [
            "entity-read",
            "entity-read-classification"
          ],
          "entityTypes": [
            ".*"
          ],
          "entityIds": [
            ".*"
          ],
          "classifications": [
            ".*"
          ]
        }
      ]
    },
    "DATA_STEWARD": {
      "entityPermissions": [
        {
          "privileges": [
            "entity-read",
            "entity-create",
            "entity-update",
            "entity-read-classification",
            "entity-add-classification",
            "entity-update-classification",
            "entity-remove-classification"
          ],
          "entityTypes": [
            ".*"
          ],
          "entityIds": [
            ".*"
          ],
          "classifications": [
            ".*"
          ]
        }
      ],
      "relationshipPermissions": [
        {
          "privileges": [
            "add-relationship",
            "update-relationship",
            "remove-relationship"
          ],
          "relationshipTypes": [
            ".*"
          ],
          "end1EntityType": [
            ".*"
          ],
          "end1EntityId": [
            ".*"
          ],
          "end1EntityClassification": [
            ".*"
          ],
          "end2EntityType": [
            ".*"
          ],
          "end2EntityId": [
            ".*"
          ],
          "end2EntityClassification": [
            ".*"
          ]
        }
      ]
    }
  },
  "userRoles": {},
  "groupRoles": {
    "Atlas_role_admin": [
      "ROLE_ADMIN"
    ],
    "Atlas_data_steward": [
      "DATA_STEWARD"
    ],
    "Atlas_data_scientist": [
      "DATA_SCIENTIST"
    ]
  }
}

</file>

==== 4.2 Ranger Authorizer ====

Ranger Authorizer is enabled by activating Atlas-Ranger plugin from Ambari.

For more details visit the http://ranger.apache.org/