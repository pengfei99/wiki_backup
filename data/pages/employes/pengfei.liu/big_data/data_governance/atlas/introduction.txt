====== Apache Atlas ======

I will not spent my time on explaining the architecture of atlas, we can find all that on Atlas official site : https://atlas.apache.org/


===== 1. Atlas important feature =====


==== 1.1 Types ====

Official doc : https://atlas.apache.org/TypeSystem.html

All meta data stored in atlas must have a type, for example, metadata which describes a table in hive must have type hive_table.  A type represents one or a collection of attributes that define the properties for the metadata object.

We can consider a type is like a definiion of class. It also has hierarchy, for example, type hive_table extends the super type DataSet. A type contains a set of attributes, an attribute has a name and a 'metatype'. Atlas supports following metatypes:

  * Primitive metatypes : boolean, byte, short, int, long, float, double, biginteger, bigdecimal, string, date
  * Enum metatypes
  * Collection metatypes: array, map
  * Composite metatypes: Entity, Struct, Classification, Relationship

==== 1.2 Entities =====

An 'entity' is a specific value of an instance of an Entity 'type' and thus represents a specific metadata object in the real world. For example, all predefined types(e.g. hive_table, avro_record, etc.) in Atlas is an entity. If the entity you want to use does not exist, you can define your own entity. See the examples in [[employes:pengfei.liu:big_data:data_governance:atlas:rest_api|Rest Api of atlas]]

An entity is identified by a unique identifier, a GUID. This GUID is generated by the Atlas server when the object is created. The GUID will not be modified during the entity life-time.




==== 1.3 System specific types and their significance ====

Atlas comes with a few pre-defined system types such as :

  *  **Referenceable**: This type represents all entities that can be searched for using a unique attribute called qualifiedName.

  * **Asset**: This type extends Referenceable and adds attributes like name, description and owner. Name is a required attribute (isOptional=false), the others are optional. The purpose of Referenceable and Asset is to provide modellers with way to enforce consistency when defining and querying entities of their own types. Having these fixed set of attributes allows applications and user interfaces to make convention based assumptions about what attributes they can expect of types by default.

  * **Infrastructure**: This type extends Asset and typically can be used to be a common super type for infrastructural metadata objects like clusters, hosts etc.

  * **DataSet**: This type extends Referenceable. Conceptually, it can be used to represent an type that stores data. In Atlas, hive tables, hbase_tables etc are all types that extend from DataSet. Types that extend DataSet can be expected to have a Schema in the sense that they would have an attribute that defines attributes of that dataset. For e.g. the columns attribute in a hive_table. Also entities of types that extend DataSet participate in data transformation and this transformation can be captured by Atlas via lineage (or provenance) graphs.
 
 * **Process**: This type extends Asset. Conceptually, it can be used to represent any data transformation operation. For example, an ETL process that transforms a hive table with raw data to another hive table that stores some aggregate can be a specific type that extends the Process type. A Process type has two specific attributes, inputs and outputs. Both inputs and outputs are arrays of DataSet entities. Thus an instance of a Process type can use these inputs and outputs to capture how the lineage of a DataSet evolves.


These super type are important when you need to define your own type. For example, we have files stored in a gpfs 
server. There is no pre-define type for it. So we need to create a new type in atlas to repsent all data files entities in gpfs.



 
