====== Spark socket streaming ======


Spark socket streaming can listen to a socket

===== Simple example =====

In this example, we just listen to a socket (localhost, port 8888)and count all the words send to this socket.

==== start the spark streaming ====

<code>
scala> import org.apache.spark.streaming._
scala> import org.apache.spark._
scala> import org.apache.spark.storage.StorageLevel
scala> val ssc = new StreamingContext(sc,Seconds(60))
scala> val lines = ssc.socketTextStream("localhost",8888,StorageLevel.MEMORY_AND_DISK_SER)
scala> val words = lines.flatMap(_.split(" "))
scala> val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)
scala> wordCounts.print()
scala> ssc.start()

</code>

==== Send message to socket 8888 on localhost====

<code>
[root@localhost log]# nc -lk 8888
hello
my name is pengfei

</code>

==== Result of the spark streaming ====


<code>
-------------------------------------------
Time: 1516100520000 ms
-------------------------------------------
(hello,1)

-------------------------------------------
Time: 1516100580000 ms
-------------------------------------------
(is,2)
(,1)
(my,1)
(what,1)
(pengfei,1)
(name,2)
(your,1)

</code>

<file scala SparkSocketStreaming.scala>
package org.pengfei.spark

import org.apache.spark.SparkConf
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming.{Seconds, StreamingContext}

object SparkSocketStreaming {
  def main(args: Array[String]) {
    /*if (args.length < 2) {
      System.err.println("Usage: NetworkWordCount <hostname> <port>")
      System.exit(1)
    }*/

    //StreamingExamples.setStreamingLogLevels()

    // Create the context with a 1 second batch size
    val sparkConf = new SparkConf().setAppName("NetworkWordCount").setMaster("local")
    val ssc = new StreamingContext(sparkConf, Seconds(10))

    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    // Note that no duplication in storage level only for running locally.
    // Replication necessary in distributed scenario for fault tolerance.
    val lines = ssc.socketTextStream("localhost", 8888, StorageLevel.MEMORY_AND_DISK_SER)
    val words = lines.flatMap(_.split(" "))
    val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)
    wordCounts.print()
    ssc.start()
    ssc.awaitTermination()
  }
}
</file>