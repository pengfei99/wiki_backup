====== Data formats Introduction ======

In this article, we will first introduce the three main data categories (e.g. Structured Data, unstructured Data, semi-structured Data). Then we will present popular file format. At last we will discuss how to choose data formats based on your requirements.

===== 1. Data categories =====

We have many different data formats. They can all be classified into the following three categories.

  * Structured Data
  * Unstructured Data
  * Semi-structured Data

==== 1.1 Structured Data ====

A **data model** is an abstract model that organizes elements of data and standardizes how they relate to one another and to the properties of real-world entities. For instance, a data model may specify that the data element representing a car be composed of a number of other elements which, in turn, represent the color and size of the car and define its owner.

The term **data model** is used in two distinct but closely related senses. Sometimes it refers to an abstract formalization of the objects and relationships found in a particular application domain, for example the customers, products, and orders found in a manufacturing organization. At other times it refers to a set of concepts used in defining such formalizations: for example concepts such as entities, attributes, relations, or tables. So the "data model" of a banking application may be defined using the entity-relationship "data model". We use the term in both senses. 

All data which obey the formal structure of **data models** are considered as structured data.  

For example, data stored in the relational database in the form of tables having multiple rows and columns. The spreadsheet(excel has more controls than csv on the columns) is another good example of structured data.

Check this for more info about data model: https://en.wikipedia.org/wiki/Data_model#Database_model

==== 1.2 Semi-structured Data ====

Semi-structured data is a form of structured data that does not obey the formal structure of **data models** associated with relational databases or other forms of data tables, but nonetheless contains tags or other markers to separate semantic elements and enforce hierarchies of records and fields within the data. Therefore, it is also known as self-describing structure. 

JSON(JavaScript Object Notation) files, BibTex files, .csv files, tab-delimited text files, XML and other markup languages are examples of Semi-structured data.

=== Advantages ===
  * Programmers persisting objects from their application to a database do not need to worry about object-relational impedance mismatch, but can often serialize objects via a light-weight library.
  * Support for nested or hierarchical data often simplifies data models representing complex relationships between entities.
  * Support for lists of objects simplifies data models by avoiding messy translations of lists into a relational data model.

=== Disadvantages ===
  * The traditional relational data model has a popular and ready-made query language, SQL.
  * Prone to "garbage in, garbage out"; by removing restraints from the data model, there is less fore-thought that is necessary to operate a data application.

==== 1.3 Unstructured Data =====

Unstructured data (or unstructured information) is information that either does not have a pre-defined data model or is not organized in a pre-defined manner. Unstructured information is typically text-heavy but may contain data such as dates, numbers, and facts as well. This results in irregularities and ambiguities that make it difficult to understand using traditional programs as compared to data stored in fielded form in databases or annotated (semantically tagged) in documents.

For example, e-mail messages, word processing documents, videos, photos, audio files, presentations, webpages and many other kinds of business documents are all unstructured data.


===== 2. Basics of data formats =====

==== 2.1 Criteria for evaluating a data format ====

^ Property ^ CSV ^ Json/Xml ^Parquet^ Avro^ ORC^
| Human Readable |YES|YES|NO|NO|NO|
| Compressable |YES|YES|YES|YES|YES|
| Splittable |YES*|YES*|YES|YES|YES|
| Complex data structure |NO|YES|YES|YES|YES|
| Schema evolution |NO|NO|YES|YES|YES|
| Columnar |NO|NO|YES|NO|YES|

Note:
  * CSV is splittable when it is a raw, uncompressed file or using a splittable compression format such as BZIP2 or LZO (note: LZO needs to be indexed to be splittable!)
  * JSON has the same conditions about splittability when compressed as CSV with one extra difference. When “wholeFile” option is set to true (re: SPARK-18352), JSON is NOT splittable.

==== 2.2 Logical and physical====

When we talk about data format, we always have two-layer:
  * The **logical layer** represents how data is seen by the user. For example, the logical layer of tabular data is represented by rows and columns.
  * The physical layer represents how data is stored on a physical device(e.g. hard drive, memory, etc.)

The physical layer has three major solutions:
  * **row-wise**: are best for write-heavy (transactional) workflows (e.g. OLTP)
  * **columnar**: are best optimized for read-heavy (analytic) workflows (e.g. OLAP) 
  * **Hybrid**: combine both. But still very slow when write(e.g. parquet).

Based on how they store data, they will behave differently in different scenarios. So we don't have one best solution which works for all scenarios. 



===== 3. Common data formats in big data environment =====
  * csv (on disk, unstructural): [[employes:pengfei.liu:big_data:data_format:csv|Data format: csv]]
  * json（on disk, unstructural/semi-structural: [[employes:pengfei.liu:big_data:data_format:json|Data format : Json]]
  * Avro (on disk, structural) : [[employes:pengfei.liu:big_data:data_format:avro|Data format: Avro]]
  * Parquet (on disk, structural) : [[employes:pengfei.liu:big_data:data_format:parquet|Data format: parquet]]
  * ORC (on disk, structural) : [[employes:pengfei.liu:big_data:data_format:orc|Data format: orc]]
  * Arrow (on memory, structural) : [[employes:pengfei.liu:big_data:data_format:arrow|Data format: Arrow]]
















===== Appendix: Nested data structure =====

Json, Parquet, Avro, and ORC allows table cells to host nested complex data structure. For example, in the following table, we have a column called name, which is an object which has three properties(first-name, middle-name, last-name).

<code>
val structureData = Seq(
    Row(Row("James ","","Smith"),"36636","M",3100),
    Row(Row("Michael ","Rose",""),"40288","M",4300),
    Row(Row("Robert ","","Williams"),"42114","M",1400),
    Row(Row("Maria ","Anne","Jones"),"39192","F",5500),
    Row(Row("Jen","Mary","Brown"),"","F",-1)
  )

val structureSchema = new StructType()
    .add("name",new StructType()
      .add("firstname",StringType)
      .add("middlename",StringType)
      .add("lastname",StringType))
    .add("id",StringType)
    .add("gender",StringType)
    .add("salary",IntegerType)

  val df2 = spark.createDataFrame(
     spark.sparkContext.parallelize(structureData),structureSchema)
  df2.printSchema()
  df2.show()
</code> 

There is a negative consequence of keeping the nested structure in parquet. In some cases, spark predicate pushdown may not work properly if you have a nested structure in the parquet file.

So even if you are working with few fields in your parquet dataset spark will load and materialize the entire dataset.