====== Data format: Arrow ======

**Apache Arrow** is an **in-memory** data structure mainly for use by engineers for building data systems. It also has a variety of standard programming language. C, C++, C#, Go, Java, JavaScript, Ruby are in progress and also support in Apache Arrow. Apache Arrow was introduced as top-level Apache project on 17 Feb 2016. 

The latest version of Apache Arrow is Apache Arrow 3.0.0 (26 January 2021)

It has efficient and fast data interchange between systems without the serialization costs, which have been associated with other systems like thrift, Avro, and Protocol Buffers.

Arrow is not a standalone piece of software but rather a component used to accelerate analytics within a particular network and to allow Arrow-enabled systems to exchange data with low overhead. It is flexible to support the most complex data models.


===== 01: Basic concept of Apache Arrow =====

Each data analytic/storage service implements its internal memory format and not compatible with each other. As a result, when we exchange data between these services, we have to do serialization and deserialization. And 70-80% of the computation power is wasted on serialization and deserialization.

**Apache Arrow** enables fast and accurate **data interchange between systems without the serialization costs** associated with other systems like Thrift and Protocol Buffers.

{{:employes:pengfei.liu:big_data:data_format:apache_arrow.png?600|}}

Apache Arrow comes with bindings to C / C++ based interface to the Hadoop file system. It means that we can read and download all files from HDFS and interpret them ultimately with Python.

===== 02 Parquet vs Arrow =====

Parquet is a columnar file format for data serialization. Reading a Parquet file requires decompressing and decoding its contents into some kind of in-memory data structure. It is designed to be space/IO-efficient at the expense of CPU utilization for decoding. It does not provide any data structures for in-memory computing. Parquet is a streaming format which must be decoded from start-to-end, while some "index page" facilities have been added to the storage format recently, in general random access operations are costly.

Arrow on the other hand is first and foremost a library providing columnar data structures for in-memory computing. When you read a Parquet file, you can decompress and decode the data into Arrow columnar data structures, so that you can then perform analytics in-memory on the decoded data. Arrow columnar format has some nice properties: random access is O(1) and each value cell is next to the previous and following one in memory, so it's efficient to iterate over.

What about "Arrow files" then? Apache Arrow defines a binary "serialization" protocol for arranging a collection of Arrow columnar arrays (called a "record batch") that can be used for messaging and interprocess communication. You can put the protocol anywhere, including on disk, which can later be memory-mapped or read into memory and sent elsewhere.

This Arrow protocol is designed so that you can "map" a blob of Arrow data without doing any deserialization, so performing analytics on Arrow protocol data on disk can use memory-mapping and pay effectively zero cost. The protocol is used for many things, such as streaming data between Spark SQL and Python for running pandas functions against chunks of Spark SQL data, these are called "pandas udfs".

In some applications, Parquet and Arrow can be used interchangeably for on-disk data serialization. Some things to keep in mind:

Parquet is intended for "archival" purposes, meaning if you write a file today, we expect that any system that says they can "read Parquet" will be able to read the file in 5 years or 7 years. We are not yet making this assertion about long-term stability of the Arrow format (though we might in the future)
Parquet is generally a lot more expensive to read because it must be decoded into some other data structure. Arrow protocol data can simply be memory-mapped.
Parquet files are often much smaller than Arrow-protocol-on-disk because of the data encoding schemes that Parquet uses. If your disk storage or network is slow, Parquet is going to be a better choice
So, in summary, Parquet files are designed for disk storage, Arrow is designed for in-memory (but you can put it on disk, then memory-map later). They are intended to be compatible with each other and used together in applications.

For a memory-intensive frontend app I might suggest looking at the Arrow JavaScript (TypeScript) library.
