====== 05-2: K8s resources DaemonSet ======

**DaemonSets are used to ensure that some or all of your K8S nodes run a copy of a pod, which allows you to run a daemon on every node.**

When you add a new node to the cluster, a pod gets added to match the nodes. Similarly, when you remove a node from your cluster, the pod is put into the trash. Deleting a DaemonSet cleans up the pods that it previously created.

===== Why use DaemonSets? =====

Now that we understand DaemonSets, here are some examples of why and how to use it:

To run a daemon for cluster storage on each node, such as:
  * glusterd
  * ceph

To run a daemon for logs collection on each node, such as:
  * fluentd
  * logstash

To run a daemon for node monitoring on ever note, such as:
  * Prometheus Node Exporter
  * collectd
  * Datadog agent


As your use case gets more complex, you can deploy multiple DaemonSets for one kind of daemon, using a variety of flags or memory and CPU requests for various hardware types.

===== How are DaemonSets scheduled? =====

DaemonSets are scheduled either with DaemonSet controller or default scheduler.

==== DaemonSet controller ====
When you specify **.spec.nodeName** during pod creation, these pods will have the machine already selected. In this type of scheduler, the unschedulable node field is not respected. The scheduler can also create pods without starting the scheduler—this helps cluster bootstrap.
**By default, this controller is disabled in K8S v1.12+.**

==== Default scheduler ====
Using ScheduleDaemonSetPods allows for scheduling DaemonSets using defaults, not DaemonSet controller. To do this, add **NodeAffinity** to the DaemonSet pods (instead of .spec.nodeName).
By default, the scheduler will replace your DaemonSet pod node affinity if it already exists.


===== Working with DaemonSets =====

There are certain things to keep in mind when using DaemonSets:
  * When you create a DaemonSet, the .spec.selector cannot be changed. Changing it will break things.
  * You must specify a pod selector to match the .spec.template labels.
  * **Typically, you should not create pods with labels that match this selector—either directly via another DaemonSet, or indirectly, via another controller (like ReplicaSet). If you do, the DaemonSet controller thinks it created those pods.**

Note that you can deploy a DaemonSet to run only on some nodes, not all nodes. To do so, specify **.spec.template.spec.nodeSelector**. It will deploy to any node that matches the selector.

===== Deleting a DaemonSet =====

<code>
# To delete a daemonset and associated pods
$ kubectl delete <daemonset-name>

# Delete a daemonset without deleting its pods
$ kubectl delete -cascade=false <daemonset-name>

</code>

===== A working example =====

This example deploys a fluentd-elasticsearch image that will run on every node. This daemonset will deploy the image on every node collecting logs and sending them to ES.

<file yaml simple-daemonset.yaml>
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd-elasticsearch
  namespace: kube-system
  labels:
    k8s-app: fluentd-logging
spec:
  selector:
    matchLabels:
      name: fluentd-elasticsearch
  template:
    metadata:
      labels:
        name: fluentd-elasticsearch
    spec:
      tolerations:
      # this toleration is to have the daemonset runnable on master nodes
      # remove it if your masters can't run pods
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - name: fluentd-elasticsearch
        image: quay.io/fluentd_elasticsearch/fluentd:v2.5.2
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
</file>
