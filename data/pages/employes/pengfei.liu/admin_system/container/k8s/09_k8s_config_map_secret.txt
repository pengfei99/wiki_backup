====== 09: k8s config map and secrets ======

**A ConfigMap is an API object used to store non-confidential data in key-value pairs**. **Pods can consume ConfigMaps** 
  * as environment variables
  * as command-line arguments
  * as configuration files in a volume.

**A ConfigMap allows you to decouple environment-specific configuration from your container images, so that your applications are easily portable.**


There are four different ways that you can use a ConfigMap to configure a container inside a Pod:

  - Inside a container command and args
  - Environment variables for a container
  - Add a file in read-only volume, for the application to read
  - Write code to run inside the Pod that uses the Kubernetes API to read a ConfigMap

===== 9.1 Create a configMap =====

A ConfigMap has **data** and **binaryData** fields. These fields accept key-value pairs as their values. Both the **data field and the binaryData are optional**. The **data field is designed to contain UTF-8 byte sequences** while the **binaryData field is designed to contain binary data**.


==== 9.1.1 Create a configMap from raw files ====

<code>
# Create a folder named game-config in /tmp
mkdir -p /tmp/game-config

# then put the two following files in it.

# then run this command to create the configMap from all files under directory game-config/
kubectl create configmap game-config --from-file=/tmp/game-config/
</code>

<file properties game.properties>
enemies=aliens
lives=3
enemies.cheat=true
enemies.cheat.level=noGoodRotten
secret.code.passphrase=UUDDLRLRBABAS
secret.code.allowed=true
secret.code.lives=30
</file>

<file properties ui.properties>
color.good=purple
color.bad=yellow
allow.textmode=true
how.nice.to.look=fairlyNice
</file>

After the creation, you can check the details of the created config map
<code>
kubectl describe configmaps game-config

# To get the configmap in a yaml file
kubectl get configmaps game-config -o yaml
</code>

You can also create a config map from single or multi-files
<code>
# from one file
kubectl create configmap game-config-1 --from-file=path/to/game.properties

# from two files
kubectl create configmap game-config-2 --from-file=path/to/game.properties --from-file=path/to/ui.properties
</code>
==== 9.1.2 Create a configMap from env files ====

Use the option --from-env-file to create a ConfigMap from an env-file.

An env-file is contain a list of environment variables.
These syntax rules apply:
  * Each line in an env file has to be in VAR=VAL format.
  * Lines beginning with # (i.e. comments) are ignored.
  * Blank lines are ignored.
  * There is no special handling of quotation marks (i.e. the quotation marks will be part of the ConfigMap value)).

For example 
<file yaml env-config.properties>
enemies=aliens
lives=3
allowed="true"
</file>

<code>
# the creation is similar to raw files
$ kubectl create configmap game-config-env-file --from-env-file=game-config/env-file.properties

# get the config map in yaml format, you can see the quotation mark is saved also.
$ kubectl get configmap game-config-env-file -o yaml

apiVersion: v1
data:
  allowed: '"true"'
  enemies: aliens
  lives: "3"
</code>

Such as raw files, you can use multiple env-files and directories.

==== 9.1.3 Add a key to the file imported to configMap ====

By default the configMap uses the file name as the main key for all the key-value pair of a file. See the game-config example. But you can specify a key to replace the default file name key.
<code>
# The general form is 
kubectl create configmap game-config-3 --from-file=<my-key-name>=<path-to-file>

# the game.properties values will have main key pengfei-game, and ui.properties will have pengfei-ui
kubectl create configmap game-config-3 --from-file=pengfei-game=game-config/game.properties --from-file=pengfei-ui=game-config/ui.properties
</code>
 
==== 9.1.4 Create a configMap from literal values ====

We can also use in line literal to create config map

<code>
kubectl create configmap pengfei-config --from-literal=pengfei.age=37 --from-literal=pengfei.sex=m
</code>


==== 9.1.5 Create a configMap from generator ====

We can use a **kustomization.yaml** file to create the ConfigMap object. **Note the name of the  file is mandatory. it must be kustomization.yaml.** 


The following file is an example. Note that the name you give to the configMap will be autocompleted with a random number. For example, it will be something like "game-config-4-bt44gb9824"

<file yaml kustomization.yaml.yaml>
configMapGenerator:
- name: game-config-4
  files:
  # from files
  - ./game-config/game.properties
  - ./game-config/ui.properties
  # from files with custom keys
  - custom-key-name=./game-config/game.properties
  # from literals
  literals:
  - special.how=very
  - special.type=charm
</file>

<code>
# The following command only takes the name of the directory which contains kustomization.yaml
kubectl apply -k <directory-name> 
</code>


===== 9.2 Use the configMap in a pod =====

==== 9.2.1 Set up container env var by using config map ====
The following yaml file create a pod which uses a config map to setup env vars

<file yaml pod-with-configMap.yaml>
apiVersion: v1
kind: Pod
metadata:
  name: configmap-test-pod
spec:
  containers:
    - name: test-container
      image: busybox
      command: [ "/bin/sh", "-c", "env" ]
      env:
        # Define the environment variable in the container
        - name: FOOBAR_AGE
          valueFrom:
            configMapKeyRef:
              # The ConfigMap name containing the value you want to assign to FOOBAR_AGE
              name: pengfei-config
              # Specify the key in the configMap wwhich you want to show the value
              key: pengfei.age
        - name: FOOBAR_SEX
          valueFrom:
            configMapKeyRef:
              name: pengfei-config
              key: pengfei.sex  
  restartPolicy: Never
</file>

With the following command, you will see the added env var in the container
<code>
kubectl logs configmap-test-pod | grep FOOBAR
FOOBAR_SEX=m
FOOBAR_AGE=37
</code>

Note that for each env var, it can read from a different config map. 

As the config map value is set as env var in the container, you can also use it in the command section of the pod
check the log of the following pod

<file yaml pod-with-configMap.yaml1.yaml>
apiVersion: v1
kind: Pod
metadata:
  name: configmap-envvar-pod
spec:
  containers:
    - name: test-container
      image: busybox
      command: [ "/bin/echo", "$(FOOBAR_AGE), $(FOOBAR_SEX)" ]
      env:
        # Define the environment variable in the container
        - name: FOOBAR_AGE
          valueFrom:
            configMapKeyRef:
              # The ConfigMap name containing the value you want to assign to FOOBAR_AGE
              name: pengfei-config
              # Specify the key in the configMap wwhich you want to show the value
              key: pengfei.age
        - name: FOOBAR_SEX
          valueFrom:
            configMapKeyRef:
              name: pengfei-config
              key: pengfei.sex
        - name: FOOBAR_SEX
          valueFrom:
            configMapKeyRef:
              name: pengfei-config
              key: pengfei.sex
        
  restartPolicy: Never
</file>

=== envFrom  ===

Use envFrom to define all of the ConfigMap's data as container environment variables

<file yaml configmap-envfrom-pod.yaml>
apiVersion: v1
kind: Pod
metadata:
  name: configmap-envfrom-pod
spec:
  containers:
    - name: test-container
      image: busybox
      command: [ "/bin/sh", "-c", "env" ]
      # In envFrom, we just put the name of the configMap, it will get all the key value pair and put it as evn var in the container
      envFrom:
      - configMapRef:
        # name of the config map
          name: game-config
  restartPolicy: Never
</file>

When you check the env var of the container, it takes the raw data of the configMap. For example, for the ui.properties key, it set the env var as followed. Not very useful.

<code>
ui.properties=color.good=purple
color.bad=yellow
allow.textmode=true
how.nice.to.look=fairlyNice
</code>

==== 9.2.2 Add ConfigMap data to a Volume ====

As explained in Create ConfigMaps from files, when you create a ConfigMap using --from-file, the filename becomes a key stored in the data section of the ConfigMap. The file contents become the key's value.

Add the ConfigMap name under the volumes section of the Pod specification. This adds the ConfigMap data to the directory specified as volumeMounts.mountPath 

In the following example, we create a volume by calling a configMap, then we mount the volume to a container. 

<file yaml .yaml>
apiVersion: v1
kind: Pod
metadata:
  name: configmap-vol-pod
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: [ "/bin/sh","-c","cat /etc/config/game.properties" ]
      # mount an existing volume on the container 
      volumeMounts:
      - name: pengfei-volume
        mountPath: /etc/config
  # create a volume by using the config map
  volumes:
    # name of the volume
    - name: pengfei-volume
      configMap:
        # name of the config map
        name: game-config
        items:
          # key name
        - key: game.properties
          # path of the file which will contain the value of the key
          path: game.properties
        - key: ui.properties
          path: ui.properties
  restartPolicy: Never
</file>

===== 9.3 An real world example of ConfigMap =====

In this example, we will use configMap to configure a redis server.

<code></code>


<file yaml .yaml>

</file>
<code></code>
