====== 09: k8s config map and secrets ======

**A ConfigMap is an API object used to store non-confidential data in key-value pairs**. **Pods can consume ConfigMaps** 
  * as environment variables
  * as command-line arguments
  * as configuration files in a volume.

**A ConfigMap allows you to decouple environment-specific configuration from your container images, so that your applications are easily portable.**


There are four different ways that you can use a ConfigMap to configure a container inside a Pod:

  - Inside a container command and args
  - Environment variables for a container
  - Add a file in read-only volume, for the application to read
  - Write code to run inside the Pod that uses the Kubernetes API to read a ConfigMap

===== 9.1 Create a configMap =====

A ConfigMap has **data** and **binaryData** fields. These fields accept key-value pairs as their values. Both the **data field and the binaryData are optional**. The **data field is designed to contain UTF-8 byte sequences** while the **binaryData field is designed to contain binary data**.


==== 9.1.1 Create a configMap from raw files ====

<code>
# Create a folder named game-config in /tmp
mkdir -p /tmp/game-config

# then put the two following files in it.

# then run this command to create the configMap from all files under directory game-config/
kubectl create configmap game-config --from-file=/tmp/game-config/
</code>

<file properties game.properties>
enemies=aliens
lives=3
enemies.cheat=true
enemies.cheat.level=noGoodRotten
secret.code.passphrase=UUDDLRLRBABAS
secret.code.allowed=true
secret.code.lives=30
</file>

<file properties ui.properties>
color.good=purple
color.bad=yellow
allow.textmode=true
how.nice.to.look=fairlyNice
</file>

After the creation, you can check the details of the created config map
<code>
kubectl describe configmaps game-config

# To get the configmap in a yaml file
kubectl get configmaps game-config -o yaml
</code>

You can also create a config map from single or multi-files
<code>
# from one file
kubectl create configmap game-config-1 --from-file=path/to/game.properties

# from two files
kubectl create configmap game-config-2 --from-file=path/to/game.properties --from-file=path/to/ui.properties
</code>
==== 9.1.2 Create a configMap from env files ====

Use the option --from-env-file to create a ConfigMap from an env-file.

An env-file is contain a list of environment variables.
These syntax rules apply:
  * Each line in an env file has to be in VAR=VAL format.
  * Lines beginning with # (i.e. comments) are ignored.
  * Blank lines are ignored.
  * There is no special handling of quotation marks (i.e. the quotation marks will be part of the ConfigMap value)).

For example 
<file yaml env-config.properties>
enemies=aliens
lives=3
allowed="true"
</file>

<code>
# the creation is similar to raw files
$ kubectl create configmap game-config-env-file --from-env-file=game-config/env-file.properties

# get the config map in yaml format, you can see the quotation mark is saved also.
$ kubectl get configmap game-config-env-file -o yaml

apiVersion: v1
data:
  allowed: '"true"'
  enemies: aliens
  lives: "3"
</code>

Such as raw files, you can use multiple env-files and directories.

==== 9.1.3 Add a key to the file imported to configMap ====

By default the configMap uses the file name as the main key for all the key-value pair of a file. See the game-config example. But you can specify a key to replace the default file name key.
<code>
# The general form is 
kubectl create configmap game-config-3 --from-file=<my-key-name>=<path-to-file>

# the game.properties values will have main key pengfei-game, and ui.properties will have pengfei-ui
kubectl create configmap game-config-3 --from-file=pengfei-game=game-config/game.properties --from-file=pengfei-ui=game-config/ui.properties
</code>
 
==== 9.1.4 Create a configMap from literal values ====

We can also use in line literal to create config map

<code>
kubectl create configmap pengfei-config --from-literal=pengfei.age=37 --from-literal=pengfei.sex=m
</code>


==== 9.1.5 Create a configMap from generator ====

We can use a **kustomization.yaml** file to create the ConfigMap object. **Note the name of the  file is mandatory. it must be kustomization.yaml.** 


The following file is an example. Note that the name you give to the configMap will be autocompleted with a random number. For example, it will be something like "game-config-4-bt44gb9824"

<file yaml kustomization.yaml.yaml>
configMapGenerator:
- name: game-config-4
  files:
  # from files
  - ./game-config/game.properties
  - ./game-config/ui.properties
  # from files with custom keys
  - custom-key-name=./game-config/game.properties
  # from literals
  literals:
  - special.how=very
  - special.type=charm
</file>

<code>
# The following command only takes the name of the directory which contains kustomization.yaml
kubectl apply -k <directory-name> 
</code>


===== 9.2 Use the configMap in a pod =====

==== 9.2.1 Set up container env var by using config map ====
The following yaml file create a pod which uses a config map to setup env vars

<file yaml pod-with-configMap.yaml>
apiVersion: v1
kind: Pod
metadata:
  name: configmap-test-pod
spec:
  containers:
    - name: test-container
      image: busybox
      command: [ "/bin/sh", "-c", "env" ]
      env:
        # Define the environment variable in the container
        - name: FOOBAR_AGE
          valueFrom:
            configMapKeyRef:
              # The ConfigMap name containing the value you want to assign to FOOBAR_AGE
              name: pengfei-config
              # Specify the key in the configMap wwhich you want to show the value
              key: pengfei.age
        - name: FOOBAR_SEX
          valueFrom:
            configMapKeyRef:
              name: pengfei-config
              key: pengfei.sex  
  restartPolicy: Never
</file>

With the following command, you will see the added env var in the container
<code>
kubectl logs configmap-test-pod | grep FOOBAR
FOOBAR_SEX=m
FOOBAR_AGE=37
</code>

Note that for each env var, it can read from a different config map. 

As the config map value is set as env var in the container, you can also use it in the command section of the pod
check the log of the following pod

<file yaml pod-with-configMap.yaml1.yaml>
apiVersion: v1
kind: Pod
metadata:
  name: configmap-envvar-pod
spec:
  containers:
    - name: test-container
      image: busybox
      command: [ "/bin/echo", "$(FOOBAR_AGE), $(FOOBAR_SEX)" ]
      env:
        # Define the environment variable in the container
        - name: FOOBAR_AGE
          valueFrom:
            configMapKeyRef:
              # The ConfigMap name containing the value you want to assign to FOOBAR_AGE
              name: pengfei-config
              # Specify the key in the configMap wwhich you want to show the value
              key: pengfei.age
        - name: FOOBAR_SEX
          valueFrom:
            configMapKeyRef:
              name: pengfei-config
              key: pengfei.sex
        
  restartPolicy: Never
</file>

=== envFrom  ===

Use envFrom to define all of the ConfigMap's data as container environment variables

<file yaml configmap-envfrom-pod.yaml>
apiVersion: v1
kind: Pod
metadata:
  name: configmap-envfrom-pod
spec:
  containers:
    - name: test-container
      image: busybox
      command: [ "/bin/sh", "-c", "env" ]
      # In envFrom, we just put the name of the configMap, it will get all the key value pair and put it as evn var in the container
      envFrom:
      - configMapRef:
        # name of the config map
          name: game-config
  restartPolicy: Never
</file>

When you check the env var of the container, it takes the raw data of the configMap. For example, for the ui.properties key, it set the env var as followed. Not very useful.

<code>
ui.properties=color.good=purple
color.bad=yellow
allow.textmode=true
how.nice.to.look=fairlyNice
</code>

==== 9.2.2 Add ConfigMap data to a Volume ====

As explained in Create ConfigMaps from files, when you create a ConfigMap using --from-file, the filename becomes a key stored in the data section of the ConfigMap. The file contents become the key's value.

Add the ConfigMap name under the volumes section of the Pod specification. This adds the ConfigMap data to the directory specified as volumeMounts.mountPath 

In the following example, we create a volume by calling a configMap, then we mount the volume to a container. 

<file yaml .yaml>
apiVersion: v1
kind: Pod
metadata:
  name: configmap-vol-pod
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      # let the container sleep for 600 sec to keep it running. So we can do kubectl exec on the container
      command: [ "/bin/sh","-c","sleep 600" ]
      # mount an existing volume on the container 
      volumeMounts:
      - name: pengfei-volume
        mountPath: /etc/config
  # create a volume by using the config map
  volumes:
    # name of the volume
    - name: pengfei-volume
      configMap:
        # name of the config map
        name: game-config
        items:
          # key name
        - key: game.properties
          # path of the file which will contain the value of the key
          path: game.properties
        - key: ui.properties
          path: ui.properties
  restartPolicy: Never
</file>

===== 9.3 Two real world examples of ConfigMap =====

==== 9.3.1 Redis server ====

In this example, we will use configMap to configure a redis server.

The redis-config file contains all the config that we want to put into the configMap 
<file redis-config>
maxmemory 2mb
maxmemory-policy allkeys-lru
</file>

The kustomization.yaml file will generate the configMap based on the source which we provided
<file yaml kustomization.yaml>
configMapGenerator:
- name: redis-config-cm
  files:
  # We reset the key to pengfei-redis-config to avoid using the file-name (redis-config.properties) as the key
  - pengfei-redis-config=./redis-config.properties
</file>

The redis-server-pod-with-configMap.yaml defines a redis server pod which uses the configMap generated above 
<file yaml redis-server-pod-with-configMap.yaml>
apiVersion: v1
kind: Pod
metadata:
  name: redis-server-cm-test
spec:
  containers:
  - name: redis
    image: redis:5.0.4
    command:
      - redis-server
      - "/redis-master/redis.conf"
    env:
    - name: MASTER
      value: "true"
    ports:
    - containerPort: 6379
    resources:
      limits:
        cpu: "0.8"
    volumeMounts:
    # mount a volume(folder) named data under /redis-master-data
    - mountPath: /redis-master-data
      name: data
    - mountPath: /redis-master
      name: config
  volumes:
  # create a volume data from an empty dir
    - name: data
      emptyDir: {}
    - name: config
      configMap:
      
        name: redis-config-cm-kt4tk569kg
        items:
        - key: pengfei-redis-config
          path: redis.conf
</file>

Note if you generated the configMap before you create the pod, you should put the exact configMap name in the pod config file. Because the generated configMap name contains a random number. If you put the kustomization.yaml and 
redis-server-pod-with-configMap.yaml under the same folder. Then use the command "kubectl -k <path-to-folder>". You don't need to set the exact configmap name in redis-server-pod-with-configMap.yaml.

<code>
# Get the shell of redis-cli
$ kubectl exec -it redis-server-cm-test -- redis-cli

# run the following command in redis-cli
$ 127.0.0.1:6379> CONFIG GET maxmemory

$ 127.0.0.1:6379> CONFIG GET maxmemory-policy
</code>



==== 9.3.2 Nginx server ====

In this example, we put the configMap and deployment in the same file


<file yaml nginx-pod-all.yaml>
# config map definition
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-log-config
data:
  log_level: INFO
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pengfei-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx
          ports:
          - containerPort: 80
          volumeMounts:
          - name: config-volume
            mountPath: /etc/config
      volumes:
        - name: config-volume
          configMap:
            name: nginx-log-config


</file>

<code>
# get pods name of the deployment
kubectl get pods -l app=nginx -o=name

# run cat on a pod
kubectl exec <pod-name> -- cat /etc/config/log_level

# for example
kubectl exec pengfei-nginx-f69544549-7k5q4 -- cat /etc/config/log_level

# one line command, this works on the deployment that has only 1 pod
kubectl exec `kubectl get pods -l app=nginx -o=name|cut -d "/" -f2` -- cat /etc/config/log_level
</code>

=== Dynamic change of configmap ===
You can edit the config map directly with the following command. 

<code>
# change the log level from INFO to DEBUG
kubectl edit configmap nginx-log-config

# check the new log level
kubectl exec `kubectl get pods -l app=nginx -o=name|cut -d "/" -f2` -- cat /etc/config/log_level
</code>

Because the pod is managed by a deployment, so the pod can be updated automatically. Because the deployment controller monitors the changes of configMap. 

But if your pod is deployed without a controller, for example, you create a pod directly. The pod will not be updated if the configMap changes. Try to modify the configMap memory value of the redis server. You will notice redis server config is not changed after configMap value change. You need to apply a patch to the pod with the following command
<code>
kubectl patch pod redis-server --patch '{"spec":{"template":{"metadata":{"annotations":{"version/config":"..."}}}}}'
</code>

**Note, even you apply the patch, the env vars of your pod imported from ConfigMap are not updated. And Volume takes a few seconds to be updated.**

===== 9.4 Understand k8s Secret =====
Kubernetes Secrets let you store and manage sensitive information, such as **passwords**, **OAuth tokens**, and **ssh keys**. Storing confidential information in a Secret is safer and more flexible than putting it verbatim in a Pod definition or in a container image.

To use a Secret, a Pod needs to reference the Secret. A Secret can be used with a Pod in three ways:

  * As files in a volume mounted on one or more of its containers.
  * As container environment variable.
  * By the kubelet when pulling images for the Pod.

==== 9.4.1 Types of Secret ====

When creating a Secret, you can specify its type using the type field of the Secret resource, or certain equivalent kubectl command-line flags (if available). The Secret type is used to facilitate programmatic handling of the Secret data.

Kubernetes provides several built-in types for some common usage scenarios. These types vary in terms of the validations performed and the constraints Kubernetes imposes on them.

^Builtin Type	^Usage^
|Opaque	| arbitrary user-defined data|
|kubernetes.io/service-account-token | service account token |
|kubernetes.io/dockercfg	|serialized ~/.dockercfg file|
|kubernetes.io/dockerconfigjson	|serialized ~/.docker/config.json file|
|kubernetes.io/basic-auth| credentials for basic authentication|
|kubernetes.io/ssh-auth	|credentials for SSH authentication|
|kubernetes.io/tls| data for a TLS client or server|
|bootstrap.kubernetes.io/token	|bootstrap token data|



=== 9.4.1.1 Opaque ===

Opaque is the default Secret type. When you create a Secret using kubectl, you will use the generic subcommand to indicate an Opaque Secret type. For example, the following command creates an empty Secret of type Opaque.


<code>
# create a secret
kubectl create secret generic empty-secret

# list all exiting secret
kubectl get secret empty-secret

# get the content of the secret
kubectl get secret empty-secret -o yaml
</code>

=== 9.4.1.2 Service account token Secrets ===

A kubernetes.io/service-account-token type of Secret is used to store a token that identifies a **service account**.

A **service account** provides an identity for processes that run in a Pod. When a human access the cluster (for example, using kubectl), he ia authenticated by the apiserver as a particular User Account. Processes in containers inside pods can also contact the apiserver. When they do, they are authenticated as a particular Service Account (for example, default).

The following example configuration declares a service account token Secret:

<file yaml sa-secret.yaml>
apiVersion: v1
kind: Secret
metadata:
  name: secret-sa-sample
  annotations:
    kubernetes.io/service-account.name: "sa-name"
type: kubernetes.io/service-account-token
data:
  # You can include additional key value pairs as you do with Opaque Secrets
  extra: YmFyCg==
</file>

=== 9.4.1.3 Docker config Secrets ===

You can use one of the following type values to create a Secret to store the credentials for accessing a Docker registry for images.

  * kubernetes.io/dockercfg: is reserved to store a serialized ~/.dockercfg which is the legacy format for configuring Docker command line. When using this Secret type, you have to ensure the Secret data field contains a .dockercfg key whose value is content of a ~/.dockercfg file encoded in the base64 format.
  * kubernetes.io/dockerconfigjson: is designed for storing a serialized JSON that follows the same format rules as the ~/.docker/config.json file which is a new format for ~/.dockercfg. When using this Secret type, the data field of the Secret object must contain a .dockerconfigjson key, in which the content for the ~/.docker/config.json file is provided as a base64 encoded string.

For example, you can use the following command to create a secret of type kubernetes.io/dockerconfigjson
<code>
kubectl create secret docker-registry pengfei-docker-secret \
  --docker-username=pengfei \
  --docker-password=pass113 \
  --docker-email=pengfei.liu@hotmail.fr

# list all existing secret
kubectl get secret -n user-pengfei

# view the secret in yaml format
kubectl get secret pengfei-docker-secret -o yaml

</code>

=== 9.4.1.4 Basic authentication Secret ===

The kubernetes.io/basic-auth type is provided for storing credentials needed for basic authentication. When using this Secret type, the **data field** (base64 encoded strings) of the Secret must contain the following two keys:

username: the user name for authentication;
password: the password or token for authentication.

If you want to use the clear text content, you can use the stringData for Secret creation. The following example shows how it looks like

<file yaml my-basic-auth-secret.yaml>
apiVersion: v1
kind: Secret
metadata:
  name: pengfei-basic-auth
type: kubernetes.io/basic-auth
# string data accepts clear text, data accepts only base64 code
stringData:
  username: admin
  password: foobar
</file>

When create this secret try to use kubectl apply. 
<code>
kubectl create --save-config 
kubectl apply
</code>

=== 9.4.1.4 SSH authentication secrets ===

The builtin type kubernetes.io/ssh-auth is provided for storing data used in SSH authentication. When using this Secret type, you will have to specify a ssh-privatekey key-value pair in the data (or stringData) field as the SSH credential to use.

The following YAML is an example config for a SSH authentication Secret:
<file yaml ssh-auth-secret.yaml>
apiVersion: v1
kind: Secret
metadata:
  name: ssh-auth-secret
type: kubernetes.io/ssh-auth
data:
  # the data is abbreviated in this example
  ssh-privatekey: |
     MIIEpQIBAAKCAQEAulqb/Y ...
</file>

=== 9.4.1.5 TLS secrets ===

Kubernetes provides a built-in Secret type kubernetes.io/tls for to storing a certificate and its associated key that are typically used for TLS . This data is primarily used with TLS termination of the Ingress resource, but may be used with other resources or directly by a workload. When using this type of Secret, the **tls.key** and the **tls.crt** key must be provided in the data (or stringData) field

<file yaml tls-secret.yaml>
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
type: kubernetes.io/tls
data:
  # the data is abbreviated in this example
  tls.crt: |
    MIIC2DCCAcCgAwIBAgIBATANBgkqh ...
  tls.key: |
    MIIEpgIBAAKCAQEA7yn3bRHQ5FHMQ ...
</file>

You can also use a command to create a tls secret
<code>
kubectl create secret tls my-tls-secret \
  --cert=path/to/cert/file \
  --key=path/to/key/file
</code>

=== 9.4.1.6 Bootstrap token secrets ===
This type of Secret is designed for tokens used during the node bootstrap process. It stores tokens used to sign well known ConfigMaps.

A bootstrap token Secret is usually created in the kube-system namespace and named in the form bootstrap-token-<token-id> where <token-id> is a 6 character string of the token ID.

A bootstrap type Secret has the following keys specified under data:

  * token_id: A random 6 character string as the token identifier. Required.
  * token-secret: A random 16 character string as the actual token secret. Required.
  * description: A human-readable string that describes what the token is used for. Optional.
  * expiration: An absolute UTC time using RFC3339 specifying when the token should be expired. Optional.
  * usage-bootstrap-<usage>: A boolean flag indicating additional usage for the bootstrap token.
  * auth-extra-groups: A comma-separated list of group names that will be authenticated as in addition to the system:bootstrappers group.

<file yaml bootstrap-token-secret.yaml>
apiVersion: v1
kind: Secret
metadata:
  # Note how the Secret is named
  name: bootstrap-token-5emitj
  # A bootstrap token Secret usually resides in the kube-system namespace
  namespace: kube-system
type: bootstrap.kubernetes.io/token
stringData:
  auth-extra-groups: "system:bootstrappers:kubeadm:default-node-token"
  expiration: "2020-09-13T04:39:10Z"
  # This token ID is used in the name
  token-id: "5emitj"
  token-secret: "kq4gihvszzgn1p0r"
  # This token can be used for authentication
  usage-bootstrap-authentication: "true"
  # and it can be used for signing
  usage-bootstrap-signing: "true"
</file>
===== 9.5 Editing k8s Secret =====

An existing Secret may be edited with the following command:

<code>
kubectl edit secrets empty-secret
</code>

Unlike configMap, editing secret in base64 is quite complex. I prefer to edit the yaml source file and apply it again.

===== 9.6 Using Secrets k8s Secret =====
Secrets can be mounted as data volumes or exposed as environment variables to be used by a container in a Pod. Secrets can also be used by other parts of the system, without being directly exposed to the Pod. For example, Secrets can hold credentials that other parts of the system should use to interact with external systems on your behalf.

==== 9.6.1 Using Secrets as files from a Pod ====

To consume a Secret in a volume in a Pod:

  - Create a secret or use an existing one. Multiple Pods can reference the same secret.
  - Modify your Pod definition to add a volume under .spec.volumes[]. Name the volume anything, and have a .spec.volumes[].secret.secretName field equal to the name of the Secret object
  - Add a .spec.containers[].volumeMounts[] to each container that needs the secret. Specify .spec.containers[].volumeMounts[].readOnly = true and .spec.containers[].volumeMounts[].mountPath to an unused directory name where you would like the secrets to appear.
  - Modify your image or command line so that the program looks for files in that directory. Each key in the secret data map becomes the filename under mountPath.

The following pod use pengfei-basic-auth secret to create a volume then mount it under /etc/creds.

<file yaml pod-with-secret1.yaml>
apiVersion: v1
kind: Pod
metadata:
  name: pod-with-secret1
spec:
  containers:
  - name: mypod
    image: busybox
    command: [ "/bin/sh","-c","sleep 600" ]
    volumeMounts:
    - name: creds
      mountPath: "/etc/creds"
      readOnly: true
  # create a volume named creds
  volumes:
  - name: creds
  # get data from secret pengfei-basic-auth
    secret:
      secretName: pengfei-basic-auth
      # defaultMode defines the default file acl.
      defaultMode: 0400
      items:
      # for key value pair username, create a file my-group/my-username
      - key: username
        path: my-group/my-username
        # If default acl is not ok, we can overwrite it by using mode
        mode: 0777
      - key: password
        path: my-group/my-password
</file>
You can check the mounted volume with following command
<code>
# get container shell
kubectl exec pod-with-secret1 -it -- /bin/sh

# print the acl, you can notice password use defaul 0400, username use custom 0777
/etc/creds/..2020_12_15_14_43_09.397266985/my-group # ls -lah
total 8K     
drwxr-xr-x    2 root     root          80 Dec 15 14:43 .
drwxr-xr-x    3 root     root          60 Dec 15 14:43 ..
-r--------    1 root     root           7 Dec 15 14:43 my-password
-rwxrwxrwx    1 root     root           5 Dec 15 14:43 my-username

# print the content
/etc/creds/..2020_12_15_14_28_01.791602869/my-group # cat my-password
foobar
/etc/creds/..2020_12_15_14_28_01.791602869/my-group # cat my-username 
admin
</code>

Note **Mounted Secrets are updated automatically**, You can try to modify the pengfei-basic-auth secret, and check if the mounted volume changed or not

==== 9.6.2 Using Secrets as environment variables from a Pod ====

To use a secret in an environment variable in a Pod:

  - Create a secret or use an existing one. Multiple Pods can reference the same secret.
  - Modify your Pod definition in each container that you wish to consume the value of a secret key to add an environment variable for each secret key you wish to consume. The environment variable that consumes the secret key should populate the secret's name and key in env[].valueFrom.secretKeyRef.
  - Modify your image and/or command line so that the program looks for values in the specified environment variables.

This is an example of a Pod that uses secrets from environment variables:

<file yaml pod-with-secret-env.yaml>
apiVersion: v1
kind: Pod
metadata:
  name: pod-with-secret-env
spec:
  containers:
  - name: mypod
    image: busybox
    command: [ "/bin/sh","-c","sleep 600" ]
    env:
    # Specify env var name
      - name: SECRET_USERNAME
      # specify the source value
        valueFrom:
        # name of the secret
          secretKeyRef:
            name: pengfei-basic-auth
            key: username
      - name: SECRET_PASSWORD
        valueFrom:
          secretKeyRef:
            name: pengfei-basic-auth
            key: password
  restartPolicy: Never
</file>

**Environment variables are not updated after a secret update** 

===== 9.7  Immutable ConfigMaps and Secrets =====


The Kubernetes beta feature Immutable Secrets and ConfigMaps provides an option to set individual Secrets and ConfigMaps as immutable. For clusters that extensively use Secrets (at least tens of thousands of unique Secret to Pod mounts), preventing changes to their data has the following advantages:

  * protects you from accidental (or unwanted) updates that could cause applications outages
  * improves the performance of your cluster by significantly reducing load on kube-apiserver, by closing watches for secrets and configMap marked as immutable.

The following yaml file is an sample of immutable configMap or secrets
<file yaml immutable-sample.yaml>
apiVersion: v1
kind: Secret/configMap
metadata:
  ...
data:
  ...
immutable: true
</file>

===== 9.8 ConfigMaps and Secrets Restrictions=====

Secrets and ConfigMaps has the following restrictions

  - Secrets and ConfigMaps must exist before pods creation
  - Secrets and ConfigMaps can only be referenced by Pods in that same namespace.
  - Secrets and ConfigMaps are limited to 1MiB in size. This is to discourage the creation of very large secrets that would exhaust the API server and kubelet memory. However, the creation of many smaller secrets could also exhaust memory. 
  - Secrets and ConfigMaps used to populate environment variables by the **envFrom** field that have keys that are considered **invalid environment variable names will have those keys skipped**. The Pod will be allowed to start. There will be an event whose reason is InvalidVariableNames and the message will contain the list of invalid keys that were skipped. 
  - Pods created as a result of the kubelet --manifest-url flag, its --config flag, or its REST API can not use Secrets and ConfigMaps
