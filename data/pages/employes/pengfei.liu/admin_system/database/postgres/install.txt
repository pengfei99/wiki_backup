====== Postgresql tutorial ======

===== 1. Install postgresql server on cenots 7 =====

==== 1.1 Exclude the default postgresql of base repo ====

Because the default version of postgresql of the base repo is an outdated version. So we need to exclude this to install a newer version.

<code>
sudo vim /etc/yum.repos.d/CentOS-Base.repo

# find the base and updates section, put exclude=postgresql*
...
[base]
name=CentOS-$releasever - Base
mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=os&infra=$infra
#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7

exclude=postgresql*

#released updates
[updates]
name=CentOS-$releasever - Updates
mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=updates&infra=$infra
#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
exclude=postgresql*
...
</code>
==== 1.2 Get postgresql repo ====


You can visit this link https://yum.postgresql.org/repopackages.php for more information of PostgreSQL version.

Install a repository configuration package using the official PostgreSQL repository for

<code>
# Add the PostgreSQL repository in CentOS 7.
$ sudo yum install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm

# Now we can list all the available postgresql server and client
$ yum list postgresql*

</code>

==== 1.2 Install postgresql ====

<code>
# For example, we want to install version 11
sudo yum install postgresql11-server

# Initialize your postgresql db
sudo /usr/pgsql-11/bin/postgresql-11-setup initdb

# Start, stop, status de postgresql service
systemctl start/stop/status postgresql-11
</code>



===== 2. Configure postgresql =====

There are two conf you need to modify
  - pg_hba.conf (default location is /var/lib/pgsql/11/data you should changed it based on your verison )
  - postgresql.conf (default location is /var/lib/pgsql/11/data you should changed it based on your verison )

==== 2.1. Configure pg_hba to setup authentication rules ====


In my case, the pg_hba.conf file can be find in /var/lib/pgsql/11/data/

<code>
# open it
vim pg_hba.conf

##### You should see following lines ########
# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
host    all             all             127.0.0.1/32            ident
# IPv6 local connections:
host    all             all             ::1/128                 ident
# Allow replication connections from localhost, by a user with the
# replication privilege.
local   replication     postgres                                peer
#host    replication     postgres        127.0.0.1/32            ident
#host    replication     postgres        ::1/128                 ident
</code>

Each line is an authentication rule. Postgres supports many authentications rules:
  * trust: everyone can login (no-login)
  * peer: get user id from the operating system. If user is set to all, means all authenticated user of the os can login
  * iden: user id must identical to the given user name of the rule
  * md5: use postgresql internal account and auth system.
  * ldap: allow ldap auth

The most used auth mod is md5. For example if I want to allow a machine with IP 134.188.88.8 to access on my base toto with login titi. Note titi must be an account created inside postgresql server.

I should add a line like this

''host  toto    titi   134.188.88.8/32     md5''

==== 2.2. Configure postgresql.conf to allow remote access to postgresql server ====
add this line to allow remote connection on postgresql server

<code>
cd /var/lib/pgsql/11/data
vim postgresql.conf

# listen_addresses = 'localhost' means only local connexion is allowed
# change it to *, postgres accept all connexiton 
listen_addresses = '*'
</code>  

==== 2.3 User management ====

As I mentioned, if you want to use md5 auth mod in pg_hba.conf, you need to create an account. Below shows how to create an account. 

<code>
# create user pliu with pwd toto
CREATE USER pliu WITH PASSWORD 'toto';

# change user password
ALTER USER 'user_name' WITH PASSWORD 'new_password';
</code>


==== 2.4 Grant privilege ====

Even you can login to the postgres server, it does mean you can access a database or a table. You also need to setup ACL for your database to allow allow certain accounts to access it.

<code>
# suppose you are in the postgresql server, and it allows ident auth as root user
# become postgres in your os
sudo su postgres
# connect to the server via psql client
psql

# login into the server as postgres
postgres=# 

# create a new databasse
postgres=# CREATE DATABASE mysite;

# grant all privileges of database mysite to user pliu
postgres=# GRANT ALL PRIVILEGES ON DATABASE mysite TO pliu;

# grant read only privileges on a schema
# 1. you need to grant user to use this schema
postgres=# GRANT USAGE ON SCHEMA mysite TO pliu;
# 2. you grant select right on tables of this schema
postgres=# GRANT SELECT ON ALL TABLES IN SCHEMA mysite TO pliu;
</code>

==== 2.5 Test your account connexion ====

<code>
# -d means connect to database mysite, -W means interactive password input 
psql -U pliu -h localhost -d mysite -W
</code>

=== 2.5.1 Install psql client on ubuntu ===

<code>
sudo apt-get install postgresql-client  
</code>


==== 2.6 config .pgpass ====

If you don't want to type your password every time, when you connect to your db server. You can set up a .pgpass file in your home directory. When you start psql command, it will search first the .pgpass file in your home dir. If it finds it, it will try to use it to login. If it fails, it will ask you to enter the password again.

<code>
# create the conf file
vim ~/.pgpass

# Each line is for a connection, it has the following general format
# hostname:port:database:username:password
# Below is an example.
10.233.5.21:5432:defaultdb:pengfei:eewxph0k7wg77qrz1z4c
</code>





====== 3. Python postgresql integration  ======

Most of the python application uses "psycopg2" to connect to postgres db(e.g. django, mlflow)

===== 3.1 Install psycopg2 =====

<code>
# 1. Install dependencies
# psycopy needs postgresql developpement tool package to compile.
# You need to change the name based on your version
$ sudo yum install postgresql11-devel

# install psycopg2
$ pip install psycopg2

</code>

If it fails, and says **Error: pg_config executable not found.**

You need to add pg_config to your path.
<code>
# To find where is your pg_config
$ find / -name pg_config  2>/dev/null

# For example, if it shows /usr/pgsql-11/bin/pg_config, you need to 
$ export PATH=$PATH:/usr/pgsql-11/bin/

# Now you can reinstall 
$ pip install psycopg2
</code>


===== 3.2 Initial database with django web app database =====

<code>
# Go to your django app folder, for example here my app is called web-app
$ cd /var/www/web-app/

# call the migration function
$ python manage.py makemigrations
$ python manage.py migrate

# Test if everything goes well
$ python manage.py runserver
$ gunicorn web-app.wsgi:application
</code>



====== 4. pg_dump version mismatch - How to fix in CentOS 7 ======

If you have the following message 

<code>
pg_dump: server version: 9.4.7; pg_dump version: 9.2.15 

pg_dump: aborting because of server version mismatch

</code>

It means you need to update your pg_dump version

To do so on centos7, you need to add the rpm

''$ sudo rpm -Uvh https://download.postgresql.org/pub/repos/yum/9.4/redhat/rhel-7-x86_64/pgdg-centos94-9.4-3.noarch.rpm''

All the available package is here: http://yum.postgresql.org/repopackages.php#pg94

Install the psql 94 client

''$ sudo yum install postgresql94''


Find the pg_dump executable 

''$ find / -name pg_dump -type f 2>/dev/null''

For example, in my centos 7, it shows 

<code>
/usr/bin/pg_dump
/usr/pgsql-9.4/bin/pg_dump

# pg_dump for export database to a file
/usr/pgsql-9.4/bin/pg_dump -h <hostname> -U <username> <dbname> > db_dump_file

# for example, if you have a database northwind, to export it use the following command
# and user must have the right to export the database
pg_dump -U pliu -h 127.0.0.1 -d northwind -W > northwind
psql --set ON_ERROR_STOP=on dbname < dumpfile

# if you want to import data into a database, database must be crea
psql -U pliu -h cclindw01.in2p3.fr northwind < northwind.sql
</code>


====== 5. Jdbc driver ======

In this page you can find all jdbc drivers https://jdbc.postgresql.org/download.html

For java 8, we choose 

https://jdbc.postgresql.org/download/postgresql-42.2.5.jar


