====== Linux file system advance access control ======

We all know that the default owner:group:other acl will work for most of the time. But if we want to two different groups with different access rights to access the same data(e.g. file, directory).

To set multiple groups on a single directory or file we need to use **setfacl**, to check all the privileges on the file, we need to use **getfacl**.

===== 1. GETFACL =====

For each file, getfacl displays the file name, owner, the group, and the Access Control List (ACL). If a directory has a default ACL, getfacl also displays the default ACL. Non-directories cannot have default ACLs.

If getfacl is used on a file system that does not support ACLs, getfacl displays the access permissions defined by the traditional file mode permission bits.

The output format of getfacl is as follows:

<code>
1:  # file: somedir/
2:  # owner: lisa
3:  # group: staff
4:  user::rwx
5:  user:joe:rwx               #effective:r-x
6:  group::rwx                 #effective:r-x
7:  group:cool:r-x
8:  mask:r-x
9:  other:r-x
10:  default:user::rwx
11:  default:user:joe:rwx       #effective:r-x
12:  default:group::r-x
13:  default:mask:r-x
14:  default:other:---
</code>
Lines 4, 6 and 9 correspond to the user, group and other fields of the file mode permission bits. These three are called the base ACL entries. Lines 5 and 7 are named user and named group entries. Line 8 is the effective rights mask. This entry limits the effective rights granted to all groups and to named users. (The file owner and others permissions are not affected by the effective rights mask; all other entries are.) Lines 10 through 14 display the default ACL associated with this directory. Directories may have a default ACL. Regular files never have a default ACL.

The default behavior for getfacl is to display both the ACL and the default ACL, and to include an effective rights comment for lines where the rights of the entry differ from the effective rights.

==== Effective rights ====

Note that the **effective rights** are the real rights applied to users. For example, even we give user joe rwx in the acl, but with the effective rights mask, the effective right of joe is r-x, which means joe cant write on this directory. The same rule applies on the users of group staff, as the effective rights for group staff is r-x, Only lisa can write on this directory
==== Permissions ====

Processes with search access to a file (i.e., processes with read access to the containing directory of a file) are also granted read access to the file's ACLs. This is analogous to the permissions required for accessing the file mode.

==== Options ====

  * -- access:	Display the file access control list.
  * -d, -- default:	Display the default access control list.
  * -- omit-header:	Do not display the comment header (the first three lines of each file's output).
  * -- all-effective: Print all effective rights comments, even if identical to the rights defined by the ACL entry.
  * -- no-effective: Do not print effective rights comments.
  * -- skip-base: Skip files that only have the base ACL entries (owner, group, others).
  * -R, --recursive: List the ACLs of all files and directories recursively.
  * -L, --logical: "Logical walk" (follow symbolic links). The default behavior is to follow symbolic link arguments and to skip symbolic links encountered in subdirectories.
  * -P, --physical:	"Physical walk" (skip all symbolic links). This also skips symbolic link arguments.
  * --tabular: Use an alternative tabular output format. The ACL and the default ACL are displayed side by side. Permissions that are ineffective due to the ACL mask entry are displayed capitalized. The entry tag names for the ACL_USER_OBJ and ACL_GROUP_OBJ entries are also displayed in capital letters, which helps in spotting those entries.
  * --absolute-names: Do not strip leading slash characters (‘/’). The default behavior is to strip leading slash characters.
  * --version: Print the version of getfacl and exit.
  * --help: Print help explaining the command line options.
  * --: End of command line options. All remaining parameters are interpreted as file names, even if they start with a dash character.
  * -: If the filename parameter is a single dash character, getfacl reads a list of files from standard input.

==== Examples ====

<code>
# 1. Get getfacl version
> getfacl -v
getfacl 2.2.52

# Note that if you put a filename behind -v, it will still only show "getfacl 2.2.52"

# 2. A simple getfacl on a file
> getfacl test/toto.txt 

# file: test/toto.txt
# owner: root
# group: root
user::rw-
group::r--
group:bioaster:rwx
mask::rwx
other::r--

# 3. Get default acl on a file
> getfacl -d test/toto.txt 

# file: test/toto.txt
# owner: root
# group: root


# 4. The following command will return all files acl in test recursively, all hard/soft symbolic link will be shown also
> getfacl -RLP test

# file: test
# owner: root
# group: root
user::rwx
group::r-x
group:bioaster:rwx
mask::rwx
other::r-x

# file: test/toto.txt
# owner: root
# group: root
user::rw-
group::r--
group:bioaster:rwx
mask::rwx
other::r--

</code>

===== 2. SETFACL =====

The setfacl utility sets Access Control Lists (ACLs) of files and directories. On the command line, a sequence of commands is followed by a sequence of files (which in turn can be followed by another sequence of commands, and so on).

==== Main options ====

The options -m and -x expect an ACL on the command line. Multiple ACL entries are separated by commas (","). The options -M and -X read an ACL from a file or from standard input. The ACL entry format is described in the ACL Entries section, below.

The -m (--modify) and -M (--modify-file) options modify the ACL of a file or directory. ACL entries for this operation must include permissions.

The -x (--remove) and -X (--remove-file) options remove ACL entries. It is not an error to remove an entry which does not exist. Only ACL entries without the perms field are accepted as parameters, unless the POSIXLY_CORRECT environment variable is defined.

When reading from files using the -M and -X options, setfacl accepts the output produced by getfacl. There is at most one ACL entry per line. After a pound sign ("#"), everything up to the end of the line is treated as a comment.

The --set and --set-file options set the ACL of a file or a directory. The previous ACL is replaced. ACL entries for this operation must include permissions.

If setfacl is used on a file system which does not support ACLs, setfacl operates on the file mode permission bits. If the ACL does not fit completely in the permission bits, setfacl modifies the file mode permission bits to reflect the ACL as closely as possible, writes an error message to standard error, and returns with an exit status greater than 0.

==== Other options ====

  * -b, --remove-all: Remove all extended ACL entries. The base ACL entries of the owner, group and others are retained.
  * -k, --remove-default: Remove the Default ACL. If no Default ACL exists, no warnings are issued.
  * -n, --no-mask: Do not recalculate the effective rights mask. The default behavior of setfacl is to recalculate the ACL mask entry, unless a mask entry was explicitly given. The mask entry is set to the union of all permissions of the owning group, and all named user and group entries. (These are exactly the entries affected by the mask entry).
  * --mask: Do recalculate the effective rights mask, even if an ACL mask entry was explicitly given. (See the -n option.)
  * -d, --default: All operations apply to the Default ACL. Regular ACL entries in the input set are promoted to Default ACL entries. Default ACL entries in the input set are discarded. (A warning is issued if that happens).
  * --restore=file: Restore a permission backup created by "getfacl -R" or similar. All permissions of a complete directory subtree are restored using this mechanism. If the input contains owner comments or group comments, setfacl attempts to restore the owner and owning group. If the input contains flags comments (which define the setuid, setgid, and sticky bits), setfacl sets those three bits accordingly; otherwise, it clears them. This option cannot be mixed with other options except "--test".
  * --test: Test mode. Instead of changing the ACLs of any files, the resulting ACLs are listed.
  * -R, --recursive: Apply operations to all files and directories recursively. This option cannot be mixed with "--restore".
  * -L, --logical: "Logical walk": follow symbolic links to directories. The default behavior is to follow symbolic link arguments and skip symbolic links encountered in subdirectories. Only effective in combination with -R. This option cannot be mixed with "--restore".
  * -P, --physical: "Physical walk": do not follow symbolic links to directories. This also skips symbolic link arguments. Only effective in combination with -R. This option cannot be mixed with "--restore".
  * -v, --version: Print the version of setfacl, and exit.
  * -h, --help: Print a help message explaining the command line options.
  * --: A double-dash marks the end of command line options; all remaining parameters are interpreted as file names. This option is especially useful for file names that start with a dash.
  * -: If the filename parameter is a single dash, setfacl reads a list of files from standard input.

==== Acl entries ====

setfacl recognizes the following ACL entry formats (spaces in the following formats are optional, but have been included for legibility):
  * [d[efault]:] [u[ser]:]uid [:perms]	-> Permissions of the user with user ID uid, or permissions of the file's owner if uid is empty.
  * [d[efault]:] g[roup]:gid [:perms]	-> Permissions of the group with group ID gid, or permissions of the owning group if gid is empty.
  * [d[efault]:] m[ask][:] [:perms] ->	Effective rights mask.
  * [d[efault]:] o[ther][:] [:perms] -> Permissions of others.

Note : Whitespace between delimiter characters and non-delimiter characters is ignored.



==== Examples ====


<code>
# 1. Grant user pliu read access to file foo.txt
> setfacl -m u:pliu:r foo.txt

# 2. Revoke write access from all groups and all named users (using the effective rights mask) for file foo.txt
> setfacl -m m::rx foo.txt


# 3. Grant group architect read,write and execute rights on a directory test and all subfiles or subdirs.
> setfacl -R -m g:architect:rwx test
# Note that -R must be before -m, if you reverse the order it will return setfacl: Option -m: Invalid argument near character 1

# 4. Remove the group entry for the group staff from file toto.txt's ACL
> setfacl -x g:staff toto.txt

# 5. Copy the ACL of file1 to file2
> getfacl file1 | setfacl --set-file=- file2

# 6. Copy the access ACL into the default ACL.
> getfacl --access dir | setfacl -d -M- dir 


</code>

